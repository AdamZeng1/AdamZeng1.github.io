<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AdamZeng</title>
  
  <subtitle>start from zero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://adamzeng.site/"/>
  <updated>2018-09-22T05:33:03.266Z</updated>
  <id>http://adamzeng.site/</id>
  
  <author>
    <name>AdamZeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ipv6复习</title>
    <link href="http://adamzeng.site/2018/09/22/ipv6%E5%A4%8D%E4%B9%A0/"/>
    <id>http://adamzeng.site/2018/09/22/ipv6复习/</id>
    <published>2018-09-22T00:52:25.000Z</published>
    <updated>2018-09-22T05:33:03.266Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Rule-1-Omit-leading-0s"><a href="#Rule-1-Omit-leading-0s" class="headerlink" title="Rule 1- Omit leading 0s"></a>Rule 1- Omit leading 0s</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi1ht14d6j311a04swf2.jpg" alt="屏幕快照 2018-09-22 上午11.02.28"></p><p>The first rule to help reduce the notation of IPv6 addresses is to omit any leading 0s (zeros) in any 16-bit section or hextet. For example:</p><ul><li><p>01AB can be represented as 1AB</p></li><li><p>09F0 can be represented as 9F0</p></li><li><p>0A00 can be represented as A00</p></li><li><p>00AB can be represented as AB</p></li></ul><p>This rule only applies to leading 0s, NOT to trailing 0s, otherwise the address would be ambiguous. For example, the hextet “ABC” could be either “0ABC” or “ABC0”, but these do not represent the same value.</p><h4 id="Rule-2-Omit-all-0-segments"><a href="#Rule-2-Omit-all-0-segments" class="headerlink" title="Rule 2-Omit all 0 segments"></a>Rule 2-Omit all 0 segments</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi1p2w4jmj310y06udgo.jpg" alt="屏幕快照 2018-09-22 上午11.09.37"></p><p>The second rule to help reduce the notation of IPv6 addresses is that a double colon (::) can replace any single, contiguous string of one or more 16-bit segments (hextets) consisting of all 0s.</p><p>The double colon (::) can only be used once within an address, otherwise there would be more than one possible resulting address. When used with the omitting leading 0s technique, the notation of IPv6 address can often be greatly reduced. This is commonly known as the compressed format.</p><p>Incorrect address:</p><ul><li>2001:0DB8::ABCD::1234</li></ul><h4 id="IPv6-Address-Types"><a href="#IPv6-Address-Types" class="headerlink" title="IPv6 Address Types"></a>IPv6 Address Types</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi221eq9xj313u0rwdt2.jpg" alt="屏幕快照 2018-09-22 上午11.21.53"></p><ul><li><p><strong>Unicast</strong> - An IPv6 unicast address uniquely identifies an interface on an IPv6-enabled device. As shown in the figure, a source IPv6 address must be a unicast address.</p></li><li><p><strong>Multicast</strong> - An IPv6 multicast address is used to send a single IPv6 packet to multiple destinations.</p></li><li><p><strong>Anycast</strong> - An IPv6 anycast address is any IPv6 unicast address that can be assigned to multiple devices. A packet sent to an anycast address is routed to the nearest device having that address. Anycast addresses are beyond the scope of this course.</p></li></ul><h4 id="IPv6-prefix-length"><a href="#IPv6-prefix-length" class="headerlink" title="IPv6 prefix length"></a>IPv6 prefix length</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi2mva3l9j311e0keag2.jpg" alt="屏幕快照 2018-09-22 上午11.41.47"></p><p>Recall that the prefix, or network portion, of an IPv4 address, can be identified by a dotted-decimal subnet mask or prefix length (slash notation). For example, an IPv4 address of 192.168.1.10 with dotted-decimal subnet mask 255.255.255.0 is equivalent to 192.168.1.10/24.</p><p>IPv6 uses the prefix length to represent the prefix portion of the address. IPv6 does not use the dotted-decimal subnet mask notation. The prefix length is used to indicate the network portion of an IPv6 address using the IPv6 address/prefix length.</p><p>The prefix length can range from 0 to 128. A typical IPv6 prefix length for LANs and most other types of networks is /64. This means the prefix or network portion of the address is 64 bits in length, leaving another 64 bits for the interface ID (host portion) of the address.</p><h4 id="IPv6-Unicast-Addresses"><a href="#IPv6-Unicast-Addresses" class="headerlink" title="IPv6 Unicast Addresses"></a>IPv6 Unicast Addresses</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvi2rso5cyj311o0rednl.jpg" alt="屏幕快照 2018-09-22 上午11.46.36"></p><p>An IPv6 unicast address uniquely identifies an interface on an IPv6-enabled device. A packet sent to a unicast address is received by the interface that is assigned that address. Similar to IPv4, a source IPv6 address must be a unicast address. The destination IPv6 address can be either a unicast or a multicast address.</p><h4 id="Structure-of-an-IPv6-Global-Unicast-Address"><a href="#Structure-of-an-IPv6-Global-Unicast-Address" class="headerlink" title="Structure of an IPv6 Global Unicast Address"></a>Structure of an IPv6 Global Unicast Address</h4><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvi36it5syj31640s6n8e.jpg" alt="屏幕快照 2018-09-22 下午12.00.53"></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi38mkgyuj314y0o8dos.jpg" alt="屏幕快照 2018-09-22 下午12.02.46"></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvi3973huxj314m0scdm3.jpg" alt="屏幕快照 2018-09-22 下午12.03.28"></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvi3d061rjj31520tkn9e.jpg" alt="屏幕快照 2018-09-22 下午12.07.03"></p><h4 id="Subnetting-Using-the-Subnet-ID"><a href="#Subnetting-Using-the-Subnet-ID" class="headerlink" title="Subnetting Using the Subnet ID"></a>Subnetting Using the Subnet ID</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvi3qdhoafj30z80omk2j.jpg" alt="屏幕快照 2018-09-22 下午12.19.18"></p><p>The 16 bit subnet ID section of the IPv6 global unicast address can be used by an organization to create internal subnets.</p><p>The subnet ID provides more than enough subnets and host support than will ever be needed in one subnet. For instance, the 16 bit section can:</p><ul><li><p>Create up to 65,536 /64 subnets. This does not include the possibility of borrowing any bits from the interface ID of the address.</p></li><li><p>Support up to 18 quintillion host IPv6 addresses per subnet (i.e., 18,000,000,000,000,000,000).</p></li></ul><p><strong>Note</strong>: Subnetting into the 64 bit Interface ID (or host portion) is also possible but it is rarely required.</p><p>IPv6 subnetting is also easier to implement than IPv4, because there is no conversion to binary required. To determine the next available subnet, just count up in hexadecimal.</p><h4 id="Configure-a-Next-Hop-Static-IPv6-Route"><a href="#Configure-a-Next-Hop-Static-IPv6-Route" class="headerlink" title="Configure a Next-Hop Static IPv6 Route"></a>Configure a Next-Hop Static IPv6 Route</h4><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvi4279fjrj314m0toao2.jpg" alt="屏幕快照 2018-09-22 下午12.31.18"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvi445e5ooj314c0t67f4.jpg" alt="屏幕快照 2018-09-22 下午12.33.08"></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvi45usu4wj31540twwsf.jpg" alt="屏幕快照 2018-09-22 下午12.34.27"></p><h4 id="Configure-a-Default-Static-IPv6-Route"><a href="#Configure-a-Default-Static-IPv6-Route" class="headerlink" title="Configure a Default Static IPv6 Route"></a>Configure a Default Static IPv6 Route</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvi4a9atj9j31460to16b.jpg" alt="屏幕快照 2018-09-22 下午12.39.02"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvi4dl06f6j314m0tk7hq.jpg" alt="屏幕快照 2018-09-22 下午12.41.28"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvi9axl7vhj315i0tm4at.jpg" alt="屏幕快照 2018-09-22 下午3.32.22"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Rule-1-Omit-leading-0s&quot;&gt;&lt;a href=&quot;#Rule-1-Omit-leading-0s&quot; class=&quot;headerlink&quot; title=&quot;Rule 1- Omit leading 0s&quot;&gt;&lt;/a&gt;Rule 1- Omit leadin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jvm检测工具</title>
    <link href="http://adamzeng.site/2018/09/21/jvm%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>http://adamzeng.site/2018/09/21/jvm检测工具/</id>
    <published>2018-09-21T07:37:57.000Z</published>
    <updated>2018-09-21T23:48:23.163Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h4><p>下图为macox平台上的JConsole，内存区域相当于可视化的jstat命令，用于监视受收集器管理的虚拟机内存（Java堆和永久代）的变化趋势。我们通过运行代码下图代码来体验一下它的监视功能。<a id="more"></a></p><p>运行时的设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC，这段代码的作用是以64KB/50毫秒的速度往Java堆中填充数据，一拱填充1000次，使用JConsole的“内存”页签进行监视，观察曲线和柱状指示图的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOOMObject</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] placeholder = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span> *<span class="number">1024</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillHeap</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++) &#123;</div><div class="line"><span class="comment">// wait a while, make curve more apparent</span></div><div class="line">Thread.sleep(<span class="number">50</span>);</div><div class="line">list.add(<span class="keyword">new</span> OOMObject());</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">System.gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">fillHeap(<span class="number">2000</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvh7c0rv9cj31cm102n33.jpg" alt="屏幕快照 2018-09-21 下午5.38.26"></p><p>程序运行后，在内存页签中可以看到内存池Eden区的运行趋势呈现折线状，如上图所示。而监视范围扩大至整个堆后，会发现曲线是一条向上增长得平滑曲线。并且从柱状图可以看出，在1000次循环执行结束，运行了System.gc()后，虽然整个新生代Eden和Survivor区都基本被清空了，但是代表老年代的柱状图仍然保持峰值状态，说明被填充进堆中的数据在System.gc()方法执行之后仍然存货。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvh8i7rdtej30jq0dodgf.jpg" alt="2843224-384b0ec9f7da088d"></p><p>####JVM内存包括区域</p><ol><li>Heap（堆区）</li></ol><ul><li>New Generation（新生代） <ul><li>Eden</li><li>Survivor From</li><li>Survivor To</li></ul></li><li>Old Generation（老年代）</li></ul><ol><li>方法区</li></ol><ul><li>Permanent Generation（持久代）</li></ul><ol><li>Stack（栈区）</li><li>Metaspace（元空间）</li><li>Direct ByteBuffer（直接内存）</li></ol><p>下面我们就通过一些JVM启动参数来配置以上内存空间</p><h2 id="Heap（堆）内存大小设置"><a href="#Heap（堆）内存大小设置" class="headerlink" title="Heap（堆）内存大小设置"></a>Heap（堆）内存大小设置</h2><p>-Xms512m</p><blockquote><p>设置JVM堆初始内存为512M</p></blockquote><p>-Xmx1g</p><blockquote><p>设置JVM堆最大可用内存为1G</p></blockquote><h2 id="New-Generation（新生代）内存大小设置"><a href="#New-Generation（新生代）内存大小设置" class="headerlink" title="New Generation（新生代）内存大小设置"></a>New Generation（新生代）内存大小设置</h2><p>-Xmn256m</p><blockquote><p>设置JVM的新生代内存大小（－Xmn 是将NewSize与MaxNewSize设为一致。256m）,同下面两个参数<br> -XX:NewSize=256m<br> -XX:MaxNewSize=256m</p></blockquote><p><strong>还可以通过新生代和老年代内存的比值来设置新生代大小</strong><br> -XX:NewRatio=3</p><blockquote><p>设置新生代（包括Eden和两个Survivor区）与老年代的比值（除去持久代）。设置为3，则新生代与老年代所占比值为1：3，新生代占整个堆栈的1/4</p></blockquote><h2 id="Survivor内存大小设置"><a href="#Survivor内存大小设置" class="headerlink" title="Survivor内存大小设置"></a>Survivor内存大小设置</h2><p>-XX:SurvivorRatio=8</p><blockquote><p>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个新生代的1/10</p></blockquote><h2 id="Eden内存大小设置"><a href="#Eden内存大小设置" class="headerlink" title="Eden内存大小设置"></a>Eden内存大小设置</h2><p>新生代减去2*Survivor的内存大小就是Eden的大小。</p><h2 id="Old-Generation（老年的）的内存大小设置"><a href="#Old-Generation（老年的）的内存大小设置" class="headerlink" title="Old Generation（老年的）的内存大小设置"></a>Old Generation（老年的）的内存大小设置</h2><p>堆内存减去新生代内存<br> 如上面设置的参数举例如下：<br> 老年代初始内存为：512M-256M=256M<br> 老年代最大内存为：1G-256M=768M</p><h2 id="Stack-栈-内存大小设置"><a href="#Stack-栈-内存大小设置" class="headerlink" title="Stack(栈)内存大小设置"></a>Stack(栈)内存大小设置</h2><p>-Xss1m<br> 每个线程都会产生一个栈。在相同物理内存下，减小这个值能生成更多的线程。如果这个值太小会影响方法调用的深度。</p><h2 id="Permanent-Generation（持久代）内存大小设置"><a href="#Permanent-Generation（持久代）内存大小设置" class="headerlink" title="Permanent Generation（持久代）内存大小设置"></a>Permanent Generation（持久代）内存大小设置</h2><p>方法区内存分配（JDK8以前的版本使用，JDK8以后没有持久代了，使用的MetaSpace）<br> -XX: PermSize=128m 设置持久代初始内存大小128M<br> -XX:MaxPermSize=512m 设置持久代最大内存大小512M</p><h2 id="Metaspace（元空间）内存大小设置"><a href="#Metaspace（元空间）内存大小设置" class="headerlink" title="Metaspace（元空间）内存大小设置"></a>Metaspace（元空间）内存大小设置</h2><p>元空间（Metaspace）(JDK8)<br> -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8），JDK8的持久代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。</p><blockquote><ol><li>默认情况下，类元数据分配受到可用的本机内存容量的限制（容量依然取决于你使用32位JVM还是64位操作系统的虚拟内存的可用性）。</li></ol></blockquote><ol><li>一个新的参数 (MaxMetaspaceSize)可以使用。允许你来限制用于类元数据的本地内存。如果没有特别指定，元空间将会根据应用程序在运行时的需求动态设置大小。</li></ol><h2 id="Direct-ByteBuffer（直接内存）内存大小设置"><a href="#Direct-ByteBuffer（直接内存）内存大小设置" class="headerlink" title="Direct ByteBuffer（直接内存）内存大小设置"></a>Direct ByteBuffer（直接内存）内存大小设置</h2><p>-XX:MaxDirectMemorySize</p><blockquote><p>此参数的含义是当Direct ByteBuffer分配的堆外内存到达指定大小后，即触发Full GC。注意该值是有上限的，默认是64M，最大为sun.misc.VM.maxDirectMemory()，在程序中中可以获得-XX:MaxDirectMemorySize的设置的值。<br> 使用NIO可以api可以使用直接内存。</p></blockquote><h2 id="设置新生代代对象进入老年代的年龄"><a href="#设置新生代代对象进入老年代的年龄" class="headerlink" title="设置新生代代对象进入老年代的年龄"></a>设置新生代代对象进入老年代的年龄</h2><p>-XX:MaxTenuringThreshold=15</p><blockquote><p>设置垃圾最大年龄。如果设置为0的话，则新生代对象不经过Survivor区，直接进入老年代。对于老年代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则新生代对象会在Survivor区进行多次复制，这样可以增加对象再新生代的存活时间，增加在新生代即被回收的概论。</p></blockquote><p>他最大值为15岁，因为对象头中用了4位进行存储垃圾年龄 【1111（二进制）=15（十进制）】。</p><h2 id="不常用的参数："><a href="#不常用的参数：" class="headerlink" title="不常用的参数："></a>不常用的参数：</h2><p>-XX:MaxHeapFreeRatio=70</p><blockquote><p>GC后java堆中空闲量占的最大比例，大于该值，则堆内存会减少</p></blockquote><p>-XX:MinHeapFreeRatio=40</p><blockquote><p>GC后java堆中空闲量占的最小比例，小于该值，则堆内存会增加</p></blockquote><p>-XX:PretenureSizeThreshold=1024</p><blockquote><p>（单位字节）对象大小大于1024字节的直接在老年代分配对象</p></blockquote><p>-XX:TLABWasteTargetPercent =1</p><blockquote><p>TLAB占eden区的百分比    默认1%</p></blockquote><h4 id="线程监控"><a href="#线程监控" class="headerlink" title="线程监控"></a>线程监控</h4><p>如果上面的“内存”页签相当于可视化的jstat命令的话，“线程”页签的功能相当于可视化jstack命令，遇到线程停顿时可以使用这个页签进行监控分析。前面讲解jstack命令，遇到线程停顿时可以使用这个页签进行监控分析。前面讲解jstack命令的时候提到线程长时间停顿的主要原因主要有：等待外部资源（数据库连接、网络资源、设备资源等）、死循环、锁等待（活锁和死锁）。通过下面的代码分别演示一下这几种情况。</p><p>使用main方法中注释内容可以检测死循环，活锁，现在检测的是死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadWait</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程死循环演示</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createBusyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) ;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"testBusyThread"</span>);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程锁等待演示</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createLockThread</span><span class="params">(<span class="keyword">final</span> Object lock)</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        lock.wait();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                        ex.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"testLockThread"</span>);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynAddRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SynAddRunnable</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.a = a;</div><div class="line">            <span class="keyword">this</span>.b = b;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Integer.valueOf(a)) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (Integer.valueOf(b)) &#123;</div><div class="line">                    System.out.println(a + b);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">/*BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</span></div><div class="line">        br.readLine();</div><div class="line">        createBusyThread();</div><div class="line">        br.readLine();</div><div class="line">        Object obj = new Object();</div><div class="line">        createLockThread(obj);*/</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SynAddRunnable(<span class="number">1</span>, <span class="number">2</span>)).start();</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SynAddRunnable(<span class="number">2</span>, <span class="number">1</span>)).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvhzahru62j31ck0zagpk.jpg" alt="屏幕快照 2018-09-22 上午9.46.08"></p><p>上图即是用Jconsole进行分析之后的结果，发现在Thread-3中导致死锁的是Thread-2。同样的在Thread-2中导致死锁的是Thread-3。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JConsole&quot;&gt;&lt;a href=&quot;#JConsole&quot; class=&quot;headerlink&quot; title=&quot;JConsole&quot;&gt;&lt;/a&gt;JConsole&lt;/h4&gt;&lt;p&gt;下图为macox平台上的JConsole，内存区域相当于可视化的jstat命令，用于监视受收集器管理的虚拟机内存（Java堆和永久代）的变化趋势。我们通过运行代码下图代码来体验一下它的监视功能。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>minor GC</title>
    <link href="http://adamzeng.site/2018/09/20/minor-GC/"/>
    <id>http://adamzeng.site/2018/09/20/minor-GC/</id>
    <published>2018-09-20T01:08:55.000Z</published>
    <updated>2018-09-20T01:09:53.049Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>垃圾收集器与内存分配策略</title>
    <link href="http://adamzeng.site/2018/09/17/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http://adamzeng.site/2018/09/17/垃圾收集器与内存分配策略/</id>
    <published>2018-09-17T09:33:12.000Z</published>
    <updated>2018-09-18T01:46:16.082Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>static-route-and-dynamic-route</title>
    <link href="http://adamzeng.site/2018/09/16/static-route-and-dynamic-route/"/>
    <id>http://adamzeng.site/2018/09/16/static-route-and-dynamic-route/</id>
    <published>2018-09-16T07:07:08.000Z</published>
    <updated>2018-09-22T00:21:20.264Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Why-use-static-routing"><a href="#Why-use-static-routing" class="headerlink" title="Why use static routing?"></a>Why use static routing?</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fvbejbpus2j31040dgn0a.jpg" alt="屏幕快照 2018-09-16 下午5.14.52"></p><p>Static routing provides some advantages over dynamic routing, including:<a id="more"></a></p><ul><li><p>Static routes are not advertised over the network, resulting in better security.</p></li><li><p>Static routes use less bandwidth than dynamic routing protocols, no CPU cycles are used to calculate and communicate routes.</p></li><li><p>The path a static route uses to send data is known.</p></li></ul><p>Static routing has the following disadvantages:</p><ul><li><p>Initial configuration and maintenance is time-consuming.</p></li><li><p>Configuration is error-prone, especially in large networks.</p></li><li><p>Administrator intervention is required to maintain changing route information.</p></li><li><p>Does not scale well with growing networks; maintenance becomes cumbersome.</p></li><li><p>Requires complete knowledge of the whole network for proper implementation.</p></li></ul><h4 id="ip-route-Command"><a href="#ip-route-Command" class="headerlink" title="ip route Command"></a>ip route Command</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvbikax1hrj311a0e4gpy.jpg" alt="屏幕快照 2018-09-16 下午7.34.05"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvbjkayh7tj312u0jen6r.jpg" alt="屏幕快照 2018-09-16 下午8.08.44"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvbjonpf4cj313k0segxh.jpg" alt="屏幕快照 2018-09-16 下午8.12.47"></p><h4 id="ipv6-route-command"><a href="#ipv6-route-command" class="headerlink" title="ipv6 route command"></a>ipv6 route command</h4><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvbk8qkpndj314w0o0wsy.jpg" alt="屏幕快照 2018-09-16 下午8.32.09"></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fvbkh3xgfcj31540u015u.jpg" alt="屏幕快照 2018-09-16 下午8.40.03"></p><p>R1 is configured with a default static route pointing to R2. Because no administrative distance is configured, the default value (1) is used for this static route. R1 is also configured with a floating static default pointing to R3 with an administrative distance of 5. This value is greater than the default value of 1 and therefore; this route floats and is not present in the routing table, unless the preferred route fails.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Why-use-static-routing&quot;&gt;&lt;a href=&quot;#Why-use-static-routing&quot; class=&quot;headerlink&quot; title=&quot;Why use static routing?&quot;&gt;&lt;/a&gt;Why use static routing?&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fvbejbpus2j31040dgn0a.jpg&quot; alt=&quot;屏幕快照 2018-09-16 下午5.14.52&quot;&gt;&lt;/p&gt;
&lt;p&gt;Static routing provides some advantages over dynamic routing, including:
    
    </summary>
    
      <category term="network" scheme="http://adamzeng.site/categories/network/"/>
    
    
      <category term="network" scheme="http://adamzeng.site/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域与内存溢出异常</title>
    <link href="http://adamzeng.site/2018/09/16/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>http://adamzeng.site/2018/09/16/Java内存区域与内存溢出异常/</id>
    <published>2018-09-16T01:20:29.000Z</published>
    <updated>2018-09-16T12:11:00.462Z</updated>
    
    <content type="html"><![CDATA[<p>Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁、在第七版的Java SE中的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示<a id="more"></a></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fvb4kp1xmwj30lw0gmtgm.jpg" alt="屏幕快照 2018-09-16 上午11.30.03"></p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效地方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为”线程私有”的内存。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈所描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>经常有人把Java内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的”堆“笔者在后面会专门讲述，而所指的”栈“就是现在讲的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p><p>局部变量表存放了编译期可知的各种基本数据类型（boolean，byte，char，short，int，float，long，double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p><p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的在方法运行期间不会改变局部变量表的大小。</p><p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常：如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法(也就是字节码)的服务，而本地方法栈则为虚拟机使用到的Native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么”绝对“了。</p><p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做”GC堆“（Garbage Collected Heap）。从内存从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivior空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java堆中的上述各个区域的分配、回收等细节将是第3章的主题。</p><p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，即可以实现成固定大小的，也可以是可扩展，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却又一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p>对于习惯在HotSpot虚拟机上开发、部署程序的开发者来说，很多人都更愿意把方法区称为”永久代“（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存，能够省去专门为方法区编写内存管理代码的工作。</p><p><strong>原则上，如何实现方法区属于虚拟机实现细节，不受虚拟机规范约束，但使用永久代来实现方法区，现在看来不是一个好主意，因为这样更容易遇到内存溢出问题（永久代有-XX：MaxPermSize的上限，J9和JRockit只要没有触碰到进程可用内存的上限，例如32位系统中的4GB，就不会出现问题），而且有极少数方法（例如String.intern())会因这个原因导致不同虚拟机下有不同的表现。因此，对于HotSpot虚拟机，根据官方发布的路线图信息，现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了，在目前已经发布的JDK1.7的HotSpot中，已经把原本放在永久代的字符串常量池移出。</strong></p><p><em>Java 虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样”永久“存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说，这个区域的回收”成绩“比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是必要的。在Sun’公司的BUG列表中，曾出现过的若干个严重的BUG就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。</em></p><p><em>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</em></p><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。</p><p>在JDK1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>显然，在本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java虚拟机在执行Java程序的过程中，会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁、在第七版的Java SE中的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列一走进JVM</title>
    <link href="http://adamzeng.site/2018/09/15/JVM%E7%B3%BB%E5%88%97%E4%B8%80%E8%B5%B0%E8%BF%9BJVM/"/>
    <id>http://adamzeng.site/2018/09/15/JVM系列一走进JVM/</id>
    <published>2018-09-15T10:17:34.000Z</published>
    <updated>2018-09-21T23:49:57.182Z</updated>
    
    <content type="html"><![CDATA[<p>现代高性能的虚拟机雏形是Exact VM,因它使用准备式内存管理（Exact Memory Management，也可以叫Non-Conservative/Accurate Memory Management)而得名，即虚拟机可以知道内存中某个位置的数据具体是什么类型。譬如内存中有一个32位的整数123456，它到底是一个reference类型指向123456的内存地址还是一个数值为123456的整数，虚拟机将有能力分辨出来，这样才能在GC（垃圾收集）的时候准确判断堆上的数据是否还可能被使用。由于使用了准确式内存管理，Exact VM可以抛弃以前Classic VM基于handler的对象查找方式（原因是进行GC后对象将可能会被移动位置，如果将地址为123456的对象移动到654321，在没有明确信息表明内存中哪些数据是reference的前提下，虚拟机是不敢把内存中所有为123456的值改为654321的，所以要使用句柄来保持reference值的稳定），这样每次定位对象都少了一次间接查找的开销，提升执行性能。<a id="more"></a></p><p>虽然Exact VM的技术相对Classic VM来说先进了很多，但是在商业应用上只存在了很短暂的时间就被更为优秀的HotSpot VM所取代，甚至还没有来得及发布Windows和Linux平台下的商用版本。</p><h4 id="Sun-HotSpot-VM"><a href="#Sun-HotSpot-VM" class="headerlink" title="Sun HotSpot VM"></a>Sun HotSpot VM</h4><p>HotSpot VM既继承了Sun之前两款商用虚拟机的有点（如前面提到的准确式内存管理），也有许多自己新的技术优势，如它名称中的HotSpot指的就是它的热点代码探测技术（其实两个VM基本上是同时期的独立产品，HotSpot还稍早一些，HotSpot一开始就是准确式GC，而Exact VM中也有与HotSpot几乎一样的热点探测。）</p><p><strong>HotSpot VM的热点代码探测能力可以通过执行计数器找出最具有编译价值的代码，然后通知JIT编译器以方法为单位进行编译。如果一个方法被频繁调用，或者方法中有效循环次数很多，将会分别触发标准编译和OSR（栈上替换）编译动作。通过编译器与解释器恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无需等待本地代码输出才能执行程序，即时编译的时间压力也相对减小，这样有助于引入更多代码优化技术，输出质量更高的本地代码。</strong></p><h4 id="64位虚拟机"><a href="#64位虚拟机" class="headerlink" title="64位虚拟机"></a>64位虚拟机</h4><p>在几年之前，主流的CPU就开始支持64位架构了。</p><p>但是在Java EE方面，企业级应用经常需要使用超过4GB的内存，对于64位虚拟机的需求是非常迫切的，但由于上述原因，许多企业应用都仍然选择使用虚拟集群等方式继续在32位虚拟机中进行部署。Sun也注意到了这些问题，并做出了一些改善，提供了普通对象指针压缩功能（-XX:+UseCompressedOops，这个参数不建议显式设置，建议维持默认由虚拟机的Ergonomics机制自动开启），在执行代码时，动态植入压缩指令以节省内存消耗，但是开启压缩指针会增加执行代码数量，因为所有在Java堆里的、指向Java堆内对象的指针都会被压缩，这些指针的访问就需要更多的代码才可以实现，而且并不只是读写字段才受影响，在实例方法调用、子类型检查等操作中也受影响，因为对象实例指向对象类型的引用也被压缩了。随着硬件的进一步发展，计算机终究会完全过渡到64位的时代，这是一件毫无疑问的事情，主流的虚拟机应用也终究会从32位发展至64位，而虚拟机对64位的支持也将会进一步完善。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现代高性能的虚拟机雏形是Exact VM,因它使用准备式内存管理（Exact Memory Management，也可以叫Non-Conservative/Accurate Memory Management)而得名，即虚拟机可以知道内存中某个位置的数据具体是什么类型。譬如内存中有一个32位的整数123456，它到底是一个reference类型指向123456的内存地址还是一个数值为123456的整数，虚拟机将有能力分辨出来，这样才能在GC（垃圾收集）的时候准确判断堆上的数据是否还可能被使用。由于使用了准确式内存管理，Exact VM可以抛弃以前Classic VM基于handler的对象查找方式（原因是进行GC后对象将可能会被移动位置，如果将地址为123456的对象移动到654321，在没有明确信息表明内存中哪些数据是reference的前提下，虚拟机是不敢把内存中所有为123456的值改为654321的，所以要使用句柄来保持reference值的稳定），这样每次定位对象都少了一次间接查找的开销，提升执行性能。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java加载配置文件的三种方式</title>
    <link href="http://adamzeng.site/2018/09/14/java%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://adamzeng.site/2018/09/14/java加载配置文件的三种方式/</id>
    <published>2018-09-14T00:21:43.000Z</published>
    <updated>2018-09-14T00:42:50.423Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://images.cnitblog.com/i/562629/201406/150730416869009.jpg" alt="avatar"></p><p>比如我们要加载db.properties文件<a id="more"></a></p><p>通常情况下会有以下三种方式：</p><ul><li><p>使用文件io流</p></li><li><p>使用相对路径</p></li><li><p>如果我们要获取src（类包）下的db.properties</p></li></ul><p>  使用文件io流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 文件真实路径</span></div><div class="line">    String fileName = <span class="string">"E:/Workspace/SSHDemo/Source/db.properties"</span>;</div><div class="line">    Properties p = <span class="keyword">new</span> Properties();</div><div class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(fileName));</div><div class="line">    p.load(is);</div><div class="line">    System.out.println(p);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 相对路径</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Properties p = <span class="keyword">new</span> Properties();</div><div class="line">    <span class="comment">// InputStream is = ClassLoader.getSystemResourceAsStream("db.properties");</span></div><div class="line">    </div><div class="line">    InputStream is = Thread.currentTread().getContextClassLoader().getSystemResourceAsStream(<span class="string">"db.properties"</span>);</div><div class="line">    p.load(is);</div><div class="line">    System.out.println(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Properties p = <span class="keyword">new</span> Properties();</div><div class="line">    </div><div class="line">    InputStream is = SourceLoader.class.getClassLoader().getSystemResourceAsStream(<span class="string">"db.properties"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果我们要获取src（类包）下的db.properties又该怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//相对于类路径  properties文件盒java放在一起</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        Properties p=<span class="keyword">new</span> Properties();</div><div class="line">        <span class="comment">//InputStream is=ClassLoader.getSystemResourceAsStream("db.properties");</span></div><div class="line">        InputStream is=SourceLoader.class.getResourceAsStream(<span class="string">"db.properties"</span>);</div><div class="line">        p.load(is);</div><div class="line">        System.out.println(p);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>三种方法都打印出db.properties文件中的信息</p><p><img src="http://images.cnitblog.com/i/562629/201406/150735374523200.jpg" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images.cnitblog.com/i/562629/201406/150730416869009.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如我们要加载db.properties文件
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>primary-function-and-features-of-a-router</title>
    <link href="http://adamzeng.site/2018/09/13/primary-function-and-features-of-a-router/"/>
    <id>http://adamzeng.site/2018/09/13/primary-function-and-features-of-a-router/</id>
    <published>2018-09-13T10:34:35.000Z</published>
    <updated>2018-09-16T06:59:22.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Router到底有什么用？"><a href="#Router到底有什么用？" class="headerlink" title="Router到底有什么用？"></a>Router到底有什么用？</h4><p>Ethernet switches function at the data link layer, Layer 2, and are used to forward Ethernet frames between devices within the same network.<a id="more"></a></p><p>通常switch工作在数据链路层，第二层，并且通常是用于传输以太帧在同一个网络的不同设备之间。</p><p>However, when the source IP and destination IP addresses are on different networks, the Ethernet frame must be sent to a router.</p><p>然而，当起始IP与终点IP在不同的network当中的时候，以太帧必须要被送到router中去。</p><p>A router connects one network to another network. The router is responsible for the delivery of packets across different networks. The destination of the IP packet might be a web server in another country or an email server on the local area network.</p><p>一个路由将一个网络与另一个网络连接起来。路由负责包在不同的network中传递，IP packet的终点可能是一个在另一个国家的网络服务器或者是在本地区的邮件服务器。</p><p>The router uses its routing table to determine the best path to use to forward a packet. It is the responsibility of the routers to deliver those packets in a timely manner. The effectiveness of internetwork communications depends, to a large degree, on the ability of routers to forward packets in the most efficient way possible.</p><p>Router使用它的路由表来决定使用最好的路径来传输一个packet。这是路由的责任及时地来发送这些packet。有效的互联网沟通很大程度上取决于router以最有效的方式来传递packets的能力。</p><p>When a host sends a packet to a device on a different IP network, the packet is forwarded to the default gateway because a host device cannot communicate directly with devices outside of the local network. The default gateway is the destination that routes traffic from the local network to devices on remote networks. It is often used to connect a local network to the Internet.</p><p>当一个host发送一个packet到一个不同的IP network中的设备，packet被发送到default gateway因为一个host设备不能直接与外面的本地网络之间进行沟通。default gateway是目的地从本地network路由到remote的networks。通常用来连接本地网络到Internet。</p><h4 id="Routers-are-computers（router本身也是电脑）"><a href="#Routers-are-computers（router本身也是电脑）" class="headerlink" title="Routers are computers（router本身也是电脑）"></a>Routers are computers（router本身也是电脑）</h4><ul><li>central processing unit(CPU)</li><li>operating system(OS)</li><li>Memory and storage(RAM,ROM,NVRAM,Flash,hard drive)</li></ul><h5 id="阐述volatile与non-volatile的区别"><a href="#阐述volatile与non-volatile的区别" class="headerlink" title="阐述volatile与non-volatile的区别"></a>阐述volatile与non-volatile的区别</h5><p>Router memory is classified as volatile or non-volatile. Volatile memory loses its content when the power is turned off, while non-volatile memory does not lose its content when the power is turned off.</p><p><img src="/Users/adamzeng/Desktop/屏幕快照 2018-09-13 下午9.12.10.png" alt="屏幕快照 2018-09-13 下午9.12.10"></p><p><img src="/Users/adamzeng/Desktop/屏幕快照 2018-09-13 下午9.11.31.png" alt="屏幕快照 2018-09-13 下午9.11.31"></p><p><strong>NVRAM</strong>提供startup configuration file的存储</p><p><strong>Flash</strong>提供IOS与system-ralated file的存储</p><h4 id="The-Router-Connection"><a href="#The-Router-Connection" class="headerlink" title="The Router Connection"></a>The Router Connection</h4><p>A router connects multiple networks, which means that it has multiple interfaces that each belong to a different IP network. When a router receives an IP packet on one interface, it determines which interface to use to forward the packet to the destination.</p><p>当一个router收到IP packet在某一个interface的时候，它会决定使用哪一个interface来传输packet到目的地。</p><h4 id="Routers-选择最好的路径"><a href="#Routers-选择最好的路径" class="headerlink" title="Routers 选择最好的路径"></a>Routers 选择最好的路径</h4><p>When the router receives a packet, it examines the destination address of the packet and uses the routing table to search for the best path to that network.</p><p>The routing table also includes the interface to be used to forward packets for each known network. </p><p>routing table同样也包含interface被用于对于每一个已知网络传输packets。</p><p>When a match is found, the router encapsulates the packet into the data link frame of the outgoing or exit interface, and the packet is forwarded toward its destination.</p><p>当匹配上之后，router把packet封装成出口interface的数据链路帧，并且packet被发送往它的目的地。</p><p>It is possible for a router to receive a packet that is encapsulated in one type of data link frame, and to forward the packet out of an interface that uses a different type of data link frame. </p><p>很有可能router收到某一种packet以一种数据链路帧的形式封装并以另一种数据链路帧的形式将包发送出去。</p><p>The data link encapsulation depends on the type of interface on the router and the type of medium to which it connects. </p><p>不同的数据链路封装取决于在router上的interface的类型与与之相连的介质类型。</p><p>router R1 receives the packet encapsulated in an Ethernet frame. After de-encapsulating the packet, R1 uses the destination IP address of the packet to search its routing table for a matching network address. After a destination network address is found in the routing table, R1 encapsulates the packet inside a PPP frame and forwards the packet to R2. A similar process is performed by R2.</p><p>R1收到以Ethernet frame形式封装的packet。R1使用packet的目的地IP address来搜寻它自己的routing table 来寻找一个相匹配的network address。在找到之后，R1将packet封装入一个PPP帧中并且将包传递出去给R2。</p><p><img src="/Users/adamzeng/Desktop/屏幕快照 2018-09-13 下午11.01.39.png" alt="屏幕快照 2018-09-13 下午11.01.39"></p><ul><li><strong>Default gateway</strong> - Identifies the IP address of the router to send a packet to when the destination is not on the same local network subnet.</li></ul><p>The default gateway is usually the address of the interface on the router connected to the local network. The router maintains routing table entries of all connected networks as well as entries of remote networks, and determines the best path to reach those destinations.</p><p>####Configure an IPv4 Loopback Interface</p><p>Another common configuration of Cisco IOS routers is enabling a loopback interface.</p><p>The loopback interface is a logical interface internal to the router.</p><p>这意味着loopback interface仅存在于逻辑上的router内部。</p><p> It is not assigned to a physical port and can therefore never be connected to any other device. It is considered a software interface that is automatically placed in an “up” state, as long as the router is functioning.</p><p>这个通常不会分配给一个物理端口并且因此绝不会与任何其他装置相连。它被认为是一个软件接口被自动设置为up状态，只要router在工作状态。</p><p>The loopback interface is useful in testing and managing a Cisco IOS device because it ensures that at least one interface will always be available. For example, it can be used for testing purposes, such as testing internal routing processes, by emulating networks behind the router.</p><p>loopback interface对于测试和管理一个Cisco IOS 设备很有用因为它确保至少一个interface将会一直available。举一个例子，它能够被使用于测试目的。</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fv9ynslg52j311k0dgabt.jpg" alt="屏幕快照 2018-09-15 上午10.44.37"></p><p>####Verify Interface Settings</p><ul><li><strong>show ip interface brief</strong> - Displays a summary for all interfaces including the IPv4 address of the interface and current operational status.</li><li><strong>show ip route</strong> - Displays the contents of the IPv4 routing table stored in RAM. In Cisco IOS 15, active interfaces should appear in the routing table with two related entries identified by the code ‘<strong>C</strong>’ (Connected) or ‘<strong>L</strong>’ (Local). In previous IOS versions, only a single entry with the code ‘<strong>C</strong>’ will appear.</li><li><strong>show running-config interface</strong> <em>interface-id</em> - Displays the commands configured on the specified interface.</li></ul><p>####Verify IPv6 Interface Settings</p><p>The commands to verify the IPv6 interface configuration are similar to the commands used for IPv4.</p><p>通常情况下是相同的</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fv9ymq3rffj311o0gimzi.jpg" alt="屏幕快照 2018-09-15 上午10.54.24"></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv9ylyvmz9j311q0gmjtr.jpg" alt="屏幕快照 2018-09-15 上午11.02.25">The output displays two configured IPv6 addresses per interface. One address is the IPv6 global unicast address that was manually entered. The other address, which begins with FE80, is the link-local unicast address for the interface. A link-local address is automatically added to an interface whenever a global unicast address is assigned. An IPv6 network interface is required to have a link-local address, but not necessarily a global unicast address.</p><p>通常输出会显示两个设置好的IPV6 的地址在每个interface上。一个地址是IPv6 global unicast address是人为输入的。另一个地址开头是FE80，是给interface的link-local unicast address。link-local address会被自动添加给一个interface无论何时一个global unicast address被分配。一个IPv6网络interface被要求有一个link-local address，但不一定需要一个global unicast address。</p><p>The <strong>show ipv6 route</strong> command shown in Figure 3 can be used to verify that IPv6 networks and specific IPv6 interface addresses have been installed in the IPv6 routing table. The <strong>show ipv6 route</strong> command will only display IPv6 networks, not IPv4 networks.</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv9ymf1r0oj31200gwdj8.jpg" alt="屏幕快照 2018-09-15 上午11.09.21"></p><p>这个命令能够被用于验证IPv6网络并且确认IPv6的interface address已经被安装到IPv6 routing table中去了。</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fv9yorxoroj316e0ui7ki.jpg" alt="屏幕快照 2018-09-15 上午11.20.31"></p><p>A primary function of a router is to forward packets toward their destination. This is accomplished by using a switching function, which is the process used by a router to accept a packet on one interface and forward it out of another interface. A key responsibility of the switching function is to encapsulate packets in the appropriate data link frame type for the outgoing data link.</p><p>一个主要的router的功能是发送packet到目的地。这个通过使用一个switching功能来完成，这是一个过程被一个router使用来接收一个packet在一个interface并且发送它到另一个interface。一个关键的职责关于switching 职责是封装packet进入合适的数据链路帧类型对应出口data link。</p><p>As shown in the figure, devices have Layer 3 IPv4 addresses and Ethernet interfaces have Layer 2 data link addresses. For example, PC1 is configured with IPv4 address 192.168.1.10 and an example MAC address of 0A-10. As a packet travels from the source device to the final destination device, the Layer 3 IP addresses do not change. This is because the Layer 3 PDU does not change. However, the Layer 2 data link addresses change at every hop as the packet is de-encapsulated and re-encapsulated in a new Layer 2 frame by each router.</p><p>router负责将packet封装进入不同类型的数据链路帧，每一个router都是这样工作。</p><p>It is common for packets to require encapsulation into a different type of Layer 2 frame than the one which was received. For example, a router might receive an Ethernet encapsulated frame on a FastEthernet interface, and then process that frame to be forwarded out of a serial interface.</p><p>很常见通过讲一个layer2 frame类型是Ethernet 转换为一个适合serial interface的frame类型。</p><p>Notice in the figure that the ports between R2 and R3 do not have associated MAC addresses. This is because this is a serial link. MAC addresses are only required on multi-access networks, such as Ethernet. A serial link is a point-to-point connection and uses a different Layer 2 frame that does not require the use of a MAC address. In this example, when Ethernet frames are received on R2 from the Fa0/0 interface, destined for PC2, it is de-encapsulated and then re-encapsulated for the serial interface, such as a Point-to-Point Protocol (PPP) encapsulated frame. When R3 receives the PPP frame, it is de-encapsulated again and then re-encapsulated into an Ethernet frame with a destination MAC address of 0B-20, prior to being forwarded out the Fa0/0 interface.</p><p>对于Serial link而言，不需要MAC地址，只有到Ethernet连接的时候才会把destination MAC address封装进Frame中。</p><p>If the destination network address is the same network as PC1, then PC1 does not use the default gateway. Instead, PC1 refers to its ARP cache for the MAC address of the device with that destination IPv4 address. If the MAC address is not in the cache, then PC1 generates an ARP request to acquire the address to complete the packet and send it to the destination. If the destination network address is on a different network, then PC1 forwards the packet to its default gateway.</p><p>如果目的地网络地址与PC1在相同的地址，PC1就不适用default gateway。而是PC1会参考它的ARP cache使用那个destination IPv4地址。如果MAC地址不在cache当中，PC1就会产生一个ARP请求来获得地址产生一个packet包并且将它发送到目的地，如果destination network是在不同的网络中，PC1发送packet到default gateway。</p><p>If an ARP entry does not exist in the ARP table for the default gateway, PC1 sends an ARP request. Router R1 sends back an ARP reply. PC1 can then forward the packet to the MAC address of the default gateway, the Fa0/0 interface of router R1.</p><p>如果ARP entry不在ARP table对于default gateway当中。PC1发送一个ARP 请求。Router R1发送回一个ARP reply。PC1能够发送packet到MAC address of default gateway。</p><p>####Administrative Distance</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fva0mqydgdj311e0eeq4r.jpg" alt="屏幕快照 2018-09-15 下午12.28.12"></p><h4 id="static-route"><a href="#static-route" class="headerlink" title="static route"></a>static route</h4><p>A default static route is useful when a router has only one exit point to another router,such as when the router connects to a central router or service provider.</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvbe1fd7s0j314a0fqgp3.jpg" alt="屏幕快照 2018-09-16 下午4.57.00"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvbe1r68qmj311k0d8mzk.jpg" alt="屏幕快照 2018-09-16 下午4.57.00"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvbe2sgyrtj311e0d6419.jpg" alt="屏幕快照 2018-09-16 下午4.59.01"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Router到底有什么用？&quot;&gt;&lt;a href=&quot;#Router到底有什么用？&quot; class=&quot;headerlink&quot; title=&quot;Router到底有什么用？&quot;&gt;&lt;/a&gt;Router到底有什么用？&lt;/h4&gt;&lt;p&gt;Ethernet switches function at the data link layer, Layer 2, and are used to forward Ethernet frames between devices within the same network.
    
    </summary>
    
      <category term="network" scheme="http://adamzeng.site/categories/network/"/>
    
    
      <category term="network" scheme="http://adamzeng.site/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>二叉查找树</title>
    <link href="http://adamzeng.site/2018/08/27/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>http://adamzeng.site/2018/08/27/二叉查找树/</id>
    <published>2018-08-27T12:32:46.000Z</published>
    <updated>2018-08-30T13:49:46.664Z</updated>
    
    <content type="html"><![CDATA[<p>树（tree）提供了一种层次组织结构，数据可以存储在树中的每个结点内。</p><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><ul><li>二叉查找树可以用链接结构实现。<a id="more"></a></li></ul><p>线性表、栈和队列都是由一系列元素构成的线性结构。二叉树（binary tree）是一种层次结构，它要么是空集，要么是由一个称为根（root）的元素和两颗不同的二叉树组成的，这两颗二叉树分别称为左子树（left subtree）和右子树（right subtree）。允许这两颗子树中的一颗或者两颗为空。二叉树示例如图所示。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-27%20%E4%B8%8B%E5%8D%8811.20.28.png" alt="avatar"></p><p>一条路径的长度（length）是指在该条路径上的边的个数。一个结点的深度（depth）是指从根结点到该结点的路径长度。有时候，我们将一棵树中具有某个给定深度的所有结点的集合称为该树的层（level）。兄弟结点（sibling）是共享同一父结点的结点。一个结点的左（右）子树的根结点称为这个结点的左（右）子结点（left（right）child）。没有子结点的结点称为叶结点（leaf）。非空树的高度为从根结点到最远的叶结点的路径长度。只有一个结点的树高度为0。习惯上，将空树的高度定为-1。考虑上图a中的树，从结点60到45的路径的长度为2。结点60的深度为0，结点55的深度为1，而结点45的深度为2。这颗树的高度为2。结点45和57是兄弟结点。结点45、57、67和107位于同一层。</p><p>一种称为二叉树（binary search tree， BST）的特殊类型的二叉树非常有用。二叉查找树（没有重复元素）的特征是：对于树中的每一个结点，它的左子树中结点都小于该结点的值，而它的右子树中结点的值都大于该结点的值。</p><h4 id="表示二叉查找树"><a href="#表示二叉查找树" class="headerlink" title="表示二叉查找树"></a>表示二叉查找树</h4><p>可以使用一个链式结点的集合来表示二叉树。每个结点都包含一个数值和两个称为left和right的链接，分别指向左孩子和右孩子，</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-27%20%E4%B8%8B%E5%8D%8811.47.06.png" alt="avatar"></p><p>结点可以定义为一个类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> E element;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; left;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; right;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        element = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>变量root指向树的根结点。如果树为空，那么root的值为null。下面的代码创建了如上图所示的树的前三个结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the root node</span></div><div class="line">TreeNode&lt;Integer&gt; root = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">60</span>);</div><div class="line"></div><div class="line"><span class="comment">// Create the left child node</span></div><div class="line">root.left = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">55</span>);</div><div class="line"></div><div class="line"><span class="comment">// Create the right child node</span></div><div class="line">root.right = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">100</span>);</div></pre></td></tr></table></figure><h4 id="查找一个元素"><a href="#查找一个元素" class="headerlink" title="查找一个元素"></a>查找一个元素</h4><p>要在二叉查找树中查找一个元素，可从根结点开始向下扫描，直到找到一个匹配元素，或者达到一颗空子树为止。该算法在下面的程序中。让current指向根结点，重复下面的步骤直到current为null或者元素匹配current.element。</p><ul><li>如果element小于current.element，就将current.left赋给current。</li><li>如果element大于current.element，就将current.right赋给current。</li><li>如果element等于current.element，就返回true。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">    TreeNode&lt;E&gt; current =root; <span class="comment">// Start from the root</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(element &lt;current.element) &#123;</div><div class="line">            current = current.left; <span class="comment">// Go left</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; current.element) &#123;</div><div class="line">            current = current.right; <span class="comment">// Go right</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Element matches current.element</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="在BST中插入一个元素"><a href="#在BST中插入一个元素" class="headerlink" title="在BST中插入一个元素"></a>在BST中插入一个元素</h4><p>为了在BST中插入一个元素，需要确定在树中插入元素的位置。关键思路是确定新结点的父结点所在的位置。下面程序清单给出该算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(tree is empty) &#123;</div><div class="line">        <span class="comment">// Create the node for e as the root</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Locate the parent node</span></div><div class="line">        parent = current = node;</div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(e &lt; the value in current.element) &#123;</div><div class="line">                parent = current; <span class="comment">// Keep the parent</span></div><div class="line">                current = current.left; <span class="comment">// Go left</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e &gt; the value in current.element) &#123;</div><div class="line">                parent = current; <span class="comment">// Keep the parent</span></div><div class="line">                current = current.right; <span class="comment">// Go right</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Duplicate node not inserted</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Create a new node for e and attach it to parent</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element inserted</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果这棵树是空的，就使用新元素创建一个根结点；否则，寻找新元素结点的父结点的位置。为该元素创建一个新结点，然后将该结点链接到它的父结点上。如果新元素的值小于父元素的值，则将新元素的结点设置为父结点的左子结点；如果新元素的值大于父元素的值，则将新元素的结点设置为父结点的右子结点。</p><p>例如，要将数据101插入下图所示的树中，在算法中的while循环结束之后，parent指向存储107的结点，如图a所示。存储数据101的新结点将成为父结点的左子结点。要将数据59插入树中，在算法中的while循环结束之后，父结点指向数据57的结点，如图b所示。存储数据59的新结点成为父结点的右子结点。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.06.17.png" alt="avatar"></p><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><p>树的遍历（tree traversal）就是访问树中每个结点一次且只有一次的过程。遍历树的方法有很多种。中序（inorder）、前序（preorder）、后序（postorder）、深度优先（depth-first)和广度优先（breadth-first）等遍历方法。</p><p>中序遍历（inorder traversal）法，首先递归地访问当前结点的左子树，然后访问当前结点，最后递归地访问该结点的右子树。中序遍历法以递增顺序显示BST中的所有结点。</p><p>后序遍历（postorder traversal）法，首先递归地访问当前结点的左子树，然后递归地访问该结点的右子树，最后访问该结点本身。后序遍历的一个应用就是找出一个文件系统中目录的个数。如下图所示，每个目录都是一个内部结点，而每个文件都是叶结点。可以使用后序遍历法，在找出根目录的大小之前得到每个文件和子目录的大小。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.14.44.png" alt="avatar"></p><p>前序遍历（preorder traversal）法，首先访问当前结点，然后递归地访问该结点的左子树，最后递归地访问该结点的右子树。深度优先遍历法与前序遍历法相同。前序遍历的一个应用就是打印一个结构性文档。如下图所示，可以使用前序遍历法打印本书的目录。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.14.55.png" alt="avatar"></p><ul><li>可以采用前序插入元素的方法来重构一颗二叉查找树。重构的树为原始的二叉查找树保留了父结点和子结点的关系。</li></ul><p>广度优先遍历法逐层访问树中的结点。首先访问根结点，然后从左往右访问根结点的所有子结点，再从左往右访问根结点的所有孙子结点，以此类推。</p><p>例如，对于往上两个图中的树，它中序遍历为</p><p>45 55 57 59 60 67 100 101 107</p><p>它的后序遍历为</p><p>45 59 57 55 67 101 107 100 60</p><p>它的前序遍历为</p><p>60 55 45 57 59 100 67 107 101</p><p>它的广度优先遍历为</p><p>60 55 100 45 57 67 107 59 101</p><p>可以使用下面的树来帮助记忆中序、后序以及前序：</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8B%E5%8D%8812.09.51.png" alt="avatar"></p><p>中序是1+2，后序是1 2+，前序是+1 2。</p><h4 id="BST类"><a href="#BST类" class="headerlink" title="BST类"></a>BST类</h4><p>我们遵循Java合集框架API的设计模式，使用一个名为Tree的接口来定义树的所有常用操作，并提供名为AbstractTree的抽象类，该抽象类部分地实现了Tree，如下图所示。继承AbstractTree定义一个具体的BST类。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8B%E5%8D%8812.13.48.png" alt="avatar"></p><p>BST.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">AbstractTree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; root;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a default binary search tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a binary search tree from an array of objects</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(E[] objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</div><div class="line">            insert(objects[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Return true if the element is in the tree */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        TreeNode&lt;E&gt; current = root; <span class="comment">// Start from the root</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// element matches current.element</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element is found</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Insert element e into the binary search tree.</span></div><div class="line">     * Return true if the element is inserted successfully */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            root = createNewNode(e); <span class="comment">// Create a new root</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Locate the parent node</span></div><div class="line">            TreeNode&lt;E&gt; parent = <span class="keyword">null</span>;</div><div class="line">            TreeNode&lt;E&gt; current = root;</div><div class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    parent = current;</div><div class="line">                    current = current.left;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    parent = current;</div><div class="line">                    current = current.right;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Duplicated node not inserted</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create the new node and attach it to the parent node</span></div><div class="line">            <span class="keyword">if</span> (e.compareTo(parent.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                parent.right = createNewNode(e);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(parent.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                parent.left = createNewNode(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element insert successfully</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> TreeNode&lt;E&gt; <span class="title">createNewNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Inorder traversal from the root */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        inorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        inorder(root.left);</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">        inorder(root.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Postorder traversal from the root */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        postorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">        postorder(root.left);</div><div class="line">        postorder(root.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        preorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        preorder(root.left);</div><div class="line">        preorder(root.right);</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This inner class is static, because it does not access</div><div class="line">     * any instance members defined in its outer class</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line">        <span class="keyword">protected</span> E element;</div><div class="line">        <span class="keyword">protected</span> TreeNode&lt;E&gt; left;</div><div class="line">        <span class="keyword">protected</span> TreeNode&lt;E&gt; right;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            element = e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Get the number of nodes in the tree */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the root of the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode&lt;E&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a path from the root leading to the specified element</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> java.util.ArrayList&lt;TreeNode&lt;E&gt;&gt; path(E e) &#123;</div><div class="line">        java.util.ArrayList&lt;TreeNode&lt;E&gt;&gt; list = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        TreeNode&lt;E&gt; current = root; <span class="comment">// Start from the root</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            list.add(current); <span class="comment">// Add the node to the list</span></div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> list; <span class="comment">// Return an array list of nodes</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete an element from the binary search tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     * Return false if the element is not in the tree.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="comment">// Locate the node to be deleted and also locate its parent node</span></div><div class="line">        TreeNode&lt;E&gt; parent = <span class="keyword">null</span>;</div><div class="line">        TreeNode&lt;E&gt; current = root;</div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                parent = current;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                parent = current;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// Element is in the tree pointed at by current</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Case 1: current has no left child</span></div><div class="line">        <span class="keyword">if</span> (current.left == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Connect the parent with the right child of the current node</span></div><div class="line">            <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</div><div class="line">                root = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.compareTo(parent.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    parent.left = current.right;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    parent.right = current.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Case 2: The current node has a left child.</span></div><div class="line">            <span class="comment">// Locate the rightmost node in the left subtree of</span></div><div class="line">            <span class="comment">// the current node and also its parent.</span></div><div class="line">            TreeNode&lt;E&gt; parentOfRightMost = current;</div><div class="line">            TreeNode&lt;E&gt; rightMost = current.left;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (rightMost.right != <span class="keyword">null</span>) &#123;</div><div class="line">                parentOfRightMost = rightMost;</div><div class="line">                rightMost = rightMost.right; <span class="comment">// Keep going to the right</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Replace the element in current by the element in rightMost</span></div><div class="line">            current.element = rightMost.element;</div><div class="line"></div><div class="line">            <span class="comment">// Eliminate rightmost node</span></div><div class="line">            <span class="keyword">if</span> (parentOfRightMost.right == rightMost) &#123;</div><div class="line">                parentOfRightMost.right = rightMost.left;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Special case: parentOfRightMost == current</span></div><div class="line">                parentOfRightMost.left = rightMost.left;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size--;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element deleted successfully</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Obtain an iterator. Use inorder. */</span></div><div class="line">    <span class="keyword">public</span> java.util.<span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InorderIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Inner class InorderIterator</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InorderIterator</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// Store the elements in a list</span></div><div class="line">        <span class="keyword">private</span> java.util.ArrayList&lt;E&gt; list =</div><div class="line">                <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">0</span>; <span class="comment">// Point to the current element in list</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InorderIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            inorder(); <span class="comment">// Traverse binary tree and store elements in list</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Inorder traversal from the root</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span> </span>&#123;</div><div class="line">            inorder(root);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Inorder traversal from a subtree</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">            inorder(root.left);</div><div class="line">            list.add(root.element);</div><div class="line">            inorder(root.right);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** More elements for traversing? */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (current &lt; list.size()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** Get the current element and move to the next */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> list.get(current++);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** Remove the current element */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException</div><div class="line">                    (<span class="string">"Removing an element from the iterator is not supported"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove all elements from the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        root = <span class="keyword">null</span>;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Tree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the element is in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Insert element e into the binary search tree.</div><div class="line">     * Return true if the element is inserted successfully.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete the specified element from the tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the tree is empty</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AbstractTree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the element is in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Insert element e into the binary search tree.</div><div class="line">     * Return true if the element is inserted successfully.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete the specified element from the tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the tree is empty</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树（tree）提供了一种层次组织结构，数据可以存储在树中的每个结点内。&lt;/p&gt;
&lt;h4 id=&quot;二叉查找树&quot;&gt;&lt;a href=&quot;#二叉查找树&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树&quot;&gt;&lt;/a&gt;二叉查找树&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;二叉查找树可以用链接结构实现。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>heap堆排序</title>
    <link href="http://adamzeng.site/2018/08/26/heap%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://adamzeng.site/2018/08/26/heap堆排序/</id>
    <published>2018-08-26T12:27:38.000Z</published>
    <updated>2018-08-26T13:17:03.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对于堆排序"><a href="#对于堆排序" class="headerlink" title="对于堆排序"></a>对于堆排序</h2><p>首先堆排序的一些要点是，首先堆排序本身是使用二叉堆，而二叉堆本身是一个非常有意思的东西，首先它是一个完全二叉树，而二叉堆（binary heap）则是一颗具有以下属性的二叉树：<a id="more"></a></p><ol><li>形状属性：它是一颗完全二叉树。</li><li>堆属性：每个结点大于或等于它的任意一个孩子。</li></ol><p>完全二叉树：如果一颗二叉树的每一层都是满的，或者最后一层可以不填满并且最后一层的叶子都是靠左放置的，那么这颗二叉树就是完全的（complete）。例如，在下图中，</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.39.21.png" alt="avatar"></p><h4 id="堆的存储"><a href="#堆的存储" class="headerlink" title="堆的存储"></a>堆的存储</h4><p>如果堆的大小是事先知道的，那么可以将堆存储在一个ArrayList中或一个数组中。下图</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.47.42.png" alt="avatar"></p><p>中的堆使用右边的数组来存储。树根在位置0处，它的两个子结点在位置1和位置2处。对于位置i处的结点，它的左子结点在位置2i+1，它的右子结点在位置2i+2处，而它的父结点在位置（i-2)/2处。例如，元素39的结点在位置4处，因此，它的左子结点（元素14）在位置9处（2<em>4+1），它的右子结点（元素33）在位置10处（2 </em> 4 +2），而它的父结点（元素42）在位置1处((4-1)/2)。</p><h4 id="添加一个新的结点"><a href="#添加一个新的结点" class="headerlink" title="添加一个新的结点"></a>添加一个新的结点</h4><p>为了给堆添加一个新结点，首先将它添加到堆的末尾，然后按如下方式重建这棵树：</p><p><em>将最后一个结点作为当前结点；</em></p><p><em>while（当前结点大于它的父结点）{</em></p><p><em>将当前结点和它的父结点交换；</em></p><p><em>现在当前结点往上面进了一个层次</em></p><p><em>}</em></p><p>假设这个堆被初始化为空的。在以3、5、1、19、11和22的顺序添加数字之后，这个堆如下图所示</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.58.13.png" alt="avatar"></p><p>现在考虑向堆中添加数字88。将新结点88放在树的末尾，如上图所示，互换88和19。互换88和22。</p><h4 id="删除根结点"><a href="#删除根结点" class="headerlink" title="删除根结点"></a>删除根结点</h4><p>经常需要从堆中删除最大的元素，也就是这个堆中的根结点。在删除根结点之后，就必须重建这棵树以保持堆的属性。重建该树的算法如下所示：</p><p><em>用最后一个结点替换根结点</em></p><p><em>让根结点成为当前结点；</em></p><p><em>while（当前结点具有子结点并且当前结点小于它的子结点）{</em></p><p><em>将当前结点和它的较大子结点交换；</em></p><p><em>现在当前结点往下面退了一个层次；</em></p><p><em>}</em></p><p>下图给出了从上图中删除根结点62之后重建堆的过程。将最后的结点9移到根结点处，如图所示。</p><p>互换9和59，互换9和44，互换9和30。</p><p>再往下给出了删除从之前删除根结点59之后重建堆的过程。将最后的结点17移到根结点出，互换17和44，互换17和30。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8811.05.31.png" alt="avatar"></p><h4 id="实现heap类"><a href="#实现heap类" class="headerlink" title="实现heap类"></a>实现heap类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> java.util.ArrayList&lt;E&gt; list = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a default heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a heap from an array of objects</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(E[] objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</div><div class="line">            list.add(objects[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Add a new object into the heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E newObject)</span> </span>&#123;</div><div class="line">        list.add(newObject); <span class="comment">// Append to the heap</span></div><div class="line">        <span class="keyword">int</span> currentIndex = list.size() - <span class="number">1</span>; <span class="comment">// The index of the last node</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (currentIndex &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> parentIndex = (currentIndex - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            <span class="comment">// Swap if the current object is greater than its parent</span></div><div class="line">            <span class="keyword">if</span> (list.get(currentIndex).compareTo(</div><div class="line">                    list.get(parentIndex)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                E temp = list.get(currentIndex);</div><div class="line">                list.set(currentIndex, list.get(parentIndex));</div><div class="line">                list.set(parentIndex, temp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// The tree is a heap now</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            currentIndex = parentIndex;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove the root from the heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        E removeObject = list.get(<span class="number">0</span>);</div><div class="line">        list.set(<span class="number">0</span>, list.get(list.size() - <span class="number">1</span>));</div><div class="line">        list.remove(list.size() - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (currentIndex &lt; list.size()) &#123;</div><div class="line">            <span class="keyword">int</span> leftChildIndex = <span class="number">2</span> * currentIndex + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> rightChildIndex = <span class="number">2</span> * currentIndex + <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Find the maximum between two child</span></div><div class="line">            <span class="keyword">if</span> (leftChildIndex &gt;= list.size()) <span class="keyword">break</span>; <span class="comment">// The tree is a heap</span></div><div class="line">            <span class="keyword">int</span> maxIndex = leftChildIndex;</div><div class="line">            <span class="keyword">if</span> (rightChildIndex &lt; list.size()) &#123;</div><div class="line">                <span class="keyword">if</span> (list.get(maxIndex).compareTo(</div><div class="line">                        list.get(rightChildIndex)) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    maxIndex = rightChildIndex;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Swap if the current node is less than the maximum</span></div><div class="line">            <span class="keyword">if</span> (list.get(currentIndex).compareTo(</div><div class="line">                    list.get(maxIndex)) &lt; <span class="number">0</span>) &#123;</div><div class="line">                E temp = list.get(maxIndex);</div><div class="line">                list.set(maxIndex, list.get(currentIndex));</div><div class="line">                list.set(currentIndex, temp);</div><div class="line">                currentIndex = maxIndex;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// The tree is a heap</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> removeObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>堆在内部是使用数组线性表来表示的（第2行）。可以将它改为其他的数据结构，但是Heap类的合约保持不变。</p><p>方法add（E newObject）（第15~30行）将一个对象追加到树中，如果该对象大于它的父结点，就互换它们，此过程持续到该新对象成为根结点，或者新对象不大于它的父结点。</p><p>方法remove（）删除并返回根结点。为保持堆的特征，该方法将最后的对象移到根结点处，如果该对象小于它的较大的子结点，就互换它们。此过程持续到最后一个对象称为叶子结点，或者改对象不小于它的子结点。</p><h4 id="使用Heap类进行排序"><a href="#使用Heap类进行排序" class="headerlink" title="使用Heap类进行排序"></a>使用Heap类进行排序</h4><p>要使用堆对数组排序，应首先使用Heap类创建一个对象，使用add方法将所有元素添加到堆中，然后使用remove方法从堆中删除所有元素。以降序删除这些元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Heap sort method</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(E[] list)</span> </span>&#123;</div><div class="line">        <span class="comment">// Create a Heap of integers</span></div><div class="line">        Heap&lt;E&gt; heap = <span class="keyword">new</span> Heap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Add elements to the heap</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">            heap.add(list[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Remove elements from the heap</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            list[i] = heap.remove();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A test method</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer[] list = &#123;-<span class="number">44</span>, -<span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">53</span>&#125;;</div><div class="line">        heapSort(list);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">            System.out.print(list[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对于堆排序&quot;&gt;&lt;a href=&quot;#对于堆排序&quot; class=&quot;headerlink&quot; title=&quot;对于堆排序&quot;&gt;&lt;/a&gt;对于堆排序&lt;/h2&gt;&lt;p&gt;首先堆排序的一些要点是，首先堆排序本身是使用二叉堆，而二叉堆本身是一个非常有意思的东西，首先它是一个完全二叉树，而二叉堆（binary heap）则是一颗具有以下属性的二叉树：
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>pgsql的总结</title>
    <link href="http://adamzeng.site/2018/08/16/pgsql%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://adamzeng.site/2018/08/16/pgsql的总结/</id>
    <published>2018-08-16T07:48:16.000Z</published>
    <updated>2018-08-17T04:41:12.277Z</updated>
    
    <content type="html"><![CDATA[<p>pgsql我最近所发现的一些重要的query方式，<a id="more"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column_name(s)</div><div class="line"><span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">LIMIT</span> <span class="built_in">number</span>;</div></pre></td></tr></table></figure><p>这个sql语句能够用来兼容Mysql与Pgsql。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> table_name;</div></pre></td></tr></table></figure><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-17%20%E4%B8%8B%E5%8D%881.57.17.png"></p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-17%20%E4%B8%8B%E5%8D%881.57.09.png"></p><p>关于nasa2这一组表的一个无法用natural join完成join操作的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ass1.astroNo <span class="keyword">as</span> Commander, ass2.astroNo <span class="keyword">as</span> Pilot, ass1.MissionNo </div><div class="line"><span class="keyword">from</span> NASA2_Assigned ass1, NASA2_Assigned ass2</div><div class="line"><span class="keyword">where</span> ass1.projectName = <span class="string">'Shuttle'</span> </div><div class="line">  <span class="keyword">AND</span> ass1.role = <span class="string">'Commander'</span> <span class="keyword">AND</span> ass2.role = <span class="string">'Pilot'</span></div><div class="line">  <span class="keyword">AND</span> ass1.MissionNo = ass2.MissionNo </div><div class="line">  <span class="keyword">AND</span> ass1.MissionNo <span class="keyword">LIKE</span> <span class="string">'STS-2%'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> ass1.missionNo;</div></pre></td></tr></table></figure><p>观察以上这一组sql查询，发现很多问题，首先它需要从同一列中分别选出不同的部分，这时需要from 同一个表设置为两个不同的名字</p><p>ass1 和ass2</p><p>此外由于是从projectname名为Shuttle中选出的项目，所以加上</p><p>where ass1.projectname = ‘Shuttle’</p><p>然后通过role的语句来筛选Commander与Pilot</p><p>and ass1.role = ‘Commander’ and ass2.role =’Pilot’</p><p>然后通过以下语句来join两个表</p><p>and ass1.missionno = ass2.missionno</p><p>然后使用like来筛选</p><p>and ass1.missionno like ‘STS-2%’</p><p>最后按照字母默认以missionno排序</p><p>order by ass1.missionno;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pgsql我最近所发现的一些重要的query方式，
    
    </summary>
    
      <category term="sql" scheme="http://adamzeng.site/categories/sql/"/>
    
    
      <category term="sql" scheme="http://adamzeng.site/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据库与ERD</title>
    <link href="http://adamzeng.site/2018/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EERD/"/>
    <id>http://adamzeng.site/2018/08/09/数据库与ERD/</id>
    <published>2018-08-09T11:33:15.000Z</published>
    <updated>2018-08-09T13:55:34.031Z</updated>
    
    <content type="html"><![CDATA[<h4 id="INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe"><a href="#INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe" class="headerlink" title="INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)"></a>INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)</h4><h4 id="VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16"><a href="#VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16" class="headerlink" title="VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);"></a>VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);<a id="more"></a></h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%889.38.53.png"></p><p>这一段SQL语句所想说明的是插入shr（table 名）VALUES括号中的数据到括号中的这些列中，如果没有括号，SQL就会认为你是按照默认的列的名称的顺序插入括号中的数据，一般建议shr后面指定插入的列名。</p><p>所以说</p><p>####INSERT INTO shr    VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);</p><h3 id="也是对的！！！"><a href="#也是对的！！！" class="headerlink" title="也是对的！！！"></a>也是对的！！！</h3><p>####entity在Entity Relationship Diagrams（ERD）中是什么东西就不介绍了，可以理解为在化成图就是一个盒子。就是thing或者table，很容易理解，往往一类东西就能够作为一个entity，比如Boy或者Girl，回想当时建表的时候Boy和Girl，还有它们所包含的attribute（也就是它们的属性），比如firstname，lastname，这些东西，往往是属性，而在entity当中，换句话说也就是table当中，最重要的就是主键（primary key），它是unique的，是识别table每一行的重要标记，就像uts每个学生的student ID号一样。可以想象其实我们的信息也被uts建立了一张table，其中student ID号就是主键。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png"></p><h4 id="这就是一个entity，名字叫share，里面有一票share-code，share-name-share-price-share-quantity…-blah-blah-blah，这些都是attribute。"><a href="#这就是一个entity，名字叫share，里面有一票share-code，share-name-share-price-share-quantity…-blah-blah-blah，这些都是attribute。" class="headerlink" title="这就是一个entity，名字叫share，里面有一票share code，share name, share price, share quantity…..blah blah blah，这些都是attribute。"></a>这就是一个entity，名字叫share，里面有一票share code，share name, share price, share quantity…..blah blah blah，这些都是attribute。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8810.01.05.png"></p><p>####变成表就是上面这么个东西。</p><h4 id="思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student-ID还是Tax-file-number当做我们的主键？（稍微想想这个问题？？？？）"><a href="#思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student-ID还是Tax-file-number当做我们的主键？（稍微想想这个问题？？？？）" class="headerlink" title="思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student ID还是Tax file number当做我们的主键？（稍微想想这个问题？？？？）"></a>思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student ID还是Tax file number当做我们的主键？（稍微想想这个问题？？？？）</h4><h4 id="首先，每个学生都需要在学校注册，如果选择Tax-file-number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax-file-number显然是不合适的，student-ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。"><a href="#首先，每个学生都需要在学校注册，如果选择Tax-file-number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax-file-number显然是不合适的，student-ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。" class="headerlink" title="首先，每个学生都需要在学校注册，如果选择Tax file number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax file number显然是不合适的，student ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。"></a>首先，每个学生都需要在学校注册，如果选择Tax file number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax file number显然是不合适的，student ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。</h4><h4 id="还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。"><a href="#还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。" class="headerlink" title="还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。"></a>还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。</h4><h4 id="那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign-key）。"><a href="#那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign-key）。" class="headerlink" title="那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign key）。"></a>那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign key）。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8810.15.17.png"></p><h4 id="这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。"><a href="#这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。" class="headerlink" title="这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。"></a>这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。</h4><h4 id="怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？"><a href="#怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？" class="headerlink" title="怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？"></a>怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？</h4><h4 id="更不可能，因为GirlNo在Boy中是有重复的，都1-2-2了，还能做主键吗？"><a href="#更不可能，因为GirlNo在Boy中是有重复的，都1-2-2了，还能做主键吗？" class="headerlink" title="更不可能，因为GirlNo在Boy中是有重复的，都1 2 2了，还能做主键吗？"></a>更不可能，因为GirlNo在Boy中是有重复的，都1 2 2了，还能做主键吗？</h4><p>###所以这两个表之间的关系是one-to-many，一对多（girl对boy），一个girl对多个boy，咱们看看连起来啥样。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.02.14.png"></p><h4 id="select-boyno-boyname-boymobile-girlname-girlmobile-from-boy-girl-wh"><a href="#select-boyno-boyname-boymobile-girlname-girlmobile-from-boy-girl-wh" class="headerlink" title="select boyno, boyname, boymobile, girlname, girlmobile from boy, girl wh"></a>select boyno, boyname, boymobile, girlname, girlmobile from boy, girl wh</h4><p>####ere boy.girlno = girl.girlno;</p><h3 id="显示出来之后一目了然，Bonnie真的很会社交！"><a href="#显示出来之后一目了然，Bonnie真的很会社交！" class="headerlink" title="显示出来之后一目了然，Bonnie真的很会社交！"></a>显示出来之后一目了然，Bonnie真的很会社交！</h3><h4 id="外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。"><a href="#外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。" class="headerlink" title="外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。"></a>外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。</h4><h4 id="引用完整性（referential-integrity）"><a href="#引用完整性（referential-integrity）" class="headerlink" title="引用完整性（referential integrity）"></a><strong>引用完整性（referential integrity）</strong></h4><p>###到底什么是引用完整性！是这么说的，一个外键只能是为null或者必须与一个主键关联起来。为什么呢？girlno在这里其实是一种引用，boy表引用了girl表中的girlno这个女生编号。如果说有girl未对应boy，将这个girlno显示在boy表中有什么意义呢，但是boy的某一行的外键可以是null，就是有些boy没人缘，导致没有girl配对，也是很正常的！</p><h4 id="这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。"><a href="#这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。" class="headerlink" title="这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。"></a>这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.18.34.png"></p><h4 id="我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。"><a href="#我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。" class="headerlink" title="我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。"></a>我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.22.15.png" width="300px"></p><h4 id="最后再讲一个关于多对多的关系如何处理"><a href="#最后再讲一个关于多对多的关系如何处理" class="headerlink" title="最后再讲一个关于多对多的关系如何处理"></a>最后再讲一个关于多对多的关系如何处理</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.32.28.png"></p><h4 id="这种画法绝对不允许出现在作业中，不能画多对多！！！"><a href="#这种画法绝对不允许出现在作业中，不能画多对多！！！" class="headerlink" title="这种画法绝对不允许出现在作业中，不能画多对多！！！"></a>这种画法绝对不允许出现在作业中，不能画多对多！！！</h4><h3 id="应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。"><a href="#应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。" class="headerlink" title="应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。"></a>应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。</h3><h4 id="通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况"><a href="#通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况" class="headerlink" title="通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况"></a>通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.36.31.png"></p><h4 id="我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite-primary-key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。"><a href="#我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite-primary-key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。" class="headerlink" title="我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite primary key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。"></a>我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite primary key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.39.16.png"></p><h4 id="而且这个东西巧妙地解决了两个表不能直接多对多的问题。"><a href="#而且这个东西巧妙地解决了两个表不能直接多对多的问题。" class="headerlink" title="而且这个东西巧妙地解决了两个表不能直接多对多的问题。"></a>而且这个东西巧妙地解决了两个表不能直接多对多的问题。</h4><h4 id="还有最后一个关于雇员的问题，先看下面的表"><a href="#还有最后一个关于雇员的问题，先看下面的表" class="headerlink" title="还有最后一个关于雇员的问题，先看下面的表"></a>还有最后一个关于雇员的问题，先看下面的表</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.47.41.png"></p><h4 id="在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。"><a href="#在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。" class="headerlink" title="在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。"></a>在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe&quot;&gt;&lt;a href=&quot;#INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe&quot; class=&quot;headerlink&quot; title=&quot;INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)&quot;&gt;&lt;/a&gt;INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)&lt;/h4&gt;&lt;h4 id=&quot;VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16&quot;&gt;&lt;a href=&quot;#VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16&quot; class=&quot;headerlink&quot; title=&quot;VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);&quot;&gt;&lt;/a&gt;VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);
    
    </summary>
    
      <category term="数据库" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用大O符号来衡量算法效率</title>
    <link href="http://adamzeng.site/2018/08/07/%E4%BD%BF%E7%94%A8%E5%A4%A7O%E7%AC%A6%E5%8F%B7%E6%9D%A5%E8%A1%A1%E9%87%8F%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87/"/>
    <id>http://adamzeng.site/2018/08/07/使用大O符号来衡量算法效率/</id>
    <published>2018-08-07T10:02:18.000Z</published>
    <updated>2018-08-07T11:16:01.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。"><a href="#大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。" class="headerlink" title="大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。"></a>大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。</h3><p>假定两个算法执行相同的任务，比如查找（线性查找和二分查找），哪个算法更好？为了回答这个问题，我们可以实现这两个算法，并运行程序得到执行时间。但是这种方法存在以下两个问题：<a id="more"></a></p><p>1.首先，计算机上同时运行着许多任务，一个特定任务的执行时间是依赖于系统负荷的。</p><p>2.其次，执行时间依赖于特定的输入。例如，考虑线性查找和二分查找。如果要查找的元素恰巧是线性表中的第一个元素，那么线性查找回避二分查找更快找到该元素。</p><p>通过测量它们的执行时间来比较算法是比较困难的。为了克服这些问题，计算机科学家开发了一个独立于计算机和指定输入的理论方法来分析算法。该方法大致估计了有输入大小的改变而产生的影响。通过这个方法可以看到随着输入大小的增长算法执行时间增长得有多快，因此可以通过检查l两个算法的增长率（growth rate）来比较它们。</p><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p>考虑线性查找的问题。线性查找算法顺序比较数组中的元素与键，直到找到键或者数组已搜索完毕。如果该键不在数组中，那么对于一个大小为n的数组的大小需要n次比较。如果该键在数组中，那么平均需要n/2次比较。该算法的执行时间与数组的大小成正比。如果将数组大小加倍，那么比较次数也会加倍。该算法是呈线性增长的，增长率是n的数量级。计算机科学家使用大O符号（Big O notation）表示数量级。使用该符号，线性查找算法的复杂度就是O(n)，读为“n阶”。我们将时间复杂度为O(n)的算法称为线性算法，它体现为线性的增长率。</p><p>对于相同的输入大小，算法的执行时间可能会随着输入的不同而不同。导致最短执行时间的输入称为最佳情况输入（best-case input）。最佳情况分析和最差情况分析用来分析最佳情况输入和最差情况输入的算法（worst-case input）。最佳情况分析和最差情况分析用来分析最佳情况输入和最差情况输入的算法。最佳和最差情况分析都不具有代表性，但是最差情况分析却是非常有用的。我们可以确定的是自己的算法永远不会比最差情况还慢。平均情况分析（average-case analysis）试图在所有可能的相同大小的输入中确定平均时间。平均情况分析是比较理想的，但是很难完成，这是因为对于许多问题而言，要确定各种输入实例的相对概率和分布是相当困难的。由于最差情况分析比较容易完成，所以分析通常针对最差情况进行。</p><p>如果你几乎总是在线性表中查找一个已知道存在于其中的元素，那么线性查找算法在最差情况下需要n次比较，而在平均情况下需要n/2次比较。使用大O符号，这两种情况需要的时间都为O(n)。倍乘常量（1/2）可以忽略。算法分析的重点在于增长率，而倍乘常量对增长率没有影响。对于n/2或100n而言，增长率都和n一样，如表所示。因此，O(n) =O(n/2)=O(100n)。</p><table><thead><tr><th style="text-align:center">n  \ f(n)</th><th style="text-align:center">n</th><th style="text-align:center">n/2</th><th style="text-align:center">100n</th><th></th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">50</td><td style="text-align:center">10000</td><td></td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">200</td><td style="text-align:center">100</td><td style="text-align:center">20000</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td>f(200)/f(100)</td></tr></tbody></table><p>考虑在包含n个元素的数组中找出最大数的算法。如果n为2，找到最大数需要一次比较；如果n为3，找到最大数需要两次比较。一般来说，在拥有n个元素的线性表中找到最大数需要n-1次比较。算法分析主要用于庞大的输入规模。如果输入规模较小，那么估计算法效率是没有意义的。随着n的增大，表达式n-1中的n就主导了复杂度。大O符号允许忽略非主导部分（例如，表达式n-1中的-1），并强调重要部分（例如，表达式n-1中的n）。因此，该算法的复杂度为O(n)。</p><p>大O标记估算一个算法与输入规模相关的执行时间。如果执行时间与输入规模无关，就称该算法耗费了常量时间（constant time）,用符号O(1)表示。例如，在数组中从给定下标处获取元素的方法耗费的时间即为常量时间，这是因为该时间不会随着数组规模的增大而增长。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot;&gt;&lt;a href=&quot;#大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot; class=&quot;headerlink&quot; title=&quot;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot;&gt;&lt;/a&gt;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&lt;/h3&gt;&lt;p&gt;假定两个算法执行相同的任务，比如查找（线性查找和二分查找），哪个算法更好？为了回答这个问题，我们可以实现这两个算法，并运行程序得到执行时间。但是这种方法存在以下两个问题：
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的同步合集</title>
    <link href="http://adamzeng.site/2018/08/03/Java%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%90%88%E9%9B%86/"/>
    <id>http://adamzeng.site/2018/08/03/Java中的同步合集/</id>
    <published>2018-08-03T05:50:37.000Z</published>
    <updated>2018-08-03T06:24:08.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。"><a href="#在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。" class="headerlink" title="在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。"></a>在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。</h2><p>同步合集可以很安全地被多个线程并发地访问和修改。</p><p>开启Task1线程不断向同步的HashSet中插入数字，开启Task2线程不断的迭代显示Task1中同步HashSet的中的数字。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentModificationException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set hashSet = Collections.synchronizedSet(<span class="keyword">new</span> Hashset());</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ConcurrentModificationException() &#123;</div><div class="line">       ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">        executor.execute(<span class="keyword">new</span> Task1);</div><div class="line">        executor.execute(<span class="keyword">new</span> Task2);</div><div class="line">        executor.shutdown;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Task1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</div><div class="line">                System.out.println(<span class="string">"Thread1"</span>);</div><div class="line">                hashSet.add(<span class="keyword">new</span> Integer(i));</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</div><div class="line">                    ex.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Task2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"Thread2"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                    ex.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">synchronized</span> (hashSet) &#123;</div><div class="line">                    Iterator iterator = hashSet.iterator;</div><div class="line">                    <span class="keyword">while</span>(iterator.hasNext()) &#123;</div><div class="line">                        System.out.println(iterator.next());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot;&gt;&lt;a href=&quot;#在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot; class=&quot;headerlink&quot; title=&quot;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot;&gt;&lt;/a&gt;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&lt;/h2&gt;&lt;p&gt;同步合集可以很安全地被多个线程并发地访问和修改。&lt;/p&gt;
&lt;p&gt;开启Task1线程不断向同步的HashSet中插入数字，开启Task2线程不断的迭代显示Task1中同步HashSet的中的数字。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Switch-Forwarding-Methods</title>
    <link href="http://adamzeng.site/2018/08/01/Switch-Forwarding-Methods/"/>
    <id>http://adamzeng.site/2018/08/01/Switch-Forwarding-Methods/</id>
    <published>2018-08-01T04:29:28.000Z</published>
    <updated>2018-08-01T04:29:28.405Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>类设计原则</title>
    <link href="http://adamzeng.site/2018/05/08/%E7%B1%BB%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://adamzeng.site/2018/05/08/类设计原则/</id>
    <published>2018-05-08T02:33:59.000Z</published>
    <updated>2018-05-08T14:57:30.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的设计原则"><a href="#类的设计原则" class="headerlink" title="类的设计原则"></a>类的设计原则</h1><h4 id="1-内聚性"><a href="#1-内聚性" class="headerlink" title="1.内聚性"></a>1.内聚性</h4><p>类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，支持一个一致的目的。例如：可以设计一个类用于学生，但不应该将学生与教职工组合在同一个类中，因为学生和教职工是不同的实体。</p><p>如果一个实体负担太多的职责，就应该按各自的职责分成几个类。例如:String类、StringBuffer类和StringBuilder类都用于处理字符串，但是它们的职责不同。String类处理不可变字符串，StringBuilder类创建可变字符串，StringBuffer与StringBuilder类似，只是StringBuffer类还包含更行字符串的同步方法。<a id="more"></a></p><h4 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2.一致性"></a>2.一致性</h4><p>遵循标准Java程序设计风格和命名习惯。为类、数据域和方法选取具有信息的名字。通常的风格是将数据声明置于构造方法之前，并且将构造方法置于方法之前。</p><p>选择名字要保持一致，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。例如：length()方法返回String，StringBuilder和StringBuffer的大小。如果在这些类中给这个方法用不同的名字就不一致了。</p><p>一般来说，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。如果一个类不支持无参的构造方法，要用文档写出原因。如果没有显式定义构造方法，即假定有一个空方法体的公共默认无参构造方法。</p><p>如果不想让用户创建类的对象，可以在类中声明一个私有构造方法，Math类就是如此。</p><h4 id="3-封装性"><a href="#3-封装性" class="headerlink" title="3.封装性"></a>3.封装性</h4><p>一个类应该使用private修饰符隐藏其数据，以免用户直接访问它。这使得类更易于维护。</p><p>只在希望数据域可读的情况下，才提供get方法；也只在希望数据域可更新的情况下，才提供set方法。例如：Rational类为numerator和denominator提供了get方法，但是没有提供set方法，因为Rational对象是不可改变的。</p><h4 id="4-清晰性"><a href="#4-清晰性" class="headerlink" title="4.清晰性"></a>4.清晰性</h4><p>为使设计清晰，内聚性、一致性和封装性都是很好的设计原则。除此之外，类应该有一个很清晰的合约，从而易于解释和理解。</p><p>用户可以以各种不同组合、顺序，以及在各种环境中结合使用多个类。因此，在设计一个类时，这个类不应该限制用户如何以及何时使用该类；以一种方式设计属性，以容许用户按值的任何顺序和任何组合来设置；设计方法应该使得实现的功能与它们出现的顺序无关。例如：Loan类包含属性loanAmount、numberOfYears和annualInterestRate，这些属性的值可以按任何顺序来设置。</p><p>方法应在不产生混淆的情况下进行直观定义。例如：String类中的substring(int beginIndex, int endIndex)方法就有一点混乱。这个方法返回从beginIndex到endIndex-1而不是endIndex的子串。该方法应该返回从beginIndex到endIndex的子字符串，从而更加直观。</p><p>不应该声明一个来自其他数据域的数据域。例如，下面的Person类有两个数据域：birthDate和age。由于age可以从birthDate导出，所以age不应该声明为数据域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> java.util.Date birthDate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5-完整性"><a href="#5-完整性" class="headerlink" title="5.完整性"></a>5.完整性</h4><p>类是为许多不同用户的使用而涉及的。为了能在一个广泛的应用中使用，一个类应该通过属性和方法提供多种方案以适应用户的不同需求。例如：为满足不同的应用需求，String类包含了40多种很实用的方法。</p><h4 id="6-实例和静态"><a href="#6-实例和静态" class="headerlink" title="6.实例和静态"></a>6.实例和静态</h4><p>依赖于类的具体实例的变量或方法必须是一个实例变量或方法。如果一个变量被类的所有实例所共享，那就应该将它声明为静态的。例如：在程序清单9-8中，CircleWithPrivateDataFields中的变量numberOfObjects被CircleWithPrivateDataFields类的所有对象共享。因此，它被声明为静态的。如果方法不依赖于某个具体的实例，那就应该将它声明为静态方法。例如CircleWithPrivateDataFields中的getNumberOfObjects()方法没有绑定到任何具体实例，因此，它被声明为静态方法。</p><p>应该总是使用类名（而不是引用变量）引用静态变量和方法，以增强可读性并避免错误。</p><p>不要从构造方法中传入参数来初始化静态数据域。最好使用set方法改变静态数据域。图a中的类最好用图b中的代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> t1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> t2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeThing</span><span class="params">(<span class="keyword">int</span> t1, <span class="keyword">int</span> t2)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> t1;</div><div class="line">    privte <span class="keyword">static</span> <span class="keyword">int</span> t2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeThing</span><span class="params">(<span class="keyword">int</span> t1)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setT2</span><span class="params">(<span class="keyword">int</span> t2)</span> </span>&#123;</div><div class="line">        SomeThing.t2 = t2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实例和静态是面向对象程序设计不可或缺的部分。数据域或方法要么是实例的，要么是静态的。不要错误地忽视了静态数据域或方法。常见的设计错误是将本应该声明为静态方法的方法声明为实例方法。例如：用于计算n的阶乘的factorial(int n)方法应该定义为静态方法的，因为它不依赖于任何具体实例。</p><p>构造方法永远都是实例方法，因为它是用来创建具体实例的。一个静态变量或方法可以从实例方法中调用，但是不能从静态方法中调用实例变量或方法。</p><h4 id="7-继承与聚合"><a href="#7-继承与聚合" class="headerlink" title="7.继承与聚合"></a>7.继承与聚合</h4><p>继承和聚合之间的差异，就是is-a（是一种）和has-a（具有）之间的关系。例如，苹果是一种水果；因此可以使用继承来对Apple类和Fruit类之间的关系进行建模。人具有名字；因此，可以使用聚合来对Person类和Name类之间的关系建模。</p><h4 id="8-接口与抽象类"><a href="#8-接口与抽象类" class="headerlink" title="8.接口与抽象类"></a>8.接口与抽象类</h4><p>接口与抽象类都可以用于为对象指定共同的行为。如何决定是采用接口还是类呢？通常，比较强的is-a（是一种）关系清晰地描述了父子关系，应该采用类来建模。例如，因为桔子是一种水果，他们的关系就应该采用类的继承关系来建模。弱的is-a关系，也称为is-kind-of（是一类）关系，表明一个对象拥有某种属性。弱的is-a关系可以使用接口建模。例如，所有的字符串都是可以比较的，因此String类实现了Comparable接口。圆或者矩形是一个几何对象，因此Circle可以设计为GeometricObject的子类。圆有不同的半径，并且可以基于半径进行比较，因此Circle可以实现Comparable接口。</p><p>接口比抽象类更加灵活，因为一个子类只能继承一个父类，但是却可以实现任意个数的接口。然而，接口不能具有的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类的设计原则&quot;&gt;&lt;a href=&quot;#类的设计原则&quot; class=&quot;headerlink&quot; title=&quot;类的设计原则&quot;&gt;&lt;/a&gt;类的设计原则&lt;/h1&gt;&lt;h4 id=&quot;1-内聚性&quot;&gt;&lt;a href=&quot;#1-内聚性&quot; class=&quot;headerlink&quot; title=&quot;1.内聚性&quot;&gt;&lt;/a&gt;1.内聚性&lt;/h4&gt;&lt;p&gt;类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，支持一个一致的目的。例如：可以设计一个类用于学生，但不应该将学生与教职工组合在同一个类中，因为学生和教职工是不同的实体。&lt;/p&gt;
&lt;p&gt;如果一个实体负担太多的职责，就应该按各自的职责分成几个类。例如:String类、StringBuffer类和StringBuilder类都用于处理字符串，但是它们的职责不同。String类处理不可变字符串，StringBuilder类创建可变字符串，StringBuffer与StringBuilder类似，只是StringBuffer类还包含更行字符串的同步方法。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>八皇后</title>
    <link href="http://adamzeng.site/2018/03/08/%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <id>http://adamzeng.site/2018/03/08/八皇后/</id>
    <published>2018-03-08T09:53:04.000Z</published>
    <updated>2018-03-09T07:11:19.005Z</updated>
    
    <content type="html"><![CDATA[<p>首先，可归纳问题的条件为，八皇后之间需要满足：</p><ol><li>不在同一行上。</li><li>不在同一列上。</li><li>不在同一斜线上。</li><li>不在同一反斜线上。<a id="more"></a></li></ol><p>这为我们提供了一种遍历的思路，我们可以逐行或者逐列来进行可行摆放方案的遍历，每一行（或列）遍历出一个符合条件的位置，接着就到下一行或列遍历下一个棋子的合适位置，这种遍历思路可以保证我们遍历过程中有一个条件是绝对符合的—就是下一个棋子的摆放位置与前面的棋子不在同一行（或列）。接下来，我们只要判断当前当前位置是否还符合其他条件，如果符合，就遍历下一行（或列）所有位置，看看是否继续有符合条件的位置，以此类推，如果某一行（或列）的所有位置都不合适，就返回上一行（或列）继续该行（或列）的其他位置遍历，当我们顺利遍历到最后一行（或列），且有符合条件的位置时，就是一个可行的八皇后摆放方案，累加一次八皇后可行方案的合数，然后继续遍历该行其他位置是否有合适的，如果没有，则返回上一行，遍历该行其他位置，依此下去。这样一个过程下来，我们就可以得出所有符合条件的八皇后摆放方案了。这是一个深度优先遍历的过程，同时也是经典的递归思路。</p><p>接下来，我们以逐列遍历，具体到代码，进一步说明。首先，从第一列开始找第一颗棋子的合适的位置后，就开始到下一列考虑下一个合适的位置，此时，第二列的第一行及第二行显然就不能放第二颗棋子了，因为其与第一个棋子一个同在一行，一个同在一条斜线上，第二列第三行成为第二列第一个合适的位置，因此类推，第三列的第5行又会是一个合适位置，这个过程中，我们注意到，每一列的合适位置都是受到前面几列的位置所影响，归纳如下：</p><p>假设前面一列的棋子放在第3行，那当前列不能放的位置就一定是3行，2行，4行。因为如果放在这三行上就分别跟前一列的棋子同在一行、同在斜线、同在反斜线上，不符合我们的要求。现在我们用cols数组来表示8个列棋子所放的行数，数组下标从0开始，其中数组下标表示列数，数组的元素值该列棋子所在行数，当前列为N（N&gt;=0,N&lt;8),即cols[N-1]=3,则有：</p><p>col[n] != col[n-1] (=3,表示不在同一行)</p><p>cols[N] != cols[n-1] -1 (=3-1=2,表示不在同一斜线上)</p><p>cols[N] != cols[N-1] +1(=3+1,表示不在同一反斜线上)</p><p>这里我们注意到，如果N-2列存在的话，那么我们还要考虑当前列N不与N-2列的棋子同行，同斜线，同反斜线。把当前列N的前面的某一列设为m，则m的所有取值为{m&gt;0,m&lt;N}的集合，故又可在上面式子的基础，归纳为如下：</p><p>cols[N] !=cols[m] (与第m列的棋子不在同一行)</p><p>cols[N] != cols[m] -(N-m)(&gt;=0,第m列的棋子不在同一斜线上)</p><p>cols[N] != cols[m] +( N-m) (&lt;8-1,与第m列的棋子不在同一反斜线上)</p><p>具体到代码，很显然，取m的所有值只需要一句循环，同时我们为每一列定义一个长度为8的布尔数组row[],下标同样是从0开始，我们规定当row[i]=true时，表示该列第行不能放棋子。这样我们就能写成下列程序段了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span>[] rows = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;N;i++) &#123;</div><div class="line">  rows[cols[m]]=<span class="keyword">true</span>; <span class="comment">// 当前列N的棋子不能放在前面列m的棋子所在行</span></div><div class="line">  </div><div class="line">  <span class="keyword">int</span> d =N-m;</div><div class="line">  </div><div class="line"> <span class="comment">// 该句用于设置当前列N的棋子不能放在前面列m的棋子的斜线上</span></div><div class="line">  <span class="keyword">if</span> (cols-d&gt;=<span class="number">0</span>) rows[cols-d]=<span class="keyword">true</span>;</div><div class="line">  </div><div class="line"> <span class="comment">// 该句用于设置当前列N的棋子不能放在前面列m的棋子的反斜线上</span></div><div class="line">  <span class="keyword">if</span>(cols+d&lt;=<span class="number">8</span>-<span class="number">1</span>) rows[cols+d]=<span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，可归纳问题的条件为，八皇后之间需要满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不在同一行上。&lt;/li&gt;
&lt;li&gt;不在同一列上。&lt;/li&gt;
&lt;li&gt;不在同一斜线上。&lt;/li&gt;
&lt;li&gt;不在同一反斜线上。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Group by</title>
    <link href="http://adamzeng.site/2018/01/09/Group-by/"/>
    <id>http://adamzeng.site/2018/01/09/Group-by/</id>
    <published>2018-01-09T05:43:04.000Z</published>
    <updated>2018-01-09T08:43:26.099Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pandas Idioms</title>
    <link href="http://adamzeng.site/2018/01/09/Pandas-Idioms/"/>
    <id>http://adamzeng.site/2018/01/09/Pandas-Idioms/</id>
    <published>2018-01-09T04:24:13.000Z</published>
    <updated>2018-01-09T08:42:07.120Z</updated>
    
    <content type="html"><![CDATA[<p>Python程序设计师通常认为在程序语言中，可以使用多种方法来解决一个特定问题。但是，有些是比其他的更合适。最好的解决方案被称为惯用的Python，有很多很好的例子在Stack Overflow和网站上。<a id="more"></a></p><p>惯用的解决方案通常是具有高性能和高可读性。这并不一定是真的。如同某种Python的子语言，Pandas有自己的一套惯用语。我们已经提到了其中一些，例如尽可能使用向量化，和不适用反复运算回圈，如果你不需要。几位开发人员和用户在Pandas社区内，对这些惯用语称为Pandorable。我认为这是一个非常好的术语。所以，我想和你分享几个关键特色，如何可以使您的程序pandorable。</p><p>其中第一个称为方法链接（method chaining）。我们以前看到过，当您查询DataFrames时，您可以将pandas的程序调用链接在一起。例如，如果要根据项县名的索引来选择行（row）。然后你只想要像Total Population一样的，某些列（column），你可以编写一个查询，如”df.loc[“Washtenaw”].[“Total Population”]”这是一种链接形式，称为链式索引（chain indexing）。这通常是一个糟糕的做法。因为pandas可能会返回DataFrame的副本或视图。根据基础的Numpy程序库。在他对pandas惯用语的描述，模式开发人员Tom Osberger为此说了一个经验法则。如果你看到背靠背的方括号。那么您应该仔细想想，如果你想做链式索引。我认为你这是一个很好的程序探索或反模式。</p><p>方法链接，然而，有点不同。方法链接的一般思想是，每个方法对某物件，都会返回参考（reference）该物件。这样做的好处是，您可以将许多不同操作在一个DataFrame，集中在一行或至少一个程序语句中。这是pandas中的两种程序的例子，使用我们的人口普查数据。第一个是pandorable方式，用方法链接编写的程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(df.where(df[<span class="string">'SUMLEV'</span>] == <span class="number">50</span>)</div><div class="line">     .dropna()</div><div class="line">     .set_index([<span class="string">'STNAME'</span>,<span class="string">'CTYNAME'</span>])</div><div class="line">     .rename(columns=&#123;<span class="string">'ESTIMATESBASE2010'</span>:<span class="string">'Estiamtes Base 2010'</span>&#125;))</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(df.drop(df[df[<span class="string">'Quantity'</span>] == <span class="number">0</span>].index).rename(columns=&#123;<span class="string">'Weight'</span>: <span class="string">'Weight (oz.)'</span>&#125;))</div></pre></td></tr></table></figure><p>现在，任何好的惯用语的关键是，要理解它不帮你的时候。在这种情况下，你可以实际量这两种方法时间的和看到后一种方法是更快。所以，这是一个典型的时间-可读性折中的例子。</p><h3 id="Python中的map"><a href="#Python中的map" class="headerlink" title="Python中的map"></a>Python中的map</h3><p>它是语言中函数式编程的基础。当你想在Python中使用map时，你传入一些你想要调用的函数，一些可以反复迭的物件，像一个列表，你要这函数运用在上面的。结果是对列表中的每个项目运用这个函数，其输出是，所有函数执行的结果列表。</p><p>Pandas有一个类似的功能，名为applymap，在applymap中，您提供了一些应该对DataFrame的每个单元格进行操作的函数，资料帧，并返回集合本身就是一个资料帧。我认为applymap是好的，但实际上很少使用它。相反，我发现自己经常希望映射所有的行 资料帧。pandas有一个我在这里经常使用的功能，称为apply。让我们看看另一个例子。</p><p>只返回一个Series，只有两列min与max。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_max</span><span class="params">(row)</span>:</span></div><div class="line">    data = row[[<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2015'</span>]]</div><div class="line">    <span class="keyword">return</span> pd.Series(&#123;<span class="string">'min'</span>: np.min(data), <span class="string">'max'</span>: np.max(data)&#125;)</div><div class="line">  </div><div class="line">df.apply(min_max, axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>重新设两列，计算这五列数据中的最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_max</span><span class="params">(row)</span>:</span></div><div class="line">    data=row[[<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2015'</span>]]</div><div class="line">    row[<span class="string">'max'</span>]=np.max(data)</div><div class="line">    row[<span class="string">'min'</span>]=np.min(data)</div><div class="line">    <span class="keyword">return</span> row</div><div class="line"></div><div class="line">df.apply(min_max,axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>使用lambda方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rows = [<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2015'</span>]</div><div class="line">df.apply(<span class="keyword">lambda</span> x: np.max(x[rows]),axis=<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python程序设计师通常认为在程序语言中，可以使用多种方法来解决一个特定问题。但是，有些是比其他的更合适。最好的解决方案被称为惯用的Python，有很多很好的例子在Stack Overflow和网站上。
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
