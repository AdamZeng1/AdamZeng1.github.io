<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AdamZeng</title>
  
  <subtitle>start from zero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://adamzeng.site/"/>
  <updated>2018-08-30T13:49:46.664Z</updated>
  <id>http://adamzeng.site/</id>
  
  <author>
    <name>AdamZeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉查找树</title>
    <link href="http://adamzeng.site/2018/08/27/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>http://adamzeng.site/2018/08/27/二叉查找树/</id>
    <published>2018-08-27T12:32:46.000Z</published>
    <updated>2018-08-30T13:49:46.664Z</updated>
    
    <content type="html"><![CDATA[<p>树（tree）提供了一种层次组织结构，数据可以存储在树中的每个结点内。</p><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><ul><li>二叉查找树可以用链接结构实现。<a id="more"></a></li></ul><p>线性表、栈和队列都是由一系列元素构成的线性结构。二叉树（binary tree）是一种层次结构，它要么是空集，要么是由一个称为根（root）的元素和两颗不同的二叉树组成的，这两颗二叉树分别称为左子树（left subtree）和右子树（right subtree）。允许这两颗子树中的一颗或者两颗为空。二叉树示例如图所示。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-27%20%E4%B8%8B%E5%8D%8811.20.28.png" alt="avatar"></p><p>一条路径的长度（length）是指在该条路径上的边的个数。一个结点的深度（depth）是指从根结点到该结点的路径长度。有时候，我们将一棵树中具有某个给定深度的所有结点的集合称为该树的层（level）。兄弟结点（sibling）是共享同一父结点的结点。一个结点的左（右）子树的根结点称为这个结点的左（右）子结点（left（right）child）。没有子结点的结点称为叶结点（leaf）。非空树的高度为从根结点到最远的叶结点的路径长度。只有一个结点的树高度为0。习惯上，将空树的高度定为-1。考虑上图a中的树，从结点60到45的路径的长度为2。结点60的深度为0，结点55的深度为1，而结点45的深度为2。这颗树的高度为2。结点45和57是兄弟结点。结点45、57、67和107位于同一层。</p><p>一种称为二叉树（binary search tree， BST）的特殊类型的二叉树非常有用。二叉查找树（没有重复元素）的特征是：对于树中的每一个结点，它的左子树中结点都小于该结点的值，而它的右子树中结点的值都大于该结点的值。</p><h4 id="表示二叉查找树"><a href="#表示二叉查找树" class="headerlink" title="表示二叉查找树"></a>表示二叉查找树</h4><p>可以使用一个链式结点的集合来表示二叉树。每个结点都包含一个数值和两个称为left和right的链接，分别指向左孩子和右孩子，</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-27%20%E4%B8%8B%E5%8D%8811.47.06.png" alt="avatar"></p><p>结点可以定义为一个类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> E element;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; left;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; right;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        element = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>变量root指向树的根结点。如果树为空，那么root的值为null。下面的代码创建了如上图所示的树的前三个结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the root node</span></div><div class="line">TreeNode&lt;Integer&gt; root = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">60</span>);</div><div class="line"></div><div class="line"><span class="comment">// Create the left child node</span></div><div class="line">root.left = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">55</span>);</div><div class="line"></div><div class="line"><span class="comment">// Create the right child node</span></div><div class="line">root.right = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="number">100</span>);</div></pre></td></tr></table></figure><h4 id="查找一个元素"><a href="#查找一个元素" class="headerlink" title="查找一个元素"></a>查找一个元素</h4><p>要在二叉查找树中查找一个元素，可从根结点开始向下扫描，直到找到一个匹配元素，或者达到一颗空子树为止。该算法在下面的程序中。让current指向根结点，重复下面的步骤直到current为null或者元素匹配current.element。</p><ul><li>如果element小于current.element，就将current.left赋给current。</li><li>如果element大于current.element，就将current.right赋给current。</li><li>如果element等于current.element，就返回true。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E element)</span> </span>&#123;</div><div class="line">    TreeNode&lt;E&gt; current =root; <span class="comment">// Start from the root</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(element &lt;current.element) &#123;</div><div class="line">            current = current.left; <span class="comment">// Go left</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; current.element) &#123;</div><div class="line">            current = current.right; <span class="comment">// Go right</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Element matches current.element</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="在BST中插入一个元素"><a href="#在BST中插入一个元素" class="headerlink" title="在BST中插入一个元素"></a>在BST中插入一个元素</h4><p>为了在BST中插入一个元素，需要确定在树中插入元素的位置。关键思路是确定新结点的父结点所在的位置。下面程序清单给出该算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(tree is empty) &#123;</div><div class="line">        <span class="comment">// Create the node for e as the root</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Locate the parent node</span></div><div class="line">        parent = current = node;</div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(e &lt; the value in current.element) &#123;</div><div class="line">                parent = current; <span class="comment">// Keep the parent</span></div><div class="line">                current = current.left; <span class="comment">// Go left</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e &gt; the value in current.element) &#123;</div><div class="line">                parent = current; <span class="comment">// Keep the parent</span></div><div class="line">                current = current.right; <span class="comment">// Go right</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Duplicate node not inserted</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Create a new node for e and attach it to parent</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element inserted</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果这棵树是空的，就使用新元素创建一个根结点；否则，寻找新元素结点的父结点的位置。为该元素创建一个新结点，然后将该结点链接到它的父结点上。如果新元素的值小于父元素的值，则将新元素的结点设置为父结点的左子结点；如果新元素的值大于父元素的值，则将新元素的结点设置为父结点的右子结点。</p><p>例如，要将数据101插入下图所示的树中，在算法中的while循环结束之后，parent指向存储107的结点，如图a所示。存储数据101的新结点将成为父结点的左子结点。要将数据59插入树中，在算法中的while循环结束之后，父结点指向数据57的结点，如图b所示。存储数据59的新结点成为父结点的右子结点。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.06.17.png" alt="avatar"></p><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><p>树的遍历（tree traversal）就是访问树中每个结点一次且只有一次的过程。遍历树的方法有很多种。中序（inorder）、前序（preorder）、后序（postorder）、深度优先（depth-first)和广度优先（breadth-first）等遍历方法。</p><p>中序遍历（inorder traversal）法，首先递归地访问当前结点的左子树，然后访问当前结点，最后递归地访问该结点的右子树。中序遍历法以递增顺序显示BST中的所有结点。</p><p>后序遍历（postorder traversal）法，首先递归地访问当前结点的左子树，然后递归地访问该结点的右子树，最后访问该结点本身。后序遍历的一个应用就是找出一个文件系统中目录的个数。如下图所示，每个目录都是一个内部结点，而每个文件都是叶结点。可以使用后序遍历法，在找出根目录的大小之前得到每个文件和子目录的大小。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.14.44.png" alt="avatar"></p><p>前序遍历（preorder traversal）法，首先访问当前结点，然后递归地访问该结点的左子树，最后递归地访问该结点的右子树。深度优先遍历法与前序遍历法相同。前序遍历的一个应用就是打印一个结构性文档。如下图所示，可以使用前序遍历法打印本书的目录。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8A%E5%8D%8811.14.55.png" alt="avatar"></p><ul><li>可以采用前序插入元素的方法来重构一颗二叉查找树。重构的树为原始的二叉查找树保留了父结点和子结点的关系。</li></ul><p>广度优先遍历法逐层访问树中的结点。首先访问根结点，然后从左往右访问根结点的所有子结点，再从左往右访问根结点的所有孙子结点，以此类推。</p><p>例如，对于往上两个图中的树，它中序遍历为</p><p>45 55 57 59 60 67 100 101 107</p><p>它的后序遍历为</p><p>45 59 57 55 67 101 107 100 60</p><p>它的前序遍历为</p><p>60 55 45 57 59 100 67 107 101</p><p>它的广度优先遍历为</p><p>60 55 100 45 57 67 107 59 101</p><p>可以使用下面的树来帮助记忆中序、后序以及前序：</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8B%E5%8D%8812.09.51.png" alt="avatar"></p><p>中序是1+2，后序是1 2+，前序是+1 2。</p><h4 id="BST类"><a href="#BST类" class="headerlink" title="BST类"></a>BST类</h4><p>我们遵循Java合集框架API的设计模式，使用一个名为Tree的接口来定义树的所有常用操作，并提供名为AbstractTree的抽象类，该抽象类部分地实现了Tree，如下图所示。继承AbstractTree定义一个具体的BST类。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-28%20%E4%B8%8B%E5%8D%8812.13.48.png" alt="avatar"></p><p>BST.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">AbstractTree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> TreeNode&lt;E&gt; root;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a default binary search tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a binary search tree from an array of objects</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(E[] objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</div><div class="line">            insert(objects[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Return true if the element is in the tree */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        TreeNode&lt;E&gt; current = root; <span class="comment">// Start from the root</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// element matches current.element</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element is found</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Insert element e into the binary search tree.</span></div><div class="line">     * Return true if the element is inserted successfully */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            root = createNewNode(e); <span class="comment">// Create a new root</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Locate the parent node</span></div><div class="line">            TreeNode&lt;E&gt; parent = <span class="keyword">null</span>;</div><div class="line">            TreeNode&lt;E&gt; current = root;</div><div class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    parent = current;</div><div class="line">                    current = current.left;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    parent = current;</div><div class="line">                    current = current.right;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// Duplicated node not inserted</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create the new node and attach it to the parent node</span></div><div class="line">            <span class="keyword">if</span> (e.compareTo(parent.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                parent.right = createNewNode(e);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(parent.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                parent.left = createNewNode(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element insert successfully</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> TreeNode&lt;E&gt; <span class="title">createNewNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Inorder traversal from the root */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        inorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        inorder(root.left);</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">        inorder(root.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Postorder traversal from the root */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        postorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">        postorder(root.left);</div><div class="line">        postorder(root.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span> </span>&#123;</div><div class="line">        preorder(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from a subtree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        preorder(root.left);</div><div class="line">        preorder(root.right);</div><div class="line">        System.out.print(root.element + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This inner class is static, because it does not access</div><div class="line">     * any instance members defined in its outer class</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line">        <span class="keyword">protected</span> E element;</div><div class="line">        <span class="keyword">protected</span> TreeNode&lt;E&gt; left;</div><div class="line">        <span class="keyword">protected</span> TreeNode&lt;E&gt; right;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            element = e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Get the number of nodes in the tree */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the root of the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode&lt;E&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a path from the root leading to the specified element</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> java.util.ArrayList&lt;TreeNode&lt;E&gt;&gt; path(E e) &#123;</div><div class="line">        java.util.ArrayList&lt;TreeNode&lt;E&gt;&gt; list = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        TreeNode&lt;E&gt; current = root; <span class="comment">// Start from the root</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            list.add(current); <span class="comment">// Add the node to the list</span></div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> list; <span class="comment">// Return an array list of nodes</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete an element from the binary search tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     * Return false if the element is not in the tree.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="comment">// Locate the node to be deleted and also locate its parent node</span></div><div class="line">        TreeNode&lt;E&gt; parent = <span class="keyword">null</span>;</div><div class="line">        TreeNode&lt;E&gt; current = root;</div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.compareTo(current.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                parent = current;</div><div class="line">                current = current.left;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(current.element) &gt; <span class="number">0</span>) &#123;</div><div class="line">                parent = current;</div><div class="line">                current = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// Element is in the tree pointed at by current</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Case 1: current has no left child</span></div><div class="line">        <span class="keyword">if</span> (current.left == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Connect the parent with the right child of the current node</span></div><div class="line">            <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</div><div class="line">                root = current.right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.compareTo(parent.element) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    parent.left = current.right;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    parent.right = current.right;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Case 2: The current node has a left child.</span></div><div class="line">            <span class="comment">// Locate the rightmost node in the left subtree of</span></div><div class="line">            <span class="comment">// the current node and also its parent.</span></div><div class="line">            TreeNode&lt;E&gt; parentOfRightMost = current;</div><div class="line">            TreeNode&lt;E&gt; rightMost = current.left;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (rightMost.right != <span class="keyword">null</span>) &#123;</div><div class="line">                parentOfRightMost = rightMost;</div><div class="line">                rightMost = rightMost.right; <span class="comment">// Keep going to the right</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Replace the element in current by the element in rightMost</span></div><div class="line">            current.element = rightMost.element;</div><div class="line"></div><div class="line">            <span class="comment">// Eliminate rightmost node</span></div><div class="line">            <span class="keyword">if</span> (parentOfRightMost.right == rightMost) &#123;</div><div class="line">                parentOfRightMost.right = rightMost.left;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Special case: parentOfRightMost == current</span></div><div class="line">                parentOfRightMost.left = rightMost.left;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size--;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Element deleted successfully</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/** Obtain an iterator. Use inorder. */</span></div><div class="line">    <span class="keyword">public</span> java.util.<span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InorderIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Inner class InorderIterator</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InorderIterator</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// Store the elements in a list</span></div><div class="line">        <span class="keyword">private</span> java.util.ArrayList&lt;E&gt; list =</div><div class="line">                <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">0</span>; <span class="comment">// Point to the current element in list</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InorderIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            inorder(); <span class="comment">// Traverse binary tree and store elements in list</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Inorder traversal from the root</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span> </span>&#123;</div><div class="line">            inorder(root);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Inorder traversal from a subtree</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode&lt;E&gt; root)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">            inorder(root.left);</div><div class="line">            list.add(root.element);</div><div class="line">            inorder(root.right);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** More elements for traversing? */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (current &lt; list.size()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** Get the current element and move to the next */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> list.get(current++);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">/** Remove the current element */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException</div><div class="line">                    (<span class="string">"Removing an element from the iterator is not supported"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove all elements from the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        root = <span class="keyword">null</span>;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Tree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the element is in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Insert element e into the binary search tree.</div><div class="line">     * Return true if the element is inserted successfully.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete the specified element from the tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the tree is empty</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AbstractTree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the element is in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Insert element e into the binary search tree.</div><div class="line">     * Return true if the element is inserted successfully.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Delete the specified element from the tree.</div><div class="line">     * Return true if the element is deleted successfully</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Inorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Postorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Preorder traversal from the root</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return true if the tree is empty</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树（tree）提供了一种层次组织结构，数据可以存储在树中的每个结点内。&lt;/p&gt;
&lt;h4 id=&quot;二叉查找树&quot;&gt;&lt;a href=&quot;#二叉查找树&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树&quot;&gt;&lt;/a&gt;二叉查找树&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;二叉查找树可以用链接结构实现。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>heap堆排序</title>
    <link href="http://adamzeng.site/2018/08/26/heap%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://adamzeng.site/2018/08/26/heap堆排序/</id>
    <published>2018-08-26T12:27:38.000Z</published>
    <updated>2018-08-26T13:17:03.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对于堆排序"><a href="#对于堆排序" class="headerlink" title="对于堆排序"></a>对于堆排序</h2><p>首先堆排序的一些要点是，首先堆排序本身是使用二叉堆，而二叉堆本身是一个非常有意思的东西，首先它是一个完全二叉树，而二叉堆（binary heap）则是一颗具有以下属性的二叉树：<a id="more"></a></p><ol><li>形状属性：它是一颗完全二叉树。</li><li>堆属性：每个结点大于或等于它的任意一个孩子。</li></ol><p>完全二叉树：如果一颗二叉树的每一层都是满的，或者最后一层可以不填满并且最后一层的叶子都是靠左放置的，那么这颗二叉树就是完全的（complete）。例如，在下图中，</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.39.21.png" alt="avatar"></p><h4 id="堆的存储"><a href="#堆的存储" class="headerlink" title="堆的存储"></a>堆的存储</h4><p>如果堆的大小是事先知道的，那么可以将堆存储在一个ArrayList中或一个数组中。下图</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.47.42.png" alt="avatar"></p><p>中的堆使用右边的数组来存储。树根在位置0处，它的两个子结点在位置1和位置2处。对于位置i处的结点，它的左子结点在位置2i+1，它的右子结点在位置2i+2处，而它的父结点在位置（i-2)/2处。例如，元素39的结点在位置4处，因此，它的左子结点（元素14）在位置9处（2<em>4+1），它的右子结点（元素33）在位置10处（2 </em> 4 +2），而它的父结点（元素42）在位置1处((4-1)/2)。</p><h4 id="添加一个新的结点"><a href="#添加一个新的结点" class="headerlink" title="添加一个新的结点"></a>添加一个新的结点</h4><p>为了给堆添加一个新结点，首先将它添加到堆的末尾，然后按如下方式重建这棵树：</p><p><em>将最后一个结点作为当前结点；</em></p><p><em>while（当前结点大于它的父结点）{</em></p><p><em>将当前结点和它的父结点交换；</em></p><p><em>现在当前结点往上面进了一个层次</em></p><p><em>}</em></p><p>假设这个堆被初始化为空的。在以3、5、1、19、11和22的顺序添加数字之后，这个堆如下图所示</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8810.58.13.png" alt="avatar"></p><p>现在考虑向堆中添加数字88。将新结点88放在树的末尾，如上图所示，互换88和19。互换88和22。</p><h4 id="删除根结点"><a href="#删除根结点" class="headerlink" title="删除根结点"></a>删除根结点</h4><p>经常需要从堆中删除最大的元素，也就是这个堆中的根结点。在删除根结点之后，就必须重建这棵树以保持堆的属性。重建该树的算法如下所示：</p><p><em>用最后一个结点替换根结点</em></p><p><em>让根结点成为当前结点；</em></p><p><em>while（当前结点具有子结点并且当前结点小于它的子结点）{</em></p><p><em>将当前结点和它的较大子结点交换；</em></p><p><em>现在当前结点往下面退了一个层次；</em></p><p><em>}</em></p><p>下图给出了从上图中删除根结点62之后重建堆的过程。将最后的结点9移到根结点处，如图所示。</p><p>互换9和59，互换9和44，互换9和30。</p><p>再往下给出了删除从之前删除根结点59之后重建堆的过程。将最后的结点17移到根结点出，互换17和44，互换17和30。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-26%20%E4%B8%8B%E5%8D%8811.05.31.png" alt="avatar"></p><h4 id="实现heap类"><a href="#实现heap类" class="headerlink" title="实现heap类"></a>实现heap类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> java.util.ArrayList&lt;E&gt; list = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a default heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a heap from an array of objects</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(E[] objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</div><div class="line">            list.add(objects[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Add a new object into the heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E newObject)</span> </span>&#123;</div><div class="line">        list.add(newObject); <span class="comment">// Append to the heap</span></div><div class="line">        <span class="keyword">int</span> currentIndex = list.size() - <span class="number">1</span>; <span class="comment">// The index of the last node</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (currentIndex &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> parentIndex = (currentIndex - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            <span class="comment">// Swap if the current object is greater than its parent</span></div><div class="line">            <span class="keyword">if</span> (list.get(currentIndex).compareTo(</div><div class="line">                    list.get(parentIndex)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                E temp = list.get(currentIndex);</div><div class="line">                list.set(currentIndex, list.get(parentIndex));</div><div class="line">                list.set(parentIndex, temp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// The tree is a heap now</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            currentIndex = parentIndex;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove the root from the heap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        E removeObject = list.get(<span class="number">0</span>);</div><div class="line">        list.set(<span class="number">0</span>, list.get(list.size() - <span class="number">1</span>));</div><div class="line">        list.remove(list.size() - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (currentIndex &lt; list.size()) &#123;</div><div class="line">            <span class="keyword">int</span> leftChildIndex = <span class="number">2</span> * currentIndex + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> rightChildIndex = <span class="number">2</span> * currentIndex + <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Find the maximum between two child</span></div><div class="line">            <span class="keyword">if</span> (leftChildIndex &gt;= list.size()) <span class="keyword">break</span>; <span class="comment">// The tree is a heap</span></div><div class="line">            <span class="keyword">int</span> maxIndex = leftChildIndex;</div><div class="line">            <span class="keyword">if</span> (rightChildIndex &lt; list.size()) &#123;</div><div class="line">                <span class="keyword">if</span> (list.get(maxIndex).compareTo(</div><div class="line">                        list.get(rightChildIndex)) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    maxIndex = rightChildIndex;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Swap if the current node is less than the maximum</span></div><div class="line">            <span class="keyword">if</span> (list.get(currentIndex).compareTo(</div><div class="line">                    list.get(maxIndex)) &lt; <span class="number">0</span>) &#123;</div><div class="line">                E temp = list.get(maxIndex);</div><div class="line">                list.set(maxIndex, list.get(currentIndex));</div><div class="line">                list.set(currentIndex, temp);</div><div class="line">                currentIndex = maxIndex;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// The tree is a heap</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> removeObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the number of nodes in the tree</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>堆在内部是使用数组线性表来表示的（第2行）。可以将它改为其他的数据结构，但是Heap类的合约保持不变。</p><p>方法add（E newObject）（第15~30行）将一个对象追加到树中，如果该对象大于它的父结点，就互换它们，此过程持续到该新对象成为根结点，或者新对象不大于它的父结点。</p><p>方法remove（）删除并返回根结点。为保持堆的特征，该方法将最后的对象移到根结点处，如果该对象小于它的较大的子结点，就互换它们。此过程持续到最后一个对象称为叶子结点，或者改对象不小于它的子结点。</p><h4 id="使用Heap类进行排序"><a href="#使用Heap类进行排序" class="headerlink" title="使用Heap类进行排序"></a>使用Heap类进行排序</h4><p>要使用堆对数组排序，应首先使用Heap类创建一个对象，使用add方法将所有元素添加到堆中，然后使用remove方法从堆中删除所有元素。以降序删除这些元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Heap sort method</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(E[] list)</span> </span>&#123;</div><div class="line">        <span class="comment">// Create a Heap of integers</span></div><div class="line">        Heap&lt;E&gt; heap = <span class="keyword">new</span> Heap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Add elements to the heap</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">            heap.add(list[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Remove elements from the heap</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            list[i] = heap.remove();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A test method</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer[] list = &#123;-<span class="number">44</span>, -<span class="number">5</span>, -<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">53</span>&#125;;</div><div class="line">        heapSort(list);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">            System.out.print(list[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对于堆排序&quot;&gt;&lt;a href=&quot;#对于堆排序&quot; class=&quot;headerlink&quot; title=&quot;对于堆排序&quot;&gt;&lt;/a&gt;对于堆排序&lt;/h2&gt;&lt;p&gt;首先堆排序的一些要点是，首先堆排序本身是使用二叉堆，而二叉堆本身是一个非常有意思的东西，首先它是一个完全二叉树，而二叉堆（binary heap）则是一颗具有以下属性的二叉树：
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>pgsql的总结</title>
    <link href="http://adamzeng.site/2018/08/16/pgsql%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://adamzeng.site/2018/08/16/pgsql的总结/</id>
    <published>2018-08-16T07:48:16.000Z</published>
    <updated>2018-08-17T04:41:12.277Z</updated>
    
    <content type="html"><![CDATA[<p>pgsql我最近所发现的一些重要的query方式，<a id="more"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column_name(s)</div><div class="line"><span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">LIMIT</span> <span class="built_in">number</span>;</div></pre></td></tr></table></figure><p>这个sql语句能够用来兼容Mysql与Pgsql。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> table_name;</div></pre></td></tr></table></figure><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-17%20%E4%B8%8B%E5%8D%881.57.17.png"></p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-17%20%E4%B8%8B%E5%8D%881.57.09.png"></p><p>关于nasa2这一组表的一个无法用natural join完成join操作的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ass1.astroNo <span class="keyword">as</span> Commander, ass2.astroNo <span class="keyword">as</span> Pilot, ass1.MissionNo </div><div class="line"><span class="keyword">from</span> NASA2_Assigned ass1, NASA2_Assigned ass2</div><div class="line"><span class="keyword">where</span> ass1.projectName = <span class="string">'Shuttle'</span> </div><div class="line">  <span class="keyword">AND</span> ass1.role = <span class="string">'Commander'</span> <span class="keyword">AND</span> ass2.role = <span class="string">'Pilot'</span></div><div class="line">  <span class="keyword">AND</span> ass1.MissionNo = ass2.MissionNo </div><div class="line">  <span class="keyword">AND</span> ass1.MissionNo <span class="keyword">LIKE</span> <span class="string">'STS-2%'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> ass1.missionNo;</div></pre></td></tr></table></figure><p>观察以上这一组sql查询，发现很多问题，首先它需要从同一列中分别选出不同的部分，这时需要from 同一个表设置为两个不同的名字</p><p>ass1 和ass2</p><p>此外由于是从projectname名为Shuttle中选出的项目，所以加上</p><p>where ass1.projectname = ‘Shuttle’</p><p>然后通过role的语句来筛选Commander与Pilot</p><p>and ass1.role = ‘Commander’ and ass2.role =’Pilot’</p><p>然后通过以下语句来join两个表</p><p>and ass1.missionno = ass2.missionno</p><p>然后使用like来筛选</p><p>and ass1.missionno like ‘STS-2%’</p><p>最后按照字母默认以missionno排序</p><p>order by ass1.missionno;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pgsql我最近所发现的一些重要的query方式，
    
    </summary>
    
      <category term="sql" scheme="http://adamzeng.site/categories/sql/"/>
    
    
      <category term="sql" scheme="http://adamzeng.site/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据库与ERD</title>
    <link href="http://adamzeng.site/2018/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EERD/"/>
    <id>http://adamzeng.site/2018/08/09/数据库与ERD/</id>
    <published>2018-08-09T11:33:15.000Z</published>
    <updated>2018-08-09T13:55:34.031Z</updated>
    
    <content type="html"><![CDATA[<h4 id="INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe"><a href="#INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe" class="headerlink" title="INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)"></a>INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)</h4><h4 id="VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16"><a href="#VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16" class="headerlink" title="VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);"></a>VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);<a id="more"></a></h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%889.38.53.png"></p><p>这一段SQL语句所想说明的是插入shr（table 名）VALUES括号中的数据到括号中的这些列中，如果没有括号，SQL就会认为你是按照默认的列的名称的顺序插入括号中的数据，一般建议shr后面指定插入的列名。</p><p>所以说</p><p>####INSERT INTO shr    VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);</p><h3 id="也是对的！！！"><a href="#也是对的！！！" class="headerlink" title="也是对的！！！"></a>也是对的！！！</h3><p>####entity在Entity Relationship Diagrams（ERD）中是什么东西就不介绍了，可以理解为在化成图就是一个盒子。就是thing或者table，很容易理解，往往一类东西就能够作为一个entity，比如Boy或者Girl，回想当时建表的时候Boy和Girl，还有它们所包含的attribute（也就是它们的属性），比如firstname，lastname，这些东西，往往是属性，而在entity当中，换句话说也就是table当中，最重要的就是主键（primary key），它是unique的，是识别table每一行的重要标记，就像uts每个学生的student ID号一样。可以想象其实我们的信息也被uts建立了一张table，其中student ID号就是主键。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png"></p><h4 id="这就是一个entity，名字叫share，里面有一票share-code，share-name-share-price-share-quantity…-blah-blah-blah，这些都是attribute。"><a href="#这就是一个entity，名字叫share，里面有一票share-code，share-name-share-price-share-quantity…-blah-blah-blah，这些都是attribute。" class="headerlink" title="这就是一个entity，名字叫share，里面有一票share code，share name, share price, share quantity…..blah blah blah，这些都是attribute。"></a>这就是一个entity，名字叫share，里面有一票share code，share name, share price, share quantity…..blah blah blah，这些都是attribute。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8810.01.05.png"></p><p>####变成表就是上面这么个东西。</p><h4 id="思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student-ID还是Tax-file-number当做我们的主键？（稍微想想这个问题？？？？）"><a href="#思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student-ID还是Tax-file-number当做我们的主键？（稍微想想这个问题？？？？）" class="headerlink" title="思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student ID还是Tax file number当做我们的主键？（稍微想想这个问题？？？？）"></a>思考一个情况，当我们造一个学生的数据库的时候，我们会把学生的Student ID还是Tax file number当做我们的主键？（稍微想想这个问题？？？？）</h4><h4 id="首先，每个学生都需要在学校注册，如果选择Tax-file-number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax-file-number显然是不合适的，student-ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。"><a href="#首先，每个学生都需要在学校注册，如果选择Tax-file-number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax-file-number显然是不合适的，student-ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。" class="headerlink" title="首先，每个学生都需要在学校注册，如果选择Tax file number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax file number显然是不合适的，student ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。"></a>首先，每个学生都需要在学校注册，如果选择Tax file number，难道学生没有税号我们就不让他们注册入学了吗？所以，使用tax file number显然是不合适的，student ID才是识别每个学生的最好的主键。（如果是你，你会把每个学生的信息中的哪个部分作为主键呢？）假如还有驾照号，woolworth会员号等等。</h4><h4 id="还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。"><a href="#还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。" class="headerlink" title="还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。"></a>还有就是思考一下，之前我们聊天聊到的关于Girl与Boy这两个表之间的关系，在数据库当中，因为你想要对一个事儿所包含的数据进行存储，肯定不止一张表，就像咱们之前看的Girl与Boy这两张表一样，它们不是孤立的，因为存这两张表的目的不是单纯地存它们，是为了看出点事来，看哪个boy和哪个girl之间有点意思。说白了这就是这两个表的目的。</h4><h4 id="那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign-key）。"><a href="#那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign-key）。" class="headerlink" title="那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign key）。"></a>那两张表怎么建立关系呢，让它们建立联系的就是外键（foreign key）。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8810.15.17.png"></p><h4 id="这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。"><a href="#这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。" class="headerlink" title="这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。"></a>这个图讲的非常清楚，Boy表中两个键，左边外键右边内键，Girl表中一个键，左边外键。</h4><h4 id="怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？"><a href="#怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？" class="headerlink" title="怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？"></a>怎么把它们两个连起来呢？很简单，观察，这个Bonnie人缘好啊，同时和两个男生Bob和Charlie约会，配对，也就是说一个girl可以对上两个boy，boy有点惨啊！！不过，也只能认命。那现在来看，为什么GirlNo，也就是Girl表中的主键可以做Boy表中的外键呢？因为你要把这两个表联系起来，但是一个girl可以对多个boy，你只能把GirlNo作为外键放在Boy中，有没有别的办法呢？没啥办法，不这样，难道把GirlNo放到Boy表中做主键吗？</h4><h4 id="更不可能，因为GirlNo在Boy中是有重复的，都1-2-2了，还能做主键吗？"><a href="#更不可能，因为GirlNo在Boy中是有重复的，都1-2-2了，还能做主键吗？" class="headerlink" title="更不可能，因为GirlNo在Boy中是有重复的，都1 2 2了，还能做主键吗？"></a>更不可能，因为GirlNo在Boy中是有重复的，都1 2 2了，还能做主键吗？</h4><p>###所以这两个表之间的关系是one-to-many，一对多（girl对boy），一个girl对多个boy，咱们看看连起来啥样。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.02.14.png"></p><h4 id="select-boyno-boyname-boymobile-girlname-girlmobile-from-boy-girl-wh"><a href="#select-boyno-boyname-boymobile-girlname-girlmobile-from-boy-girl-wh" class="headerlink" title="select boyno, boyname, boymobile, girlname, girlmobile from boy, girl wh"></a>select boyno, boyname, boymobile, girlname, girlmobile from boy, girl wh</h4><p>####ere boy.girlno = girl.girlno;</p><h3 id="显示出来之后一目了然，Bonnie真的很会社交！"><a href="#显示出来之后一目了然，Bonnie真的很会社交！" class="headerlink" title="显示出来之后一目了然，Bonnie真的很会社交！"></a>显示出来之后一目了然，Bonnie真的很会社交！</h3><h4 id="外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。"><a href="#外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。" class="headerlink" title="外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。"></a>外键的作用就是用来表示这种一对多的关系！！！！在boy中引入外键，能够把这种一对多表示出来。</h4><h4 id="引用完整性（referential-integrity）"><a href="#引用完整性（referential-integrity）" class="headerlink" title="引用完整性（referential integrity）"></a><strong>引用完整性（referential integrity）</strong></h4><p>###到底什么是引用完整性！是这么说的，一个外键只能是为null或者必须与一个主键关联起来。为什么呢？girlno在这里其实是一种引用，boy表引用了girl表中的girlno这个女生编号。如果说有girl未对应boy，将这个girlno显示在boy表中有什么意义呢，但是boy的某一行的外键可以是null，就是有些boy没人缘，导致没有girl配对，也是很正常的！</p><h4 id="这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。"><a href="#这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。" class="headerlink" title="这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。"></a>这个引用完整性还有个要注意的地方，就是如果要删除girl表中的某一条，比如说Bonnie这个万人迷，这个数据库不会同意，因为boy中的girlno有Bonnie的编号，如果Bonnie被删除了。那boy表也不完整了。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.18.34.png"></p><h4 id="我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。"><a href="#我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。" class="headerlink" title="我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。"></a>我看再看看Boy和Girl这两个表，这个图说的很清楚，Girl对于Boy是一对多，而且Girl是0或1匹配Boy的一或多。在此附上所有这些线的含义图。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.22.15.png" width="300px"></p><h4 id="最后再讲一个关于多对多的关系如何处理"><a href="#最后再讲一个关于多对多的关系如何处理" class="headerlink" title="最后再讲一个关于多对多的关系如何处理"></a>最后再讲一个关于多对多的关系如何处理</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.32.28.png"></p><h4 id="这种画法绝对不允许出现在作业中，不能画多对多！！！"><a href="#这种画法绝对不允许出现在作业中，不能画多对多！！！" class="headerlink" title="这种画法绝对不允许出现在作业中，不能画多对多！！！"></a>这种画法绝对不允许出现在作业中，不能画多对多！！！</h4><h3 id="应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。"><a href="#应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。" class="headerlink" title="应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。"></a>应该如何处理呢？一本书可以有很多作者，因为这个书可以几个作家一起写，一个作家可以写很多书。</h3><h4 id="通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况"><a href="#通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况" class="headerlink" title="通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况"></a>通常这么处理，增加一个表，叫AuthorBook，显示的是如下情况</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.36.31.png"></p><h4 id="我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite-primary-key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。"><a href="#我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite-primary-key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。" class="headerlink" title="我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite primary key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。"></a>我们可以创造一个表，这个表存储的是如下的情况，实际上这个表取了Author中的AuthorName与ISBN。但是这个表没有单个的主键，因为都是两列都有重复，这个时候引入咱们的第三个概念，复合主键（composite primary key），虽然这两列都有重复的，但是这两个值组合起来却是unique的，独一无二的！，你绝对找不出组合起来是一样的情况！。</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.39.16.png"></p><h4 id="而且这个东西巧妙地解决了两个表不能直接多对多的问题。"><a href="#而且这个东西巧妙地解决了两个表不能直接多对多的问题。" class="headerlink" title="而且这个东西巧妙地解决了两个表不能直接多对多的问题。"></a>而且这个东西巧妙地解决了两个表不能直接多对多的问题。</h4><h4 id="还有最后一个关于雇员的问题，先看下面的表"><a href="#还有最后一个关于雇员的问题，先看下面的表" class="headerlink" title="还有最后一个关于雇员的问题，先看下面的表"></a>还有最后一个关于雇员的问题，先看下面的表</h4><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-09%20%E4%B8%8B%E5%8D%8811.47.41.png"></p><h4 id="在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。"><a href="#在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。" class="headerlink" title="在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。"></a>在一个公司中有很多员工，这些员工都在上面那个employee表中，在这种表中，员工的信息都是后插入的，为什么呢？最先插入的永远都是老板，因为如果先插入员工，Boss这一栏如果插入666，但是这时候666还不在表中，这时候插入会出错，所以永远都是先插入老板。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe&quot;&gt;&lt;a href=&quot;#INSERT-INTO-shr-shrcode-shrfirm-shrprice-shrqty-shrdiv-shrpe&quot; class=&quot;headerlink&quot; title=&quot;INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)&quot;&gt;&lt;/a&gt;INSERT INTO shr    (shrcode,shrfirm,shrprice,shrqty,shrdiv,shrpe)&lt;/h4&gt;&lt;h4 id=&quot;VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16&quot;&gt;&lt;a href=&quot;#VALUES-‘FC’-’Freedonia-Copper’-27-5-10529-1-84-16&quot; class=&quot;headerlink&quot; title=&quot;VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);&quot;&gt;&lt;/a&gt;VALUES (‘FC’,’Freedonia Copper’,27.5,10529,1.84,16);
    
    </summary>
    
      <category term="数据库" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用大O符号来衡量算法效率</title>
    <link href="http://adamzeng.site/2018/08/07/%E4%BD%BF%E7%94%A8%E5%A4%A7O%E7%AC%A6%E5%8F%B7%E6%9D%A5%E8%A1%A1%E9%87%8F%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87/"/>
    <id>http://adamzeng.site/2018/08/07/使用大O符号来衡量算法效率/</id>
    <published>2018-08-07T10:02:18.000Z</published>
    <updated>2018-08-07T11:16:01.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。"><a href="#大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。" class="headerlink" title="大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。"></a>大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。</h3><p>假定两个算法执行相同的任务，比如查找（线性查找和二分查找），哪个算法更好？为了回答这个问题，我们可以实现这两个算法，并运行程序得到执行时间。但是这种方法存在以下两个问题：<a id="more"></a></p><p>1.首先，计算机上同时运行着许多任务，一个特定任务的执行时间是依赖于系统负荷的。</p><p>2.其次，执行时间依赖于特定的输入。例如，考虑线性查找和二分查找。如果要查找的元素恰巧是线性表中的第一个元素，那么线性查找回避二分查找更快找到该元素。</p><p>通过测量它们的执行时间来比较算法是比较困难的。为了克服这些问题，计算机科学家开发了一个独立于计算机和指定输入的理论方法来分析算法。该方法大致估计了有输入大小的改变而产生的影响。通过这个方法可以看到随着输入大小的增长算法执行时间增长得有多快，因此可以通过检查l两个算法的增长率（growth rate）来比较它们。</p><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p>考虑线性查找的问题。线性查找算法顺序比较数组中的元素与键，直到找到键或者数组已搜索完毕。如果该键不在数组中，那么对于一个大小为n的数组的大小需要n次比较。如果该键在数组中，那么平均需要n/2次比较。该算法的执行时间与数组的大小成正比。如果将数组大小加倍，那么比较次数也会加倍。该算法是呈线性增长的，增长率是n的数量级。计算机科学家使用大O符号（Big O notation）表示数量级。使用该符号，线性查找算法的复杂度就是O(n)，读为“n阶”。我们将时间复杂度为O(n)的算法称为线性算法，它体现为线性的增长率。</p><p>对于相同的输入大小，算法的执行时间可能会随着输入的不同而不同。导致最短执行时间的输入称为最佳情况输入（best-case input）。最佳情况分析和最差情况分析用来分析最佳情况输入和最差情况输入的算法（worst-case input）。最佳情况分析和最差情况分析用来分析最佳情况输入和最差情况输入的算法。最佳和最差情况分析都不具有代表性，但是最差情况分析却是非常有用的。我们可以确定的是自己的算法永远不会比最差情况还慢。平均情况分析（average-case analysis）试图在所有可能的相同大小的输入中确定平均时间。平均情况分析是比较理想的，但是很难完成，这是因为对于许多问题而言，要确定各种输入实例的相对概率和分布是相当困难的。由于最差情况分析比较容易完成，所以分析通常针对最差情况进行。</p><p>如果你几乎总是在线性表中查找一个已知道存在于其中的元素，那么线性查找算法在最差情况下需要n次比较，而在平均情况下需要n/2次比较。使用大O符号，这两种情况需要的时间都为O(n)。倍乘常量（1/2）可以忽略。算法分析的重点在于增长率，而倍乘常量对增长率没有影响。对于n/2或100n而言，增长率都和n一样，如表所示。因此，O(n) =O(n/2)=O(100n)。</p><table><thead><tr><th style="text-align:center">n  \ f(n)</th><th style="text-align:center">n</th><th style="text-align:center">n/2</th><th style="text-align:center">100n</th><th></th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">100</td><td style="text-align:center">50</td><td style="text-align:center">10000</td><td></td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">200</td><td style="text-align:center">100</td><td style="text-align:center">20000</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td>f(200)/f(100)</td></tr></tbody></table><p>考虑在包含n个元素的数组中找出最大数的算法。如果n为2，找到最大数需要一次比较；如果n为3，找到最大数需要两次比较。一般来说，在拥有n个元素的线性表中找到最大数需要n-1次比较。算法分析主要用于庞大的输入规模。如果输入规模较小，那么估计算法效率是没有意义的。随着n的增大，表达式n-1中的n就主导了复杂度。大O符号允许忽略非主导部分（例如，表达式n-1中的-1），并强调重要部分（例如，表达式n-1中的n）。因此，该算法的复杂度为O(n)。</p><p>大O标记估算一个算法与输入规模相关的执行时间。如果执行时间与输入规模无关，就称该算法耗费了常量时间（constant time）,用符号O(1)表示。例如，在数组中从给定下标处获取元素的方法耗费的时间即为常量时间，这是因为该时间不会随着数组规模的增大而增长。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot;&gt;&lt;a href=&quot;#大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot; class=&quot;headerlink&quot; title=&quot;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&quot;&gt;&lt;/a&gt;大O符号标记可以基于输入的大小得到一种衡量算法的时间复杂度的函数。可以忽略函数中的倍乘常量和非主导项。&lt;/h3&gt;&lt;p&gt;假定两个算法执行相同的任务，比如查找（线性查找和二分查找），哪个算法更好？为了回答这个问题，我们可以实现这两个算法，并运行程序得到执行时间。但是这种方法存在以下两个问题：
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的同步合集</title>
    <link href="http://adamzeng.site/2018/08/03/Java%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%90%88%E9%9B%86/"/>
    <id>http://adamzeng.site/2018/08/03/Java中的同步合集/</id>
    <published>2018-08-03T05:50:37.000Z</published>
    <updated>2018-08-03T06:24:08.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。"><a href="#在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。" class="headerlink" title="在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。"></a>在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。</h2><p>同步合集可以很安全地被多个线程并发地访问和修改。</p><p>开启Task1线程不断向同步的HashSet中插入数字，开启Task2线程不断的迭代显示Task1中同步HashSet的中的数字。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentModificationException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set hashSet = Collections.synchronizedSet(<span class="keyword">new</span> Hashset());</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ConcurrentModificationException() &#123;</div><div class="line">       ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">        executor.execute(<span class="keyword">new</span> Task1);</div><div class="line">        executor.execute(<span class="keyword">new</span> Task2);</div><div class="line">        executor.shutdown;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Task1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</div><div class="line">                System.out.println(<span class="string">"Thread1"</span>);</div><div class="line">                hashSet.add(<span class="keyword">new</span> Integer(i));</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</div><div class="line">                    ex.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Task2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"Thread2"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                    ex.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">synchronized</span> (hashSet) &#123;</div><div class="line">                    Iterator iterator = hashSet.iterator;</div><div class="line">                    <span class="keyword">while</span>(iterator.hasNext()) &#123;</div><div class="line">                        System.out.println(iterator.next());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot;&gt;&lt;a href=&quot;#在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot; class=&quot;headerlink&quot; title=&quot;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&quot;&gt;&lt;/a&gt;在Java当中的合集框架中的类不是线程安全的；也就是说，如果它们被多个线程访问和更新，它们的内容可能遭到破坏。可以通过锁定合集或者同步合集来保护合集中的数据。&lt;/h2&gt;&lt;p&gt;同步合集可以很安全地被多个线程并发地访问和修改。&lt;/p&gt;
&lt;p&gt;开启Task1线程不断向同步的HashSet中插入数字，开启Task2线程不断的迭代显示Task1中同步HashSet的中的数字。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Switch-Forwarding-Methods</title>
    <link href="http://adamzeng.site/2018/08/01/Switch-Forwarding-Methods/"/>
    <id>http://adamzeng.site/2018/08/01/Switch-Forwarding-Methods/</id>
    <published>2018-08-01T04:29:28.000Z</published>
    <updated>2018-08-01T04:29:28.405Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>类设计原则</title>
    <link href="http://adamzeng.site/2018/05/08/%E7%B1%BB%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://adamzeng.site/2018/05/08/类设计原则/</id>
    <published>2018-05-08T02:33:59.000Z</published>
    <updated>2018-05-08T14:57:30.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的设计原则"><a href="#类的设计原则" class="headerlink" title="类的设计原则"></a>类的设计原则</h1><h4 id="1-内聚性"><a href="#1-内聚性" class="headerlink" title="1.内聚性"></a>1.内聚性</h4><p>类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，支持一个一致的目的。例如：可以设计一个类用于学生，但不应该将学生与教职工组合在同一个类中，因为学生和教职工是不同的实体。</p><p>如果一个实体负担太多的职责，就应该按各自的职责分成几个类。例如:String类、StringBuffer类和StringBuilder类都用于处理字符串，但是它们的职责不同。String类处理不可变字符串，StringBuilder类创建可变字符串，StringBuffer与StringBuilder类似，只是StringBuffer类还包含更行字符串的同步方法。<a id="more"></a></p><h4 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2.一致性"></a>2.一致性</h4><p>遵循标准Java程序设计风格和命名习惯。为类、数据域和方法选取具有信息的名字。通常的风格是将数据声明置于构造方法之前，并且将构造方法置于方法之前。</p><p>选择名字要保持一致，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。例如：length()方法返回String，StringBuilder和StringBuffer的大小。如果在这些类中给这个方法用不同的名字就不一致了。</p><p>一般来说，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。如果一个类不支持无参的构造方法，要用文档写出原因。如果没有显式定义构造方法，即假定有一个空方法体的公共默认无参构造方法。</p><p>如果不想让用户创建类的对象，可以在类中声明一个私有构造方法，Math类就是如此。</p><h4 id="3-封装性"><a href="#3-封装性" class="headerlink" title="3.封装性"></a>3.封装性</h4><p>一个类应该使用private修饰符隐藏其数据，以免用户直接访问它。这使得类更易于维护。</p><p>只在希望数据域可读的情况下，才提供get方法；也只在希望数据域可更新的情况下，才提供set方法。例如：Rational类为numerator和denominator提供了get方法，但是没有提供set方法，因为Rational对象是不可改变的。</p><h4 id="4-清晰性"><a href="#4-清晰性" class="headerlink" title="4.清晰性"></a>4.清晰性</h4><p>为使设计清晰，内聚性、一致性和封装性都是很好的设计原则。除此之外，类应该有一个很清晰的合约，从而易于解释和理解。</p><p>用户可以以各种不同组合、顺序，以及在各种环境中结合使用多个类。因此，在设计一个类时，这个类不应该限制用户如何以及何时使用该类；以一种方式设计属性，以容许用户按值的任何顺序和任何组合来设置；设计方法应该使得实现的功能与它们出现的顺序无关。例如：Loan类包含属性loanAmount、numberOfYears和annualInterestRate，这些属性的值可以按任何顺序来设置。</p><p>方法应在不产生混淆的情况下进行直观定义。例如：String类中的substring(int beginIndex, int endIndex)方法就有一点混乱。这个方法返回从beginIndex到endIndex-1而不是endIndex的子串。该方法应该返回从beginIndex到endIndex的子字符串，从而更加直观。</p><p>不应该声明一个来自其他数据域的数据域。例如，下面的Person类有两个数据域：birthDate和age。由于age可以从birthDate导出，所以age不应该声明为数据域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> java.util.Date birthDate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5-完整性"><a href="#5-完整性" class="headerlink" title="5.完整性"></a>5.完整性</h4><p>类是为许多不同用户的使用而涉及的。为了能在一个广泛的应用中使用，一个类应该通过属性和方法提供多种方案以适应用户的不同需求。例如：为满足不同的应用需求，String类包含了40多种很实用的方法。</p><h4 id="6-实例和静态"><a href="#6-实例和静态" class="headerlink" title="6.实例和静态"></a>6.实例和静态</h4><p>依赖于类的具体实例的变量或方法必须是一个实例变量或方法。如果一个变量被类的所有实例所共享，那就应该将它声明为静态的。例如：在程序清单9-8中，CircleWithPrivateDataFields中的变量numberOfObjects被CircleWithPrivateDataFields类的所有对象共享。因此，它被声明为静态的。如果方法不依赖于某个具体的实例，那就应该将它声明为静态方法。例如CircleWithPrivateDataFields中的getNumberOfObjects()方法没有绑定到任何具体实例，因此，它被声明为静态方法。</p><p>应该总是使用类名（而不是引用变量）引用静态变量和方法，以增强可读性并避免错误。</p><p>不要从构造方法中传入参数来初始化静态数据域。最好使用set方法改变静态数据域。图a中的类最好用图b中的代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> t1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> t2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeThing</span><span class="params">(<span class="keyword">int</span> t1, <span class="keyword">int</span> t2)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> t1;</div><div class="line">    privte <span class="keyword">static</span> <span class="keyword">int</span> t2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeThing</span><span class="params">(<span class="keyword">int</span> t1)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setT2</span><span class="params">(<span class="keyword">int</span> t2)</span> </span>&#123;</div><div class="line">        SomeThing.t2 = t2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实例和静态是面向对象程序设计不可或缺的部分。数据域或方法要么是实例的，要么是静态的。不要错误地忽视了静态数据域或方法。常见的设计错误是将本应该声明为静态方法的方法声明为实例方法。例如：用于计算n的阶乘的factorial(int n)方法应该定义为静态方法的，因为它不依赖于任何具体实例。</p><p>构造方法永远都是实例方法，因为它是用来创建具体实例的。一个静态变量或方法可以从实例方法中调用，但是不能从静态方法中调用实例变量或方法。</p><h4 id="7-继承与聚合"><a href="#7-继承与聚合" class="headerlink" title="7.继承与聚合"></a>7.继承与聚合</h4><p>继承和聚合之间的差异，就是is-a（是一种）和has-a（具有）之间的关系。例如，苹果是一种水果；因此可以使用继承来对Apple类和Fruit类之间的关系进行建模。人具有名字；因此，可以使用聚合来对Person类和Name类之间的关系建模。</p><h4 id="8-接口与抽象类"><a href="#8-接口与抽象类" class="headerlink" title="8.接口与抽象类"></a>8.接口与抽象类</h4><p>接口与抽象类都可以用于为对象指定共同的行为。如何决定是采用接口还是类呢？通常，比较强的is-a（是一种）关系清晰地描述了父子关系，应该采用类来建模。例如，因为桔子是一种水果，他们的关系就应该采用类的继承关系来建模。弱的is-a关系，也称为is-kind-of（是一类）关系，表明一个对象拥有某种属性。弱的is-a关系可以使用接口建模。例如，所有的字符串都是可以比较的，因此String类实现了Comparable接口。圆或者矩形是一个几何对象，因此Circle可以设计为GeometricObject的子类。圆有不同的半径，并且可以基于半径进行比较，因此Circle可以实现Comparable接口。</p><p>接口比抽象类更加灵活，因为一个子类只能继承一个父类，但是却可以实现任意个数的接口。然而，接口不能具有的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类的设计原则&quot;&gt;&lt;a href=&quot;#类的设计原则&quot; class=&quot;headerlink&quot; title=&quot;类的设计原则&quot;&gt;&lt;/a&gt;类的设计原则&lt;/h1&gt;&lt;h4 id=&quot;1-内聚性&quot;&gt;&lt;a href=&quot;#1-内聚性&quot; class=&quot;headerlink&quot; title=&quot;1.内聚性&quot;&gt;&lt;/a&gt;1.内聚性&lt;/h4&gt;&lt;p&gt;类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，支持一个一致的目的。例如：可以设计一个类用于学生，但不应该将学生与教职工组合在同一个类中，因为学生和教职工是不同的实体。&lt;/p&gt;
&lt;p&gt;如果一个实体负担太多的职责，就应该按各自的职责分成几个类。例如:String类、StringBuffer类和StringBuilder类都用于处理字符串，但是它们的职责不同。String类处理不可变字符串，StringBuilder类创建可变字符串，StringBuffer与StringBuilder类似，只是StringBuffer类还包含更行字符串的同步方法。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>八皇后</title>
    <link href="http://adamzeng.site/2018/03/08/%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <id>http://adamzeng.site/2018/03/08/八皇后/</id>
    <published>2018-03-08T09:53:04.000Z</published>
    <updated>2018-03-09T07:11:19.005Z</updated>
    
    <content type="html"><![CDATA[<p>首先，可归纳问题的条件为，八皇后之间需要满足：</p><ol><li>不在同一行上。</li><li>不在同一列上。</li><li>不在同一斜线上。</li><li>不在同一反斜线上。<a id="more"></a></li></ol><p>这为我们提供了一种遍历的思路，我们可以逐行或者逐列来进行可行摆放方案的遍历，每一行（或列）遍历出一个符合条件的位置，接着就到下一行或列遍历下一个棋子的合适位置，这种遍历思路可以保证我们遍历过程中有一个条件是绝对符合的—就是下一个棋子的摆放位置与前面的棋子不在同一行（或列）。接下来，我们只要判断当前当前位置是否还符合其他条件，如果符合，就遍历下一行（或列）所有位置，看看是否继续有符合条件的位置，以此类推，如果某一行（或列）的所有位置都不合适，就返回上一行（或列）继续该行（或列）的其他位置遍历，当我们顺利遍历到最后一行（或列），且有符合条件的位置时，就是一个可行的八皇后摆放方案，累加一次八皇后可行方案的合数，然后继续遍历该行其他位置是否有合适的，如果没有，则返回上一行，遍历该行其他位置，依此下去。这样一个过程下来，我们就可以得出所有符合条件的八皇后摆放方案了。这是一个深度优先遍历的过程，同时也是经典的递归思路。</p><p>接下来，我们以逐列遍历，具体到代码，进一步说明。首先，从第一列开始找第一颗棋子的合适的位置后，就开始到下一列考虑下一个合适的位置，此时，第二列的第一行及第二行显然就不能放第二颗棋子了，因为其与第一个棋子一个同在一行，一个同在一条斜线上，第二列第三行成为第二列第一个合适的位置，因此类推，第三列的第5行又会是一个合适位置，这个过程中，我们注意到，每一列的合适位置都是受到前面几列的位置所影响，归纳如下：</p><p>假设前面一列的棋子放在第3行，那当前列不能放的位置就一定是3行，2行，4行。因为如果放在这三行上就分别跟前一列的棋子同在一行、同在斜线、同在反斜线上，不符合我们的要求。现在我们用cols数组来表示8个列棋子所放的行数，数组下标从0开始，其中数组下标表示列数，数组的元素值该列棋子所在行数，当前列为N（N&gt;=0,N&lt;8),即cols[N-1]=3,则有：</p><p>col[n] != col[n-1] (=3,表示不在同一行)</p><p>cols[N] != cols[n-1] -1 (=3-1=2,表示不在同一斜线上)</p><p>cols[N] != cols[N-1] +1(=3+1,表示不在同一反斜线上)</p><p>这里我们注意到，如果N-2列存在的话，那么我们还要考虑当前列N不与N-2列的棋子同行，同斜线，同反斜线。把当前列N的前面的某一列设为m，则m的所有取值为{m&gt;0,m&lt;N}的集合，故又可在上面式子的基础，归纳为如下：</p><p>cols[N] !=cols[m] (与第m列的棋子不在同一行)</p><p>cols[N] != cols[m] -(N-m)(&gt;=0,第m列的棋子不在同一斜线上)</p><p>cols[N] != cols[m] +( N-m) (&lt;8-1,与第m列的棋子不在同一反斜线上)</p><p>具体到代码，很显然，取m的所有值只需要一句循环，同时我们为每一列定义一个长度为8的布尔数组row[],下标同样是从0开始，我们规定当row[i]=true时，表示该列第行不能放棋子。这样我们就能写成下列程序段了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span>[] rows = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;N;i++) &#123;</div><div class="line">  rows[cols[m]]=<span class="keyword">true</span>; <span class="comment">// 当前列N的棋子不能放在前面列m的棋子所在行</span></div><div class="line">  </div><div class="line">  <span class="keyword">int</span> d =N-m;</div><div class="line">  </div><div class="line"> <span class="comment">// 该句用于设置当前列N的棋子不能放在前面列m的棋子的斜线上</span></div><div class="line">  <span class="keyword">if</span> (cols-d&gt;=<span class="number">0</span>) rows[cols-d]=<span class="keyword">true</span>;</div><div class="line">  </div><div class="line"> <span class="comment">// 该句用于设置当前列N的棋子不能放在前面列m的棋子的反斜线上</span></div><div class="line">  <span class="keyword">if</span>(cols+d&lt;=<span class="number">8</span>-<span class="number">1</span>) rows[cols+d]=<span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，可归纳问题的条件为，八皇后之间需要满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不在同一行上。&lt;/li&gt;
&lt;li&gt;不在同一列上。&lt;/li&gt;
&lt;li&gt;不在同一斜线上。&lt;/li&gt;
&lt;li&gt;不在同一反斜线上。
    
    </summary>
    
      <category term="Java" scheme="http://adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://adamzeng.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Group by</title>
    <link href="http://adamzeng.site/2018/01/09/Group-by/"/>
    <id>http://adamzeng.site/2018/01/09/Group-by/</id>
    <published>2018-01-09T05:43:04.000Z</published>
    <updated>2018-01-09T08:43:26.099Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pandas Idioms</title>
    <link href="http://adamzeng.site/2018/01/09/Pandas-Idioms/"/>
    <id>http://adamzeng.site/2018/01/09/Pandas-Idioms/</id>
    <published>2018-01-09T04:24:13.000Z</published>
    <updated>2018-01-09T08:42:07.120Z</updated>
    
    <content type="html"><![CDATA[<p>Python程序设计师通常认为在程序语言中，可以使用多种方法来解决一个特定问题。但是，有些是比其他的更合适。最好的解决方案被称为惯用的Python，有很多很好的例子在Stack Overflow和网站上。<a id="more"></a></p><p>惯用的解决方案通常是具有高性能和高可读性。这并不一定是真的。如同某种Python的子语言，Pandas有自己的一套惯用语。我们已经提到了其中一些，例如尽可能使用向量化，和不适用反复运算回圈，如果你不需要。几位开发人员和用户在Pandas社区内，对这些惯用语称为Pandorable。我认为这是一个非常好的术语。所以，我想和你分享几个关键特色，如何可以使您的程序pandorable。</p><p>其中第一个称为方法链接（method chaining）。我们以前看到过，当您查询DataFrames时，您可以将pandas的程序调用链接在一起。例如，如果要根据项县名的索引来选择行（row）。然后你只想要像Total Population一样的，某些列（column），你可以编写一个查询，如”df.loc[“Washtenaw”].[“Total Population”]”这是一种链接形式，称为链式索引（chain indexing）。这通常是一个糟糕的做法。因为pandas可能会返回DataFrame的副本或视图。根据基础的Numpy程序库。在他对pandas惯用语的描述，模式开发人员Tom Osberger为此说了一个经验法则。如果你看到背靠背的方括号。那么您应该仔细想想，如果你想做链式索引。我认为你这是一个很好的程序探索或反模式。</p><p>方法链接，然而，有点不同。方法链接的一般思想是，每个方法对某物件，都会返回参考（reference）该物件。这样做的好处是，您可以将许多不同操作在一个DataFrame，集中在一行或至少一个程序语句中。这是pandas中的两种程序的例子，使用我们的人口普查数据。第一个是pandorable方式，用方法链接编写的程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(df.where(df[<span class="string">'SUMLEV'</span>] == <span class="number">50</span>)</div><div class="line">     .dropna()</div><div class="line">     .set_index([<span class="string">'STNAME'</span>,<span class="string">'CTYNAME'</span>])</div><div class="line">     .rename(columns=&#123;<span class="string">'ESTIMATESBASE2010'</span>:<span class="string">'Estiamtes Base 2010'</span>&#125;))</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(df.drop(df[df[<span class="string">'Quantity'</span>] == <span class="number">0</span>].index).rename(columns=&#123;<span class="string">'Weight'</span>: <span class="string">'Weight (oz.)'</span>&#125;))</div></pre></td></tr></table></figure><p>现在，任何好的惯用语的关键是，要理解它不帮你的时候。在这种情况下，你可以实际量这两种方法时间的和看到后一种方法是更快。所以，这是一个典型的时间-可读性折中的例子。</p><h3 id="Python中的map"><a href="#Python中的map" class="headerlink" title="Python中的map"></a>Python中的map</h3><p>它是语言中函数式编程的基础。当你想在Python中使用map时，你传入一些你想要调用的函数，一些可以反复迭的物件，像一个列表，你要这函数运用在上面的。结果是对列表中的每个项目运用这个函数，其输出是，所有函数执行的结果列表。</p><p>Pandas有一个类似的功能，名为applymap，在applymap中，您提供了一些应该对DataFrame的每个单元格进行操作的函数，资料帧，并返回集合本身就是一个资料帧。我认为applymap是好的，但实际上很少使用它。相反，我发现自己经常希望映射所有的行 资料帧。pandas有一个我在这里经常使用的功能，称为apply。让我们看看另一个例子。</p><p>只返回一个Series，只有两列min与max。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_max</span><span class="params">(row)</span>:</span></div><div class="line">    data = row[[<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2015'</span>]]</div><div class="line">    <span class="keyword">return</span> pd.Series(&#123;<span class="string">'min'</span>: np.min(data), <span class="string">'max'</span>: np.max(data)&#125;)</div><div class="line">  </div><div class="line">df.apply(min_max, axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>重新设两列，计算这五列数据中的最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_max</span><span class="params">(row)</span>:</span></div><div class="line">    data=row[[<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">             <span class="string">'POPESTIMATE2015'</span>]]</div><div class="line">    row[<span class="string">'max'</span>]=np.max(data)</div><div class="line">    row[<span class="string">'min'</span>]=np.min(data)</div><div class="line">    <span class="keyword">return</span> row</div><div class="line"></div><div class="line">df.apply(min_max,axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>使用lambda方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rows = [<span class="string">'POPESTIMATE2010'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">        <span class="string">'POPESTIMATE2015'</span>]</div><div class="line">df.apply(<span class="keyword">lambda</span> x: np.max(x[rows]),axis=<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python程序设计师通常认为在程序语言中，可以使用多种方法来解决一个特定问题。但是，有些是比其他的更合适。最好的解决方案被称为惯用的Python，有很多很好的例子在Stack Overflow和网站上。
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之四</title>
    <link href="http://adamzeng.site/2018/01/08/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B/"/>
    <id>http://adamzeng.site/2018/01/08/数据分析之四/</id>
    <published>2018-01-08T09:17:07.000Z</published>
    <updated>2018-01-09T07:22:54.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Merging-DataFrames"><a href="#Merging-DataFrames" class="headerlink" title="Merging DataFrames"></a>Merging DataFrames</h3><p>上周，我们介绍了Pandas数据处理和分析的程序库。我们看到，是实际上两个非常相似的核心数据结构，一维的列表（series）物件和二维的数据框<a id="more"></a>（DataFrame）物件。查询这两个数据结构以几种不同的方式完成，例如使用iloc或loc属性进行对行（row）的查询，或者使用方括号在物件本身进行对于列（column）的查询。最重要的是，我们看到一个可以查询DataFrame和series物件通过布林遮蔽（boolean masking）。布林遮蔽是一种强大的过滤方法，它允许我们使用广播来确定在我们的分析中应该保留哪些数据。</p><p>在本周的讲课中，我们将详细介绍如何操作DataFrame。我们将探讨如何使用GroupBy和Apply来减少和处理数据，以及如何将多个文件中的数据集合在一起。</p><p>我们还将讨论pandas一些有用的功能，对传统统计分析和机器学习。我们从如何合并数据集开始吧。我们已经看到如何将新数据添加到现有的DataFrame中。只需使用带有新列名称的方括号运算符，只要索引被共用，数据就添加了。如果没有共享索引，并传入一个标量值，那么记住一个纯量只是一个整数或一个字串。添加在列的新值，是以纯量作为预设值。如果我们想为每一行分配一个不同的值呢？那么它变得更棘手。如果我们可以将值，写死程序到列表中，那么pandas将解拆解它们并将它们分配给行。但是，如果我们的列表不够长，那么我们不能这样做，因为pandas不知道丢失的值应该去哪里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">df=pd.DataFrame([&#123;<span class="string">'Name'</span> : <span class="string">'Chris'</span>, <span class="string">'Item Purchased'</span>: <span class="string">'Sponge'</span>,<span class="string">'Cost'</span>:<span class="number">22.50</span>&#125;,</div><div class="line">                &#123;<span class="string">'Name'</span>:<span class="string">'Keyvyn'</span>,<span class="string">'Item Purchased'</span>: <span class="string">'Kitty Litter'</span>,<span class="string">'Cost'</span>:<span class="number">2.50</span>&#125;,</div><div class="line">                &#123;<span class="string">'Name'</span>:<span class="string">'Filip'</span>,<span class="string">'Item Purchased'</span>:<span class="string">'Spoon'</span>,<span class="string">'Cost'</span>:<span class="number">5.00</span>&#125;],</div><div class="line">               index=[<span class="string">'Store 1'</span>,<span class="string">'Store 1'</span>,<span class="string">'Store 2'</span>])</div><div class="line">df</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CostItem PurchasedName</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>SpongeChris</div><div class="line">Store <span class="number">1</span><span class="number">2.5</span>Kitty LitterKeyvyn</div><div class="line">Store <span class="number">2</span><span class="number">5.0</span>SpoonFilip</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'data'</span>]=[<span class="string">'December 1'</span>,<span class="string">'January'</span>,<span class="string">'mid-May'</span>]</div><div class="line">df</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CostItem PurchasedNamedata</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>SpongeChrisDecember <span class="number">1</span></div><div class="line">Store <span class="number">1</span><span class="number">2.5</span>Kitty LitterKeyvynJanuary</div><div class="line">Store <span class="number">2</span><span class="number">5.0</span>SpoonFilipmid-May</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Delivered'</span>]=<span class="keyword">True</span></div><div class="line">df</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CostItem PurchasedNamedataDelivered</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>SpongeChrisDecember <span class="number">1</span><span class="keyword">True</span></div><div class="line">Store <span class="number">1</span><span class="number">2.5</span>Kitty LitterKeyvynJanuary<span class="keyword">True</span></div><div class="line">Store <span class="number">2</span><span class="number">5.0</span>SpoonFilipmid-May<span class="keyword">True</span></div></pre></td></tr></table></figure><p>当我们只添加几个项目时，会出现问题。为了使其工作，我们必须为pandas提供足够长的DataFrame的列表，以便可以填充每一行。这意味着我们必须自己输入none值。如果我们每行都有一个独特的索引，那么我们可以将新的列标识分配给该系列。例如，如果我们在此范例中重置索引，因此DataFrame索引标记为0到2，那么我们使用这些标记创建一个新的系列，我们可引用它。我们得到的结果是我们预期的。这种方法的好方面是，我们可以忽略项目中我们不知道的，Pandas会为我们放进丢失值。所以这是一个非常好的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Feedback'</span>]=[<span class="string">'Positive'</span>,<span class="keyword">None</span>,<span class="string">'Negative'</span>]</div><div class="line">df</div><div class="line"></div><div class="line">CostItem PurchasedNamedataDeliveredFeedback</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>SpongeChrisDecember <span class="number">1</span><span class="keyword">True</span>Positive</div><div class="line">Store <span class="number">1</span><span class="number">2.5</span>Kitty LitterKeyvynJanuary<span class="keyword">True</span><span class="keyword">None</span></div><div class="line">Store <span class="number">2</span><span class="number">5.0</span>SpoonFilipmid-May<span class="keyword">True</span>Negative</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">adf=df.reset_index()</div><div class="line">adf[<span class="string">'Date'</span>]=pd.Series(&#123;<span class="number">0</span>:<span class="string">'December 1'</span>,<span class="number">2</span>:<span class="string">'mid_May'</span>&#125;)</div><div class="line">adf</div><div class="line"></div><div class="line">indexCostItem PurchasedNamedataDeliveredFeedbackDate</div><div class="line"><span class="number">0</span>Store <span class="number">1</span><span class="number">22.5</span>SpongeChrisDecember <span class="number">1</span><span class="keyword">True</span>PositiveDecember <span class="number">1</span></div><div class="line"><span class="number">1</span>Store <span class="number">1</span><span class="number">2.5</span>Kitty LitterKeyvynJanuary<span class="keyword">True</span><span class="keyword">None</span>NaN</div><div class="line"><span class="number">2</span>Store <span class="number">2</span><span class="number">5.0</span>SpoonFilipmid-May<span class="keyword">True</span>Negativemid_May</div></pre></td></tr></table></figure><p>更常见的是，我们想要结合两个较大的DataFrame在一起，这是一个比较复杂的。在我们跳入程序之前，我们需要解决一点关联理论，并设定一些语言的惯例。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-08%20%E4%B8%8B%E5%8D%888.52.55.png" alt="image"></p><p>这是韦恩图。韦恩图通常用于显示集合的关系。例如在左边圆圈的人口是一所大学的学生。在右边圈的人口是一所大学的工作人员。中间的重叠地区是那些也是学生也是工作人员的人。我们可以将这两个人群视为个别的DataFrames中的索引，可能有Person Name的标识。当我们想结合DataFrames时，我们有一些选择。首先，如果我们想要所有人的名单，无论 他们是工作人员还是学生，以及获得所有他们的信息呢？在数据库术语中，这称为完整的外连接（full outer join)。</p><p>在集合中被称为union，在韦恩图中，它代表了任何一个圈子的每个人。很可能，我们只要那些我们拥有最多资料的人，那些既是工作人员又是学生的人。在数据库术语中，这称为内连接（inner join）。或者在集合理论中，交集（intersection）。这在韦恩图中被表示为重叠部分在每个圈中。好的，让我们来看一个我们如何在Pandas中做这个的例子，在那里我们将使用merge函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">staff_df=pd.DataFrame([&#123;<span class="string">'Name'</span>:<span class="string">'Kelly'</span>,<span class="string">'Role'</span>:<span class="string">'Director of HR'</span>&#125;,</div><div class="line">                      &#123;<span class="string">'Name'</span>:<span class="string">'Sally'</span>,<span class="string">'Role'</span>:<span class="string">'Course liaison'</span>&#125;,</div><div class="line">                      &#123;<span class="string">'Name'</span>:<span class="string">'James'</span>,<span class="string">'Role'</span>:<span class="string">'Grader'</span>&#125;])</div><div class="line">staff_df=staff_df.set_index(<span class="string">'Name'</span>)</div><div class="line">student_df=pd.DataFrame([&#123;<span class="string">'Name'</span>:<span class="string">'James'</span>,<span class="string">'School'</span>:<span class="string">'Business'</span>&#125;,</div><div class="line">                        &#123;<span class="string">'Name'</span>:<span class="string">'Mike'</span>,<span class="string">'School'</span>:<span class="string">'Law'</span>&#125;,</div><div class="line">                        &#123;<span class="string">'Name'</span>:<span class="string">'Sally'</span>,<span class="string">'School'</span>:<span class="string">'Engineering'</span>&#125;])</div><div class="line">student_df=student_df.set_index(<span class="string">'Name'</span>)</div><div class="line"></div><div class="line">print(staff_df)</div><div class="line">print()</div><div class="line">print(student_df)</div><div class="line"></div><div class="line">                Role</div><div class="line">Name                 </div><div class="line">Kelly  Director of HR</div><div class="line">Sally  Course liaison</div><div class="line">James          Grader</div><div class="line"></div><div class="line">            School</div><div class="line">Name              </div><div class="line">James     Business</div><div class="line">Mike           Law</div><div class="line">Sally  Engineering</div></pre></td></tr></table></figure><p>如果我们想要这些的union，我们将调用merge，传入在左边的DataFrame和在右边的DataFrame，并且告诉merge我们想要使用外连接（outer join）。我们告诉merge，我们要用左索引和右索引作为结合列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pd.merge(staff_df,student_df,how=<span class="string">'outer'</span>,left_index=<span class="keyword">True</span>,right_index=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">RoleSchool</div><div class="line">Name</div><div class="line">JamesGraderBusiness</div><div class="line">KellyDirector of HRNaN</div><div class="line">MikeNaNLaw</div><div class="line">SallyCourse liaisonEngineering</div></pre></td></tr></table></figure><p>我们在结果的DataFrame中看到每个人都被列出。而且由于Mike没有任何role，而John没有School，那些单元被列为缺失值（NaN)。如果我们想要得到intersection，就是那些也是员工的学生，我们可以将how属性设置为inner。而我们设置的结果DataFrame只有James和Sally。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pd.merge(staff_df,student_df,how=<span class="string">'inner'</span>,left_index=<span class="keyword">True</span>,right_index=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">RoleSchool</div><div class="line">Name</div><div class="line">JamesGraderBusiness</div><div class="line">SallyCourse liaisonEngineering</div></pre></td></tr></table></figure><p>现在，当合并DataFrames时，还有另外两个常见的用例。两个例子都是我们称之为集合加法（set addition）。第一个是当我们想要得到所有员工的名单，不管他们是否是学生。但如果他们是学生，我们想要获得他们的学生细节。为此，我们将使用使用左连接（left join）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pd.merge(staff_df,student_df,how=<span class="string">'left'</span>,left_index=<span class="keyword">True</span>,right_index=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">RoleSchool</div><div class="line">Name</div><div class="line">KellyDirector of HRNaN</div><div class="line">SallyCourse liaisonEngineering</div><div class="line">JamesGraderBusiness</div></pre></td></tr></table></figure><p>你可能猜测到接下来会是什么。我们想要一个所有学生和他们的角色的列表，如果他们也是工作人员。为此，我们将使用右连接（right join）。合并方法有一些其他有趣的参数。首先，您不需要使用索引来加入，也可以使用列。这是一个例子。这里有个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">staff_df=pd.DataFrame([&#123;<span class="string">'Name'</span>:<span class="string">'Kelly'</span>,<span class="string">'Role'</span>:<span class="string">'Director of HR'</span>,<span class="string">'Location'</span>:<span class="string">'State Street'</span>&#125;,</div><div class="line">                      &#123;<span class="string">'Name'</span>:<span class="string">'Sally'</span>,<span class="string">'Role'</span>:<span class="string">'Course liaison'</span>,<span class="string">'Location'</span>:<span class="string">'Washington Avenue'</span>&#125;,</div><div class="line">                      &#123;<span class="string">'Name'</span>:<span class="string">'James'</span>,<span class="string">'Role'</span>:<span class="string">'Grader'</span>,<span class="string">'Location'</span>:<span class="string">'Washington Avenue'</span>&#125;])</div><div class="line">student_df=pd.DataFrame([&#123;<span class="string">'Name'</span>:<span class="string">'James'</span>,<span class="string">'School'</span>:<span class="string">'Bussiness'</span>,<span class="string">'Location'</span>:<span class="string">'1024 Billiard Avenue'</span>&#125;,</div><div class="line">                        &#123;<span class="string">'Name'</span>:<span class="string">'Mike'</span>,<span class="string">'School'</span>:<span class="string">'Law'</span>,<span class="string">'Location'</span>:<span class="string">'Fraternity House #22'</span>&#125;,</div><div class="line">                        &#123;<span class="string">'Name'</span>:<span class="string">'Sally'</span>,<span class="string">'School'</span>:<span class="string">'Engineering'</span>,<span class="string">'Location'</span>:<span class="string">'512 Wilson Crescent'</span>&#125;])</div><div class="line">pd.merge(staff_df,student_df,how=<span class="string">'left'</span>,left_on=<span class="string">'Name'</span>,right_on=<span class="string">'Name'</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Location_xNameRoleLocation_ySchool</div><div class="line"><span class="number">0</span>State StreetKellyDirector of HRNaNNaN</div><div class="line"><span class="number">1</span>Washington AvenueSallyCourse liaison<span class="number">512</span> Wilson CrescentEngineering</div><div class="line"><span class="number">2</span>Washington AvenueJamesGrader<span class="number">1024</span> Billiard AvenueBussiness</div></pre></td></tr></table></figure><p>merge函数保留此资料，但附加_x或 _y以帮助区分哪个索引与哪个列的数据有关。__x始终是左边的DataFrame资料，而y始终是右边的DataFrame资料。</p><p>你可以控制<strong>_</strong>x和y的名字使用附加参数，如果你想。现在你试试看。以下是产品和发票的DataFrame。该产品具有标识符和标价。发票列出了人员，产品，标识符和数量。假设我们要产生总计，我们如何将这两个DataFrames加在一起，以便我们有一个列出我们需要的所有信息？</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Merging-DataFrames&quot;&gt;&lt;a href=&quot;#Merging-DataFrames&quot; class=&quot;headerlink&quot; title=&quot;Merging DataFrames&quot;&gt;&lt;/a&gt;Merging DataFrames&lt;/h3&gt;&lt;p&gt;上周，我们介绍了Pandas数据处理和分析的程序库。我们看到，是实际上两个非常相似的核心数据结构，一维的列表（series）物件和二维的数据框
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析第三节</title>
    <link href="http://adamzeng.site/2018/01/05/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82/"/>
    <id>http://adamzeng.site/2018/01/05/数据分析第三节/</id>
    <published>2018-01-04T23:16:51.000Z</published>
    <updated>2018-01-06T04:14:46.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Indexing-Dataframes"><a href="#Indexing-Dataframes" class="headerlink" title="Indexing Dataframes"></a>Indexing Dataframes</h3><p>如我们所见，列表（series）和DataFrames都可以应用索引（index）。索引本质上是行（row)的标识，我们知道行对应于轴零（axis=0）。在我们的奥运数据中，我们用国家的名称对DataFrame进行索引。指数可以被自动推断美丽如当我们创建新列表，没有指定索引时，在这种情况下，我们获得数值索引；或者可以明确设置，比如当我们使用字典（dictionary）创建列表时；或者当我们下载数据时从CSV文件时；指定标头，另一个选项用来设置index是使用set_index函数。此函数使用一个列（column）的名单，并将这些列提升为索引。set_index是个破坏性过程，它不保留当前的索引。如果要保留当前的索引，则需要手动创建一个新的列，并从index属性将其复制到其中。我们回到我们的奥运DataFrame。假设我们不想按照国家来索引DataFrame，而是要按夏季奥运中获得的金牌数量进行索引。首先，我们需要将原来的国家索引保存到新的列（‘country’）。我们可以使用索引操作或具有列标识的字串来执行此操作。然后我们用set_index，使用夏季金牌获得数量column，来设置新的索引。<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'country'</span>] = df.index <span class="comment"># set the old index as country column</span></div><div class="line">df = df.set_index(<span class="string">'Gold'</span>) <span class="comment"># set Gold column as new index</span></div><div class="line">df.head()</div><div class="line"></div><div class="line"><span class="comment"># SummerSilverBronzeTotal# WinterGold.1Silver.1Bronze.1Total.1# GamesGold.2Silver.2Bronze.2Combined totalcountry</span></div><div class="line">Gold</div><div class="line"><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">2</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span>Afghanistan (AFG)</div><div class="line"><span class="number">5</span><span class="number">12</span><span class="number">2</span><span class="number">8</span><span class="number">15</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">15</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span>Algeria (ALG)</div><div class="line"><span class="number">18</span><span class="number">23</span><span class="number">24</span><span class="number">28</span><span class="number">70</span><span class="number">18</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">41</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span>Argentina (ARG)</div><div class="line"><span class="number">1</span><span class="number">5</span><span class="number">2</span><span class="number">9</span><span class="number">12</span><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">11</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span>Armenia (ARM)</div><div class="line"><span class="number">3</span><span class="number">2</span><span class="number">4</span><span class="number">5</span><span class="number">12</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span>Australasia (ANZ) [ANZ]</div></pre></td></tr></table></figure><p>Gold列变成了索引列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">df=df.reset_index() <span class="comment"># reset the index and old index become column</span></div><div class="line">df.head()</div><div class="line"></div><div class="line"></div><div class="line">Gold<span class="comment"># SummerSilverBronzeTotal# WinterGold.1Silver.1Bronze.1Total.1# GamesGold.2Silver.2Bronze.2Combined totalcountry</span></div><div class="line"><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">2</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span>Afghanistan (AFG)</div><div class="line"><span class="number">1</span><span class="number">5</span><span class="number">12</span><span class="number">2</span><span class="number">8</span><span class="number">15</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">15</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span>Algeria (ALG)</div><div class="line"><span class="number">2</span><span class="number">18</span><span class="number">23</span><span class="number">24</span><span class="number">28</span><span class="number">70</span><span class="number">18</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">41</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span>Argentina (ARG)</div><div class="line"><span class="number">3</span><span class="number">1</span><span class="number">5</span><span class="number">2</span><span class="number">9</span><span class="number">12</span><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">11</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span>Armenia (ARM)</div><div class="line"><span class="number">4</span><span class="number">3</span><span class="number">2</span><span class="number">4</span><span class="number">5</span><span class="number">12</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span>Australasia (ANZ) [ANZ]</div></pre></td></tr></table></figure><p>Pandas的一个很好的功能是可以选择进行多层次索引，这与关联数据库系统中的复合键类似。要创建多层次索引，我们只需要调用set_index,给一个列的列表，包含我们有兴趣提升为索引的。Pandas将按照顺序搜索这些资料，找出不同的数据，并形成综合索引指数。我们经常可以发现很好的例子，在处理地理数据，按区域或人口统计来分类的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df=pd.read_csv(<span class="string">'census.csv'</span>)</div><div class="line">df.head()</div><div class="line"></div><div class="line">SUMLEVREGIONDIVISIONSTATECOUNTYSTNAMECTYNAMECENSUS2010POPESTIMATESBASE2010POPESTIMATE2010...RDOMESTICMIG2011RDOMESTICMIG2012RDOMESTICMIG2013RDOMESTICMIG2014RDOMESTICMIG2015RNETMIG2011RNETMIG2012RNETMIG2013RNETMIG2014RNETMIG2015</div><div class="line"><span class="number">0</span><span class="number">40</span><span class="number">3</span><span class="number">6</span><span class="number">1</span><span class="number">0</span></div></pre></td></tr></table></figure><p>大概是这样的数据表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'SUMLEV'</span>].unique()<span class="comment"># find the unique number in column SUMLEV</span></div><div class="line"></div><div class="line">array([<span class="number">40</span>, <span class="number">50</span>])</div></pre></td></tr></table></figure><p>在SUMLEV中只有两种数，40和50。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df=df[df[<span class="string">'SUMLEV'</span>]==<span class="number">50</span>]<span class="comment"># get content when SUMLEV==50</span></div><div class="line">df.head()</div></pre></td></tr></table></figure><p>让我们除掉每一行州的摘要数据，只保留县级数据。此外，基于许多不同的原因，这数据集是很有趣味的，让我们将减少我们将要查看的数据，仅包括总人口估计和总出生次数。我们可以这样做，通过创建我们想要保留的列名称的列表，然后对这列表进行投入，并将生成的DataFrame分配给我们的df变量。美国人口普查数据分析人口数据估计按照州和县的方式。我们可以载入数据并将索引设置为州和县的组合，并查看Pandas如何在DataFrame中处理它。我们可以这样做，通过创建列标识的列表，我们想要用来当索引的。然后使用此列表，用set_index并酌情指定输出变量。我们在这里看到我们有一个双重索引，首先是州名，然后是县名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">columns_to_keep=[<span class="string">'STNAME'</span>,</div><div class="line">                <span class="string">'CTYNAME'</span>,</div><div class="line">                <span class="string">'BIRTHS2010'</span>,</div><div class="line">                <span class="string">'BIRTHS2011'</span>,</div><div class="line">                <span class="string">'BIRTHS2012'</span>,</div><div class="line">                <span class="string">'BIRTHS2013'</span>,</div><div class="line">                <span class="string">'BIRTHS2014'</span>,</div><div class="line">                <span class="string">'BIRTHS2015'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2010'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2011'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2012'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2013'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2014'</span>,</div><div class="line">                <span class="string">'POPESTIMATE2015'</span>]</div><div class="line"></div><div class="line">df=df[columns_to_keep]<span class="comment"># put into selected column and make df a new table</span></div><div class="line">df.head(<span class="number">7</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df=df.set_index([<span class="string">'STNAME'</span>,<span class="string">'CTYNAME'</span>])<span class="comment"># set STMAME and CTYNAME as new multi-index </span></div><div class="line">df.head()</div></pre></td></tr></table></figure><p>当您使用Multi-index时，您必须按照要查询的级别顺序提供参数。</p><p>在索引内部，每列称为一个级别，最外面的列为级别零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'Michigan'</span>,<span class="string">'Washtenaw County'</span>]</div><div class="line"></div><div class="line">BIRTHS2010            <span class="number">977</span></div><div class="line">BIRTHS2011           <span class="number">3826</span></div><div class="line">BIRTHS2012           <span class="number">3780</span></div><div class="line">BIRTHS2013           <span class="number">3662</span></div><div class="line">BIRTHS2014           <span class="number">3683</span></div><div class="line">BIRTHS2015           <span class="number">3709</span></div><div class="line">POPESTIMATE2010    <span class="number">345563</span></div><div class="line">POPESTIMATE2011    <span class="number">349048</span></div><div class="line">POPESTIMATE2012    <span class="number">351213</span></div><div class="line">POPESTIMATE2013    <span class="number">354289</span></div><div class="line">POPESTIMATE2014    <span class="number">357029</span></div><div class="line">POPESTIMATE2015    <span class="number">358880</span></div><div class="line">Name: (Michigan, Washtenaw County), dtype: int64</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df.loc[[(<span class="string">'Michigan'</span>,<span class="string">'Washtenaw County'</span>),(<span class="string">'Michigan'</span>,<span class="string">'Wayne County'</span>)]]</div><div class="line"><span class="comment"># put into two state and county names</span></div></pre></td></tr></table></figure><p>当然你可以翻转列表，对列进行索引。</p><h3 id="缺失值讨论"><a href="#缺失值讨论" class="headerlink" title="缺失值讨论"></a>缺失值讨论</h3><p>我们将在本周的讲课中很快的讨论一下缺失的数据。我们已经预先看到了Pandas如何处理缺失值，使用None类型和在Numpy使用NaN。缺失值在数据清理活动中很常见。我们应该讨论几个注意事项和讨论要点。</p><p>第一，在内置的载入函数，从带分隔符号的文件，有提供控制缺失值的几种方法。这些中最有密切关系的是na_values选项名单，来指示可能引用缺失值的一些字串。例如，我的一些社会学家同事经常使用99在二进制类中来表示那里没有数值。所以这很方便。您也可以使用na_filter选项来关闭空白过滤，如果实际上空白对你是有用的。但实际上这是相当少见的。除了控制如何加载缺失值的规则之外，有时候有必要将缺少值视为具有实际信息。我从我自己的研究中给一个例子。我经常处理从网上学习系统的记录。尤其是我已经完成了几个专案，有关课程采集系统中的影片使用。在这些系统中，播放器具常常有心跳（规律传送讯号）功能，将播放统计咨询经常发送到服务器，也许每隔30秒。</p><p>这些活动资料可以变大，因为他们可以承载播放系统的整个状态，例如影片播放头在哪里，影片大小，哪个影片被呈现到荧幕，音量是多大的等等。</p><p>如果我们载入数据文件log.txt，我们可以看到一个这样的例子。在这个数据中，第一列是Unix纪元格式的时间戳。下一列是用户名，后跟他们正在访问的网页和他们正在播放的影片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">df = pd.read_csv(<span class="string">'log.csv'</span>)</div><div class="line">df</div><div class="line"></div><div class="line"></div><div class="line">timeuservideoplayback positionpausedvolume</div><div class="line"><span class="number">0</span><span class="number">1469974424</span>cherylintro.html<span class="number">5</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1</span><span class="number">1469974454</span>cherylintro.html<span class="number">6</span>NaNNaN</div><div class="line"><span class="number">2</span><span class="number">1469974544</span>cherylintro.html<span class="number">9</span>NaNNaN</div><div class="line"><span class="number">3</span><span class="number">1469974574</span>cherylintro.html<span class="number">10</span>NaNNaN</div><div class="line"><span class="number">4</span><span class="number">1469977514</span>bobintro.html<span class="number">1</span>NaNNaN</div><div class="line"><span class="number">5</span><span class="number">1469977544</span>bobintro.html<span class="number">1</span>NaNNaN</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">df=df.reset_index()</div><div class="line">df=df.set_index([<span class="string">'time'</span>,<span class="string">'user'</span>])</div><div class="line">df</div><div class="line"></div><div class="line">indexvideoplayback positionpausedvolume</div><div class="line">timeuser</div><div class="line"><span class="number">1469974424</span>cheryl<span class="number">0</span>intro.html<span class="number">5</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469974454</span>cheryl<span class="number">1</span>intro.html<span class="number">6</span>NaNNaN</div><div class="line"><span class="number">1469974544</span>cheryl<span class="number">2</span>intro.html<span class="number">9</span>NaNNaN</div><div class="line"><span class="number">1469974574</span>cheryl<span class="number">3</span>intro.html<span class="number">10</span>NaNNaN</div><div class="line"><span class="number">1469977514</span>bob<span class="number">4</span>intro.html<span class="number">1</span>NaNNaN</div><div class="line"><span class="number">1469977544</span>bob<span class="number">5</span>intro.html<span class="number">1</span>NaNNaN</div><div class="line"><span class="number">1469977574</span>bob<span class="number">6</span>intro.html<span class="number">1</span>NaNNaN</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">df=df.fillna(method=<span class="string">'ffill'</span>)</div><div class="line">df.head(<span class="number">20</span>)</div><div class="line"></div><div class="line">indexvideoplayback positionpausedvolume</div><div class="line">timeuser</div><div class="line"><span class="number">1469974424</span>cheryl<span class="number">0</span>intro.html<span class="number">5</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469974454</span>cheryl<span class="number">1</span>intro.html<span class="number">6</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469974544</span>cheryl<span class="number">2</span>intro.html<span class="number">9</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469974574</span>cheryl<span class="number">3</span>intro.html<span class="number">10</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469977514</span>bob<span class="number">4</span>intro.html<span class="number">1</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469977544</span>bob<span class="number">5</span>intro.html<span class="number">1</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469977574</span>bob<span class="number">6</span>intro.html<span class="number">1</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469977604</span>bob<span class="number">7</span>intro.html<span class="number">1</span><span class="keyword">False</span><span class="number">10.0</span></div><div class="line"><span class="number">1469974604</span>cheryl<span class="number">8</span>intro.html<span class="number">11</span><span class="keyword">False</span><span class="number">10.0</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Indexing-Dataframes&quot;&gt;&lt;a href=&quot;#Indexing-Dataframes&quot; class=&quot;headerlink&quot; title=&quot;Indexing Dataframes&quot;&gt;&lt;/a&gt;Indexing Dataframes&lt;/h3&gt;&lt;p&gt;如我们所见，列表（series）和DataFrames都可以应用索引（index）。索引本质上是行（row)的标识，我们知道行对应于轴零（axis=0）。在我们的奥运数据中，我们用国家的名称对DataFrame进行索引。指数可以被自动推断美丽如当我们创建新列表，没有指定索引时，在这种情况下，我们获得数值索引；或者可以明确设置，比如当我们使用字典（dictionary）创建列表时；或者当我们下载数据时从CSV文件时；指定标头，另一个选项用来设置index是使用set_index函数。此函数使用一个列（column）的名单，并将这些列提升为索引。set_index是个破坏性过程，它不保留当前的索引。如果要保留当前的索引，则需要手动创建一个新的列，并从index属性将其复制到其中。我们回到我们的奥运DataFrame。假设我们不想按照国家来索引DataFrame，而是要按夏季奥运中获得的金牌数量进行索引。首先，我们需要将原来的国家索引保存到新的列（‘country’）。我们可以使用索引操作或具有列标识的字串来执行此操作。然后我们用set_index，使用夏季金牌获得数量column，来设置新的索引。
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析DataFrame Data Structure</title>
    <link href="http://adamzeng.site/2018/01/01/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90DataFrame-Data-Structure/"/>
    <id>http://adamzeng.site/2018/01/01/数据分析DataFrame-Data-Structure/</id>
    <published>2018-01-01T00:43:56.000Z</published>
    <updated>2018-01-04T14:00:14.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-DataFrame-Data-Structure"><a href="#The-DataFrame-Data-Structure" class="headerlink" title="The DataFrame Data Structure"></a>The DataFrame Data Structure</h3><p>DataFrame数据结构是Pandas的核心，这将是你的主要对象，在处理数据分析和数据清理任务的时候。DataFrame在概念上是一个二维列表series对象，其中有一个索引（index）和多列内容，每列（column）都有一个标识（label）。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-01%20%E4%B8%8B%E5%8D%8812.30.47.png" alt="image"></p><p>你可以将DataFrame本身视为简单的双轴有标识的阵列，你可以以许多不同的方式创建一个DataFrame，其中，你可以使用一组series，其中每个列表代表一行数据。或者你可以使用一组字典（dictionary），<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">purchase_1=pd.Series(&#123;<span class="string">'Name'</span>:<span class="string">'Chris'</span>,</div><div class="line">                     <span class="string">'Item Purchased'</span>:<span class="string">'Dog Food'</span>,</div><div class="line">                     <span class="string">'Cost'</span>:<span class="number">22.50</span>&#125;)</div><div class="line">purchase_2=pd.Series(&#123;<span class="string">'Name'</span>:<span class="string">'Kevyn'</span>,</div><div class="line">                     <span class="string">'Item Purchased'</span>:<span class="string">'Kitty Litter'</span>,</div><div class="line">                     <span class="string">'Cost'</span>:<span class="number">2.50</span>&#125;)</div><div class="line">purchase_3=pd.Series(&#123;<span class="string">'Name'</span>:<span class="string">'Vinod'</span>,</div><div class="line">                     <span class="string">'Item Purchased'</span>:<span class="string">'Bird Seed'</span>,</div><div class="line">                     <span class="string">'Cost'</span>:<span class="number">5.00</span>&#125;)</div><div class="line">df=pd.DataFrame([purchase_1,purchase_2,purchase_3],index=[<span class="string">'Store 1'</span>,<span class="string">'Store 2'</span>,<span class="string">'Store 3'</span>])</div><div class="line">df.head()</div><div class="line"></div><div class="line"></div><div class="line">Cost  Item Purchased Name</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>Dog FoodChris</div><div class="line">Store <span class="number">2</span><span class="number">2.5</span>Kitty LitterKevyn</div><div class="line">Store <span class="number">3</span><span class="number">5.0</span>   Bird SeedVinod</div></pre></td></tr></table></figure><p>因为DataFrame是二维的，所以将单一值传递给loc，索引操作将返回一个列表，如果只有一行返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Item Purchased'</span>]</div><div class="line"></div><div class="line">Store <span class="number">1</span>        Dog Food</div><div class="line">Store <span class="number">2</span>    Kitty Litter</div><div class="line">Store <span class="number">3</span>       Bird Seed</div><div class="line">Name: Item Purchased, dtype: object</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'Store 1'</span>]</div><div class="line"></div><div class="line">Cost                  <span class="number">22.5</span></div><div class="line">Item Purchased    Dog Food</div><div class="line">Name                 Chris</div><div class="line">Name: Store <span class="number">1</span>, dtype: object</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type(df.loc[<span class="string">'Store 2'</span>])</div><div class="line"></div><div class="line">pandas.core.series.Series</div></pre></td></tr></table></figure><p>Pandas的DataFrame的一个功能，就是可以快速的选择数据，在多重轴上，例如，如果你只想列出Store1的费用，你将提供两个参数给.loc，一个为行（row）索引，一个为列名（column）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'Store 1'</span>,<span class="string">'Cost'</span>]</div><div class="line"></div><div class="line"><span class="number">22.5</span></div></pre></td></tr></table></figure><p>如果我们只想做列（row）选择，并且只取所有费用的清单怎么办？那么有几个选择，首先你可以获取DataFrame的转置使用大写T属性，该属性将交换所有列和行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.T</div><div class="line"></div><div class="line">    Store <span class="number">1</span> Store <span class="number">2</span>Store <span class="number">3</span></div><div class="line">Cost<span class="number">22.5</span><span class="number">2.5</span>     <span class="number">5</span></div><div class="line">Item PurchasedDog FoodKitty LitterBird Seed</div><div class="line">NameChrisKevynVinod</div></pre></td></tr></table></figure><p>这本质上将你的列名称百年城索引index。然后我们可以使用.loc方法。这是有用的，但它很丑陋，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.T.loc[<span class="string">'Cost'</span>]</div><div class="line"></div><div class="line">Store <span class="number">1</span>    <span class="number">22.5</span></div><div class="line">Store <span class="number">2</span>     <span class="number">2.5</span></div><div class="line">Store <span class="number">3</span>       <span class="number">5</span></div><div class="line">Name: Cost, dtype: object</div></pre></td></tr></table></figure><p>对于iloc和loc用于行（row）的选择，Pandas的开发人员直接在DataFrame上保留索引操作列（column）的选择，在Pandas的DataFrame中，列（column）总是有一个名字，所以这个选择始终是基于标识（label）的，而不是像在列表（series）对象上使用方括号运算符一样混乱。对于那些熟悉关系型数据库的人来说，这个操作类似于列（column）的投影。最后，由于使用索引（indexing）运算的结果，是DataFrame或者series，所以可以将运算连接在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df.loc[<span class="string">'Store 1'</span>][<span class="string">'Cost'</span>]</div><div class="line"></div><div class="line"><span class="number">22.5</span></div></pre></td></tr></table></figure><p>链接往往导致Pandas返回DataFrame的副本，而不是DataFrame的视图。对于选择数据，这没什么大不了，尽管它可能比必要的慢一点，如果你正在更改数据，这是一个重要的区别，可能是错误的根源。</p><p>另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.loc[:,[<span class="string">'Name'</span>,<span class="string">'Cost'</span>]]</div><div class="line"></div><div class="line">  Name   Cost</div><div class="line">Store <span class="number">1</span>Chris<span class="number">22.5</span></div><div class="line">Store <span class="number">2</span>Kevyn<span class="number">2.5</span></div><div class="line">Store <span class="number">3</span>Vinod<span class="number">5.0</span></div></pre></td></tr></table></figure><p>所有商店的名称和费用，使用.loc运算符。</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>正规的情况下，drop函数不会更改DataFrame。相反，返回给你删除了指定行的的DataFrame的副本，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">copy_df=df.copy()</div><div class="line">copy_df=copy_df.drop(<span class="string">'Store 1'</span>)</div><div class="line">copy_df</div><div class="line"></div><div class="line">CostItem PurchasedName</div><div class="line">Store <span class="number">2</span><span class="number">2.5</span>Kitty LitterKevyn</div><div class="line">Store <span class="number">3</span><span class="number">5.0</span>Bird SeedVinod</div></pre></td></tr></table></figure><p>Drop有两个有趣的可选择的参数，第一个是inplace，如果设置为true，则DataFrame将被就地更新，而不是返回副本。第二个参数是axis，表示要删除的。正规的情况下，该值为0，表示row的轴向。但是，如果要删除column，则可以将其更改为1。</p><p>然而，有第二种方法去删除column，直接使用索引操作，使用del关键字，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span>  copy_df[<span class="string">'Name'</span>]</div><div class="line">copy_df</div><div class="line"></div><div class="line">CostItem Purchased</div><div class="line">Store <span class="number">2</span><span class="number">2.5</span>Kitty Litter</div><div class="line">Store <span class="number">3</span><span class="number">5.0</span>Bird Seed</div></pre></td></tr></table></figure><p>立即生效，不返回视图。</p><p>最终，向DataFrame添加一个新column，将其指定某些值一样简单，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Location'</span>]=<span class="keyword">None</span></div><div class="line">df</div><div class="line"></div><div class="line">CostItem PurchasedNameLocation</div><div class="line">Store <span class="number">1</span><span class="number">22.5</span>Dog FoodChris<span class="keyword">None</span></div><div class="line">Store <span class="number">2</span><span class="number">2.5</span>Kitty LitterKevyn<span class="keyword">None</span></div><div class="line">Store <span class="number">3</span><span class="number">5.0</span>Bird SeedVinod<span class="keyword">None</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Cost'</span>]*=<span class="number">0.8</span></div></pre></td></tr></table></figure><p>改变所有Cost列中的值，为原来的80%。</p><p>###DataFrame Indexing and Loading</p><p>常见的工作流程是将数据读入DataFrame，然后将该DataFrame减少到特定的列（column）或行（row），你有兴趣处理的。如您所见，Pandas的工具组试图给你DataFrame的视图。这是比复制资料快得多，和更有效率的使用记忆体。</p><p>但是它的确一位着，如果你正在操作数据，则必须注意，任何更改在你处理的DataFrame，可能会对你最初使用的基本DataFrame产生影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">costs=df[<span class="string">'Cost'</span>]</div><div class="line">costs</div><div class="line"></div><div class="line">Store <span class="number">1</span>    <span class="number">22.5</span></div><div class="line">Store <span class="number">2</span>     <span class="number">2.5</span></div><div class="line">Store <span class="number">3</span>     <span class="number">5.0</span></div><div class="line">Name: Cost, dtype: float64</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">costs += <span class="number">2</span></div><div class="line">costs</div><div class="line"></div><div class="line">Store <span class="number">1</span>    <span class="number">24.5</span></div><div class="line">Store <span class="number">2</span>     <span class="number">4.5</span></div><div class="line">Store <span class="number">3</span>     <span class="number">7.0</span></div><div class="line">Name: Cost, dtype: float64</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df</div><div class="line"></div><div class="line">CostItem PurchasedName</div><div class="line">Store <span class="number">1</span><span class="number">24.5</span>Dog FoodChris</div><div class="line">Store <span class="number">2</span><span class="number">4.5</span>Kitty LitterKevyn</div><div class="line">Store <span class="number">3</span><span class="number">7.0</span>Bird SeedVinod</div></pre></td></tr></table></figure><p>这种更改对原表产生影响，所以必须要使用copy方法。</p><p>通常的工作流程是读取一些外部的文件数据集。我们以前看过如何使用Python，列表（list）和字典（dictionary）来做到这一点。你可以想象如何使用这些dictionary来创建一个Pandas的DataFrame。</p><p>使用惊叹号加上cat 与文件名来查看同级csv文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!cat olympics.csv <span class="comment"># 这是一个csv数据文件</span></div></pre></td></tr></table></figure><p>这个命令会将其余命令发送到操作系统的shell。</p><p>cat命令可以运行在Linux和Mac平台上.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">df=pd.read_csv(<span class="string">"olympics.csv"</span>)</div><div class="line">df.head()</div><div class="line"></div><div class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span><span class="number">10</span><span class="number">11</span><span class="number">12</span><span class="number">13</span><span class="number">14</span><span class="number">15</span></div><div class="line"><span class="number">0</span>NaN№ Summer<span class="number">01</span> !<span class="number">02</span> !<span class="number">03</span> !Total№ Winter<span class="number">01</span> !<span class="number">02</span> !<span class="number">03</span> !Total№ Games<span class="number">01</span> !<span class="number">02</span> !<span class="number">03</span> !Combined total</div><div class="line"><span class="number">1</span>Afghanistan (AFG)<span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span></div><div class="line"><span class="number">2</span>Algeria (ALG)<span class="number">12</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">15</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span></div><div class="line"><span class="number">3</span>Argentina (ARG)<span class="number">23</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span><span class="number">18</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">41</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span></div><div class="line"><span class="number">4</span>Armenia (ARM)<span class="number">5</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">11</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span></div></pre></td></tr></table></figure><p>当我们看到DataFrames时，我们看到第一个单元格中有一个NaN，因为它是一个空值，并且这些行已经为我们自动编入索引（index）。</p><p>很明显，    DataFrames中的第一行（row）数据是我们真正希望看到的列名标签，数据中的第一列（column）似乎也是国家的名称，我们相用它来做成索引（index）。</p><p>读取csv有一些阐述，我们可以用它来指示Pandas如何来标记行与列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">df=pd.read_csv(<span class="string">'olympics.csv'</span>,index_col=<span class="number">0</span>,skiprows=<span class="number">1</span>)</div><div class="line">df.head()</div><div class="line"></div><div class="line">№ Summer<span class="number">01</span> !<span class="number">02</span> !<span class="number">03</span> !Total№ Winter<span class="number">01</span> !<span class="number">.1</span><span class="number">02</span> !<span class="number">.1</span><span class="number">03</span> !<span class="number">.1</span>Total<span class="number">.1</span>№ Games<span class="number">01</span> !<span class="number">.2</span><span class="number">02</span> !<span class="number">.2</span><span class="number">03</span> !<span class="number">.2</span>Combined total</div><div class="line">Afghanistan (AFG)<span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span></div><div class="line">Algeria (ALG)<span class="number">12</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">15</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span></div><div class="line">Argentina (ARG)<span class="number">23</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span><span class="number">18</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">41</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span></div><div class="line">Armenia (ARM)<span class="number">5</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">11</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span></div><div class="line">Australasia (ANZ) [ANZ]<span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span></div></pre></td></tr></table></figure><p>设置国家为索引值，并跳过第一行数据，从第二行数据开始读取。</p><p>这个数据来自维基百科的所有奥运会奖牌，如果我们来到这个页面，我们可以看到，这些页面没有用金，银和铜牌，而是用一个漂亮的小圆标，加上一个1，一个2，一个3在里面。在我们的csv文件中，它们用字串01！来表示，我们看到列（column）的值被重复，这真的不是很好的做法，Pandas加上了.1和.2，使标示更加独特，但是这个标示并不是很清楚，所以我们应该清理数据文件。我们当然可以直接通过直接编辑CSV文件来实现，但是我们也可以使用Pandas name属性设置列的名称.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</div><div class="line">    <span class="keyword">if</span> col[:<span class="number">2</span>]==<span class="string">'01'</span>:</div><div class="line">        df.rename(columns=&#123;col:<span class="string">'Gold'</span>+col[<span class="number">4</span>:]&#125;,inplace=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">if</span> col[:<span class="number">2</span>]==<span class="string">'02'</span>:</div><div class="line">        df.rename(columns=&#123;col:<span class="string">'Silver'</span>+col[<span class="number">4</span>:]&#125;,inplace=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">if</span> col[:<span class="number">2</span>]==<span class="string">'03'</span>:</div><div class="line">        df.rename(columns=&#123;col:<span class="string">'Bronze'</span>+col[<span class="number">4</span>:]&#125;,inplace=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">if</span> col[:<span class="number">1</span>]==<span class="string">'№'</span>:</div><div class="line">        df.rename(columns=&#123;col:<span class="string">'#'</span>+col[<span class="number">4</span>:]&#125;,inplace=<span class="keyword">True</span>)</div><div class="line">        </div><div class="line">df.head()</div><div class="line"></div><div class="line"><span class="comment">#mmerGoldSilverBronzeTotal#nterGold.1Silver.1Bronze.1Total.1#mesGold.2Silver.2Bronze.2Combined total</span></div><div class="line">Afghanistan (AFG)<span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">13</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">2</span></div><div class="line">Algeria (ALG)<span class="number">12</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">15</span><span class="number">5</span><span class="number">2</span><span class="number">8</span><span class="number">15</span></div><div class="line">Argentina (ARG)<span class="number">23</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span><span class="number">18</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">41</span><span class="number">18</span><span class="number">24</span><span class="number">28</span><span class="number">70</span></div><div class="line">Armenia (ARM)<span class="number">5</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">11</span><span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">12</span></div><div class="line">Australasia (ANZ) [ANZ]<span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">12</span></div></pre></td></tr></table></figure><h3 id="Querying-a-DataFrame"><a href="#Querying-a-DataFrame" class="headerlink" title="Querying a DataFrame"></a>Querying a DataFrame</h3><p>在谈论如何查询DataFrames之前，我们需要谈论布林boolean遮蔽masking。</p><p>布林遮蔽是Numpy快速高效查询的核心，它类似于在其他计算领域使用的遮蔽（masking）。</p><p>布林遮罩是一个阵列（array），它可以是一维度像一个列表（series），或者二维度像DateFrames这样的，阵列中的每个值都是true或false。这个阵列（array</p><p>)基本上覆盖在我们查询的数据结构之上。任何单元格与true都将被允许进入我们的最终结果，任何单元格与false对齐的就不能够。</p><p>布林遮蔽在概念上是强大的，是高效地Numpy和Pandas查询的基石。这种技术在计算机科学中的其他领域被广泛的使用，例如图形学，但是在其他传统的关联数据库中并没有类似的，所以我认为这里值得一提。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-04%20%E4%B8%8B%E5%8D%889.13.10.png" alt="image"></p><p>创建布林遮罩通过将操作符直接应用于Pandas列表或DataFrame对象。例如，在我们的奥运数据集中，您可能只想看到在夏季奥运会上获得金牌的国家。要创建此查询的布林遮罩，我们投影金牌（’GOLD’)列，使用索引运算符，并应用比较值为大于零的运算符。这实际上是广播比较（comparison）运算符，大于（&gt;），其结果为布林（Boolean）系列。所得到的是有索引的系列，每个单元格是True或False，根据一个国家是否赢得了至少一枚金牌，并且索引是国家名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Gold'</span>]&gt;<span class="number">0</span></div><div class="line"></div><div class="line">Afghanistan (AFG)                               <span class="keyword">False</span></div><div class="line">Algeria (ALG)                                    <span class="keyword">True</span></div><div class="line">Argentina (ARG)                                  <span class="keyword">True</span></div><div class="line">Armenia (ARM)                                    <span class="keyword">True</span></div><div class="line">Australasia (ANZ) [ANZ]                          <span class="keyword">True</span></div><div class="line">Australia (AUS) [AUS] [Z]                        <span class="keyword">True</span></div><div class="line">Austria (AUT)                                    <span class="keyword">True</span></div><div class="line">Azerbaijan (AZE)                                 <span class="keyword">True</span></div><div class="line">Bahamas (BAH)                                    <span class="keyword">True</span></div><div class="line">Bahrain (BRN)                                   <span class="keyword">False</span></div><div class="line">Barbados (BAR) [BAR]                            <span class="keyword">False</span></div><div class="line">Belarus (BLR)                                    <span class="keyword">True</span></div><div class="line">Belgium (BEL)                                    <span class="keyword">True</span></div><div class="line">Bermuda (BER)                                   <span class="keyword">False</span></div><div class="line">Bohemia (BOH) [BOH] [Z]                         <span class="keyword">False</span></div><div class="line">Botswana (BOT)                                  <span class="keyword">False</span></div><div class="line">Brazil (BRA)                                     <span class="keyword">True</span></div><div class="line">British West Indies (BWI) [BWI]                 <span class="keyword">False</span></div><div class="line">Bulgaria (BUL) [H]                               <span class="keyword">True</span></div><div class="line">Burundi (BDI)                                    <span class="keyword">True</span></div><div class="line">Cameroon (CMR)                                   <span class="keyword">True</span></div><div class="line">Canada (CAN)                                     <span class="keyword">True</span></div><div class="line">Chile (CHI) [I]                                  <span class="keyword">True</span></div><div class="line">China (CHN) [CHN]                                <span class="keyword">True</span></div><div class="line">Colombia (COL)                                   <span class="keyword">True</span></div><div class="line">Costa Rica (CRC)                                 <span class="keyword">True</span></div><div class="line">Ivory Coast (CIV) [CIV]                         <span class="keyword">False</span></div><div class="line">Croatia (CRO)                                    <span class="keyword">True</span></div><div class="line">Cuba (CUB) [Z]                                   <span class="keyword">True</span></div><div class="line">Cyprus (CYP)                                    <span class="keyword">False</span></div><div class="line">                                                ...  </div><div class="line">Sri Lanka (SRI) [SRI]                           <span class="keyword">False</span></div><div class="line">Sudan (SUD)                                     <span class="keyword">False</span></div><div class="line">Suriname (SUR) [E]                               <span class="keyword">True</span></div><div class="line">Sweden (SWE) [Z]                                 <span class="keyword">True</span></div><div class="line">Switzerland (SUI)                                <span class="keyword">True</span></div><div class="line">Syria (SYR)                                      <span class="keyword">True</span></div><div class="line">Chinese Taipei (TPE) [TPE] [TPE2]                <span class="keyword">True</span></div><div class="line">Tajikistan (TJK)                                <span class="keyword">False</span></div><div class="line">Tanzania (TAN) [TAN]                            <span class="keyword">False</span></div><div class="line">Thailand (THA)                                   <span class="keyword">True</span></div><div class="line">Togo (TOG)                                      <span class="keyword">False</span></div><div class="line">Tonga (TGA)                                     <span class="keyword">False</span></div><div class="line">Trinidad <span class="keyword">and</span> Tobago (TRI) [TRI]                  <span class="keyword">True</span></div><div class="line">Tunisia (TUN)                                    <span class="keyword">True</span></div><div class="line">Turkey (TUR)                                     <span class="keyword">True</span></div><div class="line">Uganda (UGA)                                     <span class="keyword">True</span></div><div class="line">Ukraine (UKR)                                    <span class="keyword">True</span></div><div class="line">United Arab Emirates (UAE)                       <span class="keyword">True</span></div><div class="line">United States (USA) [P] [Q] [R] [Z]              <span class="keyword">True</span></div><div class="line">Uruguay (URU)                                    <span class="keyword">True</span></div><div class="line">Uzbekistan (UZB)                                 <span class="keyword">True</span></div><div class="line">Venezuela (VEN)                                  <span class="keyword">True</span></div><div class="line">Vietnam (VIE)                                   <span class="keyword">False</span></div><div class="line">Virgin Islands (ISV)                            <span class="keyword">False</span></div><div class="line">Yugoslavia (YUG) [YUG]                           <span class="keyword">True</span></div><div class="line">Independent Olympic Participants (IOP) [IOP]    <span class="keyword">False</span></div><div class="line">Zambia (ZAM) [ZAM]                              <span class="keyword">False</span></div><div class="line">Zimbabwe (ZIM) [ZIM]                             <span class="keyword">True</span></div><div class="line">Mixed team (ZZX) [ZZX]                           <span class="keyword">True</span></div><div class="line">Totals                                           <span class="keyword">True</span></div><div class="line">Name: Gold, dtype: bool</div></pre></td></tr></table></figure><p>所以我们建立了布林遮罩，然而这只是一半而已。接下来我们要做的是覆盖该遮罩（mask）在DataFrame上。我们可以使用where函数来做到这一点。where函数将布林遮罩作为条件，将其应用于DataFrame或series，并返回一个相同形状的新DataFrame或series。我们将这个布林遮罩应用于我们的奥运数据，并创建一个DataFrame，只有那些在夏季比赛中赢得金牌的国家。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">only_gold=df.where(df[<span class="string">'Gold'</span>]&gt;<span class="number">0</span>)</div><div class="line">only_gold.head()</div><div class="line"></div><div class="line"><span class="comment">#mmerGoldSilverBronzeTotal#nterGold.1Silver.1Bronze.1Total.1#mesGold.2Silver.2Bronze.2Combined total</span></div><div class="line">Afghanistan (AFG)NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN</div><div class="line">Algeria (ALG)<span class="number">12.0</span><span class="number">5.0</span><span class="number">2.0</span><span class="number">8.0</span><span class="number">15.0</span><span class="number">3.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">15.0</span><span class="number">5.0</span><span class="number">2.0</span><span class="number">8.0</span><span class="number">15.0</span></div><div class="line">Argentina (ARG)<span class="number">23.0</span><span class="number">18.0</span><span class="number">24.0</span><span class="number">28.0</span><span class="number">70.0</span><span class="number">18.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">41.0</span><span class="number">18.0</span><span class="number">24.0</span><span class="number">28.0</span><span class="number">70.0</span></div><div class="line">Armenia (ARM)<span class="number">5.0</span><span class="number">1.0</span><span class="number">2.0</span><span class="number">9.0</span><span class="number">12.0</span><span class="number">6.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">11.0</span><span class="number">1.0</span><span class="number">2.0</span><span class="number">9.0</span><span class="number">12.0</span></div><div class="line">Australasia (ANZ) [ANZ]<span class="number">2.0</span><span class="number">3.0</span><span class="number">4.0</span><span class="number">5.0</span><span class="number">12.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">2.0</span><span class="number">3.0</span><span class="number">4.0</span><span class="number">5.0</span><span class="number">12.0</span></div></pre></td></tr></table></figure><p>我们看到产生的DataFrame保留了原始的索引，只保留了满足条件的国家/地区的数据。所有不符合条件的国家只有NaN数据。大多数DataFrame内置的统计功能忽略NaN的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">only_gold[<span class="string">'Gold'</span>].count()</div><div class="line"></div><div class="line"><span class="number">100</span></div></pre></td></tr></table></figure><p>我们看到有100个国家在夏季奥运中获得了金牌。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'Gold'</span>].count()</div><div class="line"></div><div class="line"><span class="number">147</span></div></pre></td></tr></table></figure><p>如果我们在df上使用count，有147个国家总数。</p><p>如果我们想删除没有数据的行，我们可以使用dropna（）功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">only_gold=only_gold.dropna()</div><div class="line">only_gold.head()</div><div class="line"></div><div class="line"><span class="comment">#mmerGoldSilverBronzeTotal#nterGold.1Silver.1Bronze.1Total.1#mesGold.2Silver.2Bronze.2Combined total</span></div><div class="line">Algeria (ALG)<span class="number">12.0</span><span class="number">5.0</span><span class="number">2.0</span><span class="number">8.0</span><span class="number">15.0</span><span class="number">3.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">15.0</span><span class="number">5.0</span><span class="number">2.0</span><span class="number">8.0</span><span class="number">15.0</span></div><div class="line">Argentina (ARG)<span class="number">23.0</span><span class="number">18.0</span><span class="number">24.0</span><span class="number">28.0</span><span class="number">70.0</span><span class="number">18.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">41.0</span><span class="number">18.0</span><span class="number">24.0</span><span class="number">28.0</span><span class="number">70.0</span></div><div class="line">Armenia (ARM)<span class="number">5.0</span><span class="number">1.0</span><span class="number">2.0</span><span class="number">9.0</span><span class="number">12.0</span><span class="number">6.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">11.0</span><span class="number">1.0</span><span class="number">2.0</span><span class="number">9.0</span><span class="number">12.0</span></div><div class="line">Australasia (ANZ) [ANZ]<span class="number">2.0</span><span class="number">3.0</span><span class="number">4.0</span><span class="number">5.0</span><span class="number">12.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span><span class="number">2.0</span><span class="number">3.0</span><span class="number">4.0</span><span class="number">5.0</span><span class="number">12.0</span></div><div class="line">Australia (AUS) [AUS] [Z]<span class="number">25.0</span><span class="number">139.0</span><span class="number">152.0</span><span class="number">177.0</span><span class="number">468.0</span><span class="number">18.0</span><span class="number">5.0</span><span class="number">3.0</span><span class="number">4.0</span><span class="number">12.0</span><span class="number">43.0</span><span class="number">144.0</span><span class="number">155.0</span><span class="number">181.0</span><span class="number">480.0</span></div></pre></td></tr></table></figure><p>当你发现自己在谈论Pandas，说’我常常想要用‘，很可能开发人员已经包含了捷径，为这些常用操作。例如，在这个例子中，我们实际上并不需要明确地使用where函数。Pandas开发人员允许索引运算元使用布林遮罩作为值，而不是列名称列表。语法可能看起来有点混乱，特别是如果您不习惯使用重载（overload）运算符的程序语言，但结果是您可以相对较快地过滤和减少DataFrames。</p><p>要牢记一点，如果你不习惯使用布林（boolean）或位（bit）遮蔽来减少数据两个遮罩，当进行逻辑比较运算，其输出是另一个布林遮罩。这意味着你可以链接一堆and/or语句以创建更复杂的查询，结果仍然是单个布林遮罩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">len(df[(df[<span class="string">'Gold'</span>]&gt;<span class="number">0</span>) | df[<span class="string">'Gold.1'</span>]&gt;<span class="number">0</span>])</div><div class="line"><span class="number">101</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[(df[<span class="string">'Gold.1'</span>]&gt;<span class="number">0</span>) &amp; (df[<span class="string">'Gold.1'</span>]==<span class="number">0</span>)]</div></pre></td></tr></table></figure><p>这选出了在夏季奥运会没有金牌的国家，但是在秋季奥运会有金牌。</p><p>要记住，每个布林遮罩需要被包含在括号中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;The-DataFrame-Data-Structure&quot;&gt;&lt;a href=&quot;#The-DataFrame-Data-Structure&quot; class=&quot;headerlink&quot; title=&quot;The DataFrame Data Structure&quot;&gt;&lt;/a&gt;The DataFrame Data Structure&lt;/h3&gt;&lt;p&gt;DataFrame数据结构是Pandas的核心，这将是你的主要对象，在处理数据分析和数据清理任务的时候。DataFrame在概念上是一个二维列表series对象，其中有一个索引（index）和多列内容，每列（column）都有一个标识（label）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oxufz8asv.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-01%20%E4%B8%8B%E5%8D%8812.30.47.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以将DataFrame本身视为简单的双轴有标识的阵列，你可以以许多不同的方式创建一个DataFrame，其中，你可以使用一组series，其中每个列表代表一行数据。或者你可以使用一组字典（dictionary），
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>pandas的初步认识</title>
    <link href="http://adamzeng.site/2017/12/31/pandas%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>http://adamzeng.site/2017/12/31/pandas的初步认识/</id>
    <published>2017-12-31T06:20:01.000Z</published>
    <updated>2018-01-01T03:42:19.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作、清理和查询资料使用Pandas工具库"><a href="#操作、清理和查询资料使用Pandas工具库" class="headerlink" title="操作、清理和查询资料使用Pandas工具库"></a>操作、清理和查询资料使用Pandas工具库</h3><ul><li><p>Created in 2008 by Wes McKinney</p></li><li><p>Open source New BSD license</p></li><li><p>100 different contributors</p></li><li><p>Heavily used by pandas developers instead of a mailing list</p></li><li><p><a href="http://stackoverflow.com" target="_blank" rel="noopener">http://stackoverflow.com</a> pandas社群使用它来当做第一资源</p></li><li><p>Learning the Pandas Library</p></li><li><p><a href="http://planetpython.org/" target="_blank" rel="noopener">http://planetpython.org/</a></p></li><li><p>Excellent blog aggregator for python related news</p></li><li><p>Significant number of data science and python tutorials are posted</p></li><li><p>Great blend of applied beginner and higher level python postings</p></li><li><p><a href="http://dataskeptic.com/" target="_blank" rel="noopener">http://dataskeptic.com/</a></p></li><li><p>Kyle Polich,created in 2014</p></li><li><p>Covers data science more</p><p>generally,including:</p><ul><li>Mini educational lessons</li><li>Interviews</li><li>Trends</li><li>Shared community project(OpenHourse)<a id="more"></a></li></ul></li></ul><p>Series是Pandas中的核心数据结构之一，你可以想象一下相交于列表（list）和字典（dictionary）之间。这些项目都按照顺序储存，并且有标识可以从中检索。一个简单的方法去想象，它是两列数据。第一栏是特殊的索引，很像字典dictionary的key。而第二栏则是你真实的数据。重要的是注意资料栏位也有自己的标识，可以透过.name来取得，这与dictionary不同，在合并多列数据时很有用，我们稍后再谈谈。你可能会预期，可以透过传入一个list的值来新创一个Series，当你这么做时，Pandas会自动从零开始分配索引，并将该series的名称设置为“None”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">animals=[<span class="string">'Tiger'</span>,<span class="string">'Bear'</span>,<span class="string">'Moose'</span>]</div><div class="line">pd.Series(animals)</div><div class="line"></div><div class="line"><span class="number">0</span>    Tiger</div><div class="line"><span class="number">1</span>     Bear</div><div class="line"><span class="number">2</span>    Moose</div><div class="line">dtype: object</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">pd.Series(numbers)</div><div class="line"></div><div class="line"><span class="number">0</span>    <span class="number">1</span></div><div class="line"><span class="number">1</span>    <span class="number">2</span></div><div class="line"><span class="number">2</span>    <span class="number">3</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure><p>最重要的是Numpy和Pandas如何处理遗失的资料，在Python中，我们有none type以表示资料缺失。但是我们该怎么做，如果我们想要有一个类型的list，像我们在series object，在内部，pandas会执行一些类型转换.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">animals=[<span class="string">'Tiger'</span>,<span class="string">'Bear'</span>,<span class="keyword">None</span>]</div><div class="line">pd.Series(animals)</div><div class="line"></div><div class="line"><span class="number">0</span>    Tiger</div><div class="line"><span class="number">1</span>     Bear</div><div class="line"><span class="number">2</span>     <span class="keyword">None</span></div><div class="line">dtype: object</div></pre></td></tr></table></figure><p>如果我们创建一个list的strings，而我们有一个元素是None类型，pandas将它作为None，并使用object的类型在内部阵列。如果我们创建一个数字，整数或浮点的列表，并放入None类型，Pandas会自动将其转换为特殊浮点值，指定为NaN,代表它不是一个数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">None</span>]</div><div class="line">pd.Series(numbers)</div><div class="line"></div><div class="line"><span class="number">0</span>    <span class="number">1.0</span></div><div class="line"><span class="number">1</span>    <span class="number">2.0</span></div><div class="line"><span class="number">2</span>    NaN</div><div class="line">dtype: float64</div></pre></td></tr></table></figure><p>对于那些没有用过Python科学计算的人，这是一个很重要的一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">np.nan==<span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.isnan(np.nan)</div><div class="line"></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><p>请记住，当你看到Nan，它意思类似于none，但它是一个数值，它的区别对待是因为效率的原因。</p><p>series可以从dictionary数据来创建，如果这样做，你提供的dictionary的keys将自动指派成索引（index），而不仅仅是递增整数的index。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sports=&#123;<span class="string">'Archery'</span>:<span class="string">'Bhutan'</span>,</div><div class="line">       <span class="string">'Golf'</span>:<span class="string">'Scotland'</span>,</div><div class="line">       <span class="string">'Sumo'</span>:<span class="string">'Japan'</span>,</div><div class="line">       <span class="string">'Taekwondo'</span>:<span class="string">'South Korea'</span>&#125;</div><div class="line">s=pd.Series(sports)</div><div class="line">s</div><div class="line"></div><div class="line">Archery           Bhutan</div><div class="line">Golf            Scotland</div><div class="line">Sumo               Japan</div><div class="line">Taekwondo    South Korea</div><div class="line">dtype: object</div></pre></td></tr></table></figure><p>Pandas的Series（列表）可以查询，使用索引（index）的位置或索引的标记（label），正如我们所看到的，如果你不指派series的index，则位置和标识实际上是相同的值。要利用数位位置查询，从零开始，使用iloc属性。要通过索引标识进行查询，可以使用loc属性，以下是维基百科的全国体育赛事数据，假设我们想要列出所有的运动当我们的索引（index），和国家列表作为值（value）。你可以将这些保留在dictionary中，并按照我们以前讨论的方式创建一个series。</p><p>如果你想查看第四个国家，我们将使用iloc属性和参数，3，如果你想了解哪个国家将高尔夫作为其全国运动，我们将使用loc属性和参数’loc’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.iloc[<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="string">'South Korea'</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.loc[<span class="string">'Golf'</span>]</div><div class="line"></div><div class="line"><span class="string">'Scotland'</span></div></pre></td></tr></table></figure><p>loc与iloc是属性而不是方法，所以你使用方括号[],而不是使用()来查询它们，我们称之为索引运算符。在Python中，这就叫做获取（get）和设置（set）一个项目的方法，根据其使用的背景来决定。这看起来可能有点困惑的，如果你习惯于语言在哪里封装在里面的，属性、变数和性能是常见的，比如在Java中。Pandas试图使我们的程式更具有可读性，并提供一种智慧语法，使用index操作符直接在series本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s[<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="string">'South Korea'</span></div></pre></td></tr></table></figure><p>例如，你传入一个整数参数，运算子会表现得好想你想要通过iloc属性来查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s[<span class="string">'Golf'</span>]</div><div class="line"></div><div class="line"><span class="string">'Scotland'</span></div></pre></td></tr></table></figure><p>如果你传入一个物件（object），它将认为你想要查询使用根据标识（label）的loc属性。</p><p>如果你的index是整数列表会发生什么呢？</p><p>这有点复杂，pandas无法自动确定你是打算通过索引位置或索引标识进行查询。所以在series本身使用index操作时，你需要小心，而更安全的选择是更加明确，直接使用iloc或loc属性。</p><h3 id="对于计算而言"><a href="#对于计算而言" class="headerlink" title="对于计算而言"></a>对于计算而言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">total=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</div><div class="line">    total+=item</div><div class="line">print(total)</div><div class="line"></div><div class="line"><span class="number">324.0</span></div></pre></td></tr></table></figure><p>现代电脑可以同时执行许多任务，尤其是涉及数学的任务。</p><p>Pandas和基础的Numpy程序库支持一个称为向量化，Vectorization与Numpy库中的大部分功能一起使用，包括sum函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">total=np.sum(s)</div><div class="line">print(total)</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">324.0</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">s=pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">1000</span>,<span class="number">10000</span>))</div><div class="line">print(s)</div><div class="line">s.head(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="number">0</span>       <span class="number">337</span></div><div class="line"><span class="number">1</span>       <span class="number">495</span></div><div class="line"><span class="number">2</span>       <span class="number">871</span></div><div class="line"><span class="number">3</span>       <span class="number">840</span></div><div class="line"><span class="number">4</span>       <span class="number">585</span></div><div class="line"><span class="number">5</span>       <span class="number">435</span></div><div class="line"><span class="number">6</span>       <span class="number">172</span></div><div class="line"><span class="number">7</span>       <span class="number">364</span></div><div class="line"><span class="number">8</span>       <span class="number">807</span></div><div class="line"><span class="number">9</span>       <span class="number">937</span></div><div class="line"><span class="number">10</span>      <span class="number">347</span></div><div class="line"><span class="number">11</span>      <span class="number">271</span></div><div class="line"><span class="number">12</span>       <span class="number">30</span></div><div class="line"><span class="number">13</span>      <span class="number">908</span></div><div class="line"><span class="number">14</span>      <span class="number">525</span></div><div class="line"><span class="number">15</span>      <span class="number">151</span></div><div class="line"><span class="number">16</span>       <span class="number">68</span></div><div class="line"><span class="number">17</span>      <span class="number">189</span></div><div class="line"><span class="number">18</span>      <span class="number">897</span></div><div class="line"><span class="number">19</span>      <span class="number">679</span></div><div class="line"><span class="number">20</span>      <span class="number">683</span></div><div class="line"><span class="number">21</span>      <span class="number">111</span></div><div class="line"><span class="number">22</span>      <span class="number">351</span></div><div class="line"><span class="number">23</span>      <span class="number">228</span></div><div class="line"><span class="number">24</span>      <span class="number">421</span></div><div class="line"><span class="number">25</span>      <span class="number">923</span></div><div class="line"><span class="number">26</span>      <span class="number">597</span></div><div class="line"><span class="number">27</span>      <span class="number">227</span></div><div class="line"><span class="number">28</span>      <span class="number">691</span></div><div class="line"><span class="number">29</span>      <span class="number">306</span></div><div class="line">       ... </div><div class="line"><span class="number">9970</span>    <span class="number">324</span></div><div class="line"><span class="number">9971</span>    <span class="number">124</span></div><div class="line"><span class="number">9972</span>    <span class="number">367</span></div><div class="line"><span class="number">9973</span>    <span class="number">557</span></div><div class="line"><span class="number">9974</span>    <span class="number">392</span></div><div class="line"><span class="number">9975</span>    <span class="number">158</span></div><div class="line"><span class="number">9976</span>    <span class="number">242</span></div><div class="line"><span class="number">9977</span>    <span class="number">437</span></div><div class="line"><span class="number">9978</span>    <span class="number">911</span></div><div class="line"><span class="number">9979</span>    <span class="number">503</span></div><div class="line"><span class="number">9980</span>     <span class="number">56</span></div><div class="line"><span class="number">9981</span>    <span class="number">836</span></div><div class="line"><span class="number">9982</span>    <span class="number">988</span></div><div class="line"><span class="number">9983</span>    <span class="number">796</span></div><div class="line"><span class="number">9984</span>    <span class="number">921</span></div><div class="line"><span class="number">9985</span>    <span class="number">214</span></div><div class="line"><span class="number">9986</span>    <span class="number">593</span></div><div class="line"><span class="number">9987</span>    <span class="number">426</span></div><div class="line"><span class="number">9988</span>    <span class="number">156</span></div><div class="line"><span class="number">9989</span>    <span class="number">509</span></div><div class="line"><span class="number">9990</span>    <span class="number">194</span></div><div class="line"><span class="number">9991</span>    <span class="number">161</span></div><div class="line"><span class="number">9992</span>    <span class="number">695</span></div><div class="line"><span class="number">9993</span>    <span class="number">601</span></div><div class="line"><span class="number">9994</span>     <span class="number">59</span></div><div class="line"><span class="number">9995</span>    <span class="number">965</span></div><div class="line"><span class="number">9996</span>    <span class="number">358</span></div><div class="line"><span class="number">9997</span>    <span class="number">696</span></div><div class="line"><span class="number">9998</span>     <span class="number">72</span></div><div class="line"><span class="number">9999</span>    <span class="number">172</span></div><div class="line">dtype: int64</div><div class="line">Out[<span class="number">18</span>]:</div><div class="line"><span class="number">0</span>    <span class="number">337</span></div><div class="line"><span class="number">1</span>    <span class="number">495</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">len(s)</div><div class="line"></div><div class="line"><span class="number">10000</span></div></pre></td></tr></table></figure><p>我们会使用所谓的细胞（cellular）魔术函数，这些以两个百分比的符号开始，并修改或包装当前Jupyter单元中的程式。我们要使用的函数称为timeit。你可能已经从名称猜到了，此函数会运行我们的程式几次，来确定，平均而言，他需要多长的时间。</p><p>让我们运行timeit，用我们原来的反复运算程式。你可以给timeit你希望运行的循环次数，在预设情况下，会设定1000次，在这里我要求timeit运行100次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%%timeit -n <span class="number">100</span></div><div class="line">summary = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</div><div class="line">    summary+=item</div><div class="line">    </div><div class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">4.07</span> ms per loop</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">%%timeit -n <span class="number">100</span></div><div class="line">summary = np.sum(s)</div><div class="line"></div><div class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">187</span> µs per loop</div></pre></td></tr></table></figure><p>速度差异巨大，使用向量化的sum运算功能非常强大。</p><p>在pandas和Numpy的相关的功能称为广播（broadcasting）。通过broadcasting，你可以对series中的每个值应用操作，更改series。</p><p>例如我想要对每一个值进行+2的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s += <span class="number">2</span></div><div class="line">s.head()<span class="comment"># check first five numbers</span></div><div class="line"></div><div class="line"><span class="number">0</span>    <span class="number">339</span></div><div class="line"><span class="number">1</span>    <span class="number">497</span></div><div class="line"><span class="number">2</span>    <span class="number">873</span></div><div class="line"><span class="number">3</span>    <span class="number">842</span></div><div class="line"><span class="number">4</span>    <span class="number">587</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> label, value <span class="keyword">in</span> s.iteritems():</div><div class="line">    s.set_value(label,value+<span class="number">2</span>)</div><div class="line">s.head()</div><div class="line"></div><div class="line"><span class="number">0</span>    <span class="number">341</span></div><div class="line"><span class="number">1</span>    <span class="number">499</span></div><div class="line"><span class="number">2</span>    <span class="number">875</span></div><div class="line"><span class="number">3</span>    <span class="number">844</span></div><div class="line"><span class="number">4</span>    <span class="number">589</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure><p>这是另外一种方式。</p><p>Pandas确实支持遍历迭代列表项目，很类似与dictionary，让你容易地把数值分拆开。但如果你发现自己反复遍历一列表，你应该质疑你做的方式是否是尽可能最好的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%%timeit -n <span class="number">10</span></div><div class="line">s=pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">1000</span>,<span class="number">10000</span>))</div><div class="line"><span class="keyword">for</span> label, value <span class="keyword">in</span> s.iteritems():</div><div class="line">    s.loc[label]=value+<span class="number">2</span></div><div class="line">    </div><div class="line"><span class="number">10</span> loops, best of <span class="number">3</span>: <span class="number">2.36</span> s per loop</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">%%timeit -n <span class="number">10</span></div><div class="line">s = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">1000</span>,<span class="number">10000</span>))</div><div class="line">s+=<span class="number">2</span></div><div class="line"></div><div class="line"><span class="number">10</span> loops, best of <span class="number">3</span>: <span class="number">1</span> ms per loop</div></pre></td></tr></table></figure><p>相比而言，不仅是明显的变快，而它是更简洁和甚至更容易去读。你预期的典型数学运算是向量化的，和Numpy文档概述了创建你自己的向量化的函数所需要怎么做。最后一点要注意的，在使用索引运算来存取列表资料。.loc属性（attribute）让你不仅可以修改数据，还可以添加新数据。如果作为索引传入的值不存在，则它会添加一个新条目。请记住，指数可以有混合类型。虽然重要的是，要注意在下面的类型是什么，Pandas会根据需要，自动更改基本的Numpy类型。</p><p>我们可以添加一些新的数值，也许是一种动物，如你所知，我喜欢熊。然后调用.loc索引操作。我们看到数据值或索引标识的混合类型，对于Pandas来说是没有问题的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">s.loc[<span class="string">'Animal'</span>]=<span class="string">'Bears'</span></div><div class="line">s</div><div class="line"></div><div class="line"><span class="number">0</span>             <span class="number">1</span></div><div class="line"><span class="number">1</span>             <span class="number">2</span></div><div class="line"><span class="number">2</span>             <span class="number">3</span></div><div class="line">Animal    Bears</div><div class="line">dtype: object</div></pre></td></tr></table></figure><p>到目前为止，我只显示了索引值是唯一的，我想要结束这节课，展示一个索引值不是唯一的例子，这使得dataframe（资料框），从概念上讲，可能不同于关联数据库（database）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">original_sports = pd.Series(&#123;<span class="string">'Archery'</span>: <span class="string">'Bhutan'</span>,</div><div class="line">                             <span class="string">'Golf'</span>: <span class="string">'Scotland'</span>,</div><div class="line">                             <span class="string">'Sumo'</span>: <span class="string">'Japan'</span>,</div><div class="line">                             <span class="string">'Taekwondo'</span>: <span class="string">'South Korea'</span>&#125;)</div><div class="line">cricket_loving_countries = pd.Series([<span class="string">'Australia'</span>,</div><div class="line">                                      <span class="string">'Barbados'</span>,</div><div class="line">                                      <span class="string">'Pakistan'</span>,</div><div class="line">                                      <span class="string">'England'</span>], </div><div class="line">                                   index=[<span class="string">'Cricket'</span>,</div><div class="line">                                          <span class="string">'Cricket'</span>,</div><div class="line">                                          <span class="string">'Cricket'</span>,</div><div class="line">                                          <span class="string">'Cricket'</span>])</div><div class="line">all_countries = original_sports.append(cricket_loving_countries)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">original_sports </div><div class="line">Archery           Bhutan</div><div class="line">Golf            Scotland</div><div class="line">Sumo               Japan</div><div class="line">Taekwondo    South Korea</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cricket_loving_countries</div><div class="line"></div><div class="line">Cricket        Australia</div><div class="line">Cricket         Barbados</div><div class="line">Cricket         Pakistan</div><div class="line">Cricket          England</div><div class="line">dtype: object</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">all_countries</div><div class="line"></div><div class="line">Archery           Bhutan</div><div class="line">Golf            Scotland</div><div class="line">Sumo               Japan</div><div class="line">Taekwondo    South Korea</div><div class="line">Cricket        Australia</div><div class="line">Cricket         Barbados</div><div class="line">Cricket         Pakistan</div><div class="line">Cricket          England</div><div class="line">dtype: object</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作、清理和查询资料使用Pandas工具库&quot;&gt;&lt;a href=&quot;#操作、清理和查询资料使用Pandas工具库&quot; class=&quot;headerlink&quot; title=&quot;操作、清理和查询资料使用Pandas工具库&quot;&gt;&lt;/a&gt;操作、清理和查询资料使用Pandas工具库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created in 2008 by Wes McKinney&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open source New BSD license&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;100 different contributors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heavily used by pandas developers instead of a mailing list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://stackoverflow.com&lt;/a&gt; pandas社群使用它来当做第一资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning the Pandas Library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://planetpython.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://planetpython.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Excellent blog aggregator for python related news&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Significant number of data science and python tutorials are posted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great blend of applied beginner and higher level python postings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://dataskeptic.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://dataskeptic.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kyle Polich,created in 2014&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Covers data science more&lt;/p&gt;
&lt;p&gt;generally,including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mini educational lessons&lt;/li&gt;
&lt;li&gt;Interviews&lt;/li&gt;
&lt;li&gt;Trends&lt;/li&gt;
&lt;li&gt;Shared community project(OpenHourse)
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>关于Python数据分析初解</title>
    <link href="http://adamzeng.site/2017/12/28/%E5%85%B3%E4%BA%8EPython%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%9D%E8%A7%A3/"/>
    <id>http://adamzeng.site/2017/12/28/关于Python数据分析初解/</id>
    <published>2017-12-28T11:54:21.000Z</published>
    <updated>2017-12-30T15:38:47.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><ul><li><p>Draw Conway perspective on data science:<a id="more"></a></p><ul><li>Hacking Skills</li><li>Math and Statistics Knowledge</li><li>Substantive Expertise</li></ul></li><li><p>Other data science perspectives:</p><ul><li><p>Skepticism,experimentation,</p><p>simulation,and replication</p></li></ul></li></ul><p>Data science:</p><ul><li>Data Exploration and Preparation</li><li>Data Representation and Transformation</li><li>Computing with Data</li><li>Data Modeling</li><li>Data Visualization and Presentation</li><li>Science about Data Science</li></ul><p>在课程中，讲师有一句强调的话，slicing is the core of Python language!也就是说切片是Python语言的核心，它是整个数据科学的基础。特别当你开始进行matrix的操作时。</p><p>插入format版的代码更加易于使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sales_record=&#123;<span class="string">'price'</span>: <span class="number">3.24</span>,</div><div class="line">             <span class="string">'num_items'</span>: <span class="number">4</span>,</div><div class="line">             <span class="string">'person'</span>: <span class="string">'Chris'</span>&#125;</div><div class="line"></div><div class="line">sales_statement=<span class="string">'&#123;&#125; bought &#123;&#125; item(s) at price of &#123;&#125; each for a total of &#123;&#125;'</span></div><div class="line"></div><div class="line">print(sales_statement.format(sales_record[<span class="string">'person'</span>],</div><div class="line">                            sales_record[<span class="string">'num_items'</span>],</div><div class="line">                            sales_record[<span class="string">'price'</span>],</div><div class="line">                            sales_record[<span class="string">'num_items'</span>]*sales_record[<span class="string">'price'</span>]))</div></pre></td></tr></table></figure><h3 id="关于时间与日期"><a href="#关于时间与日期" class="headerlink" title="关于时间与日期"></a>关于时间与日期</h3><p>在一定给定时间，找到销售平均次数，选择产品列表，来做资料数据挖掘，用在特定时期内的购买数据，或试图找到最活跃的时期在线上讨论论坛系统。</p><p>用于存储日期最常用的传统方法之一，时间在网上交易系统是基于从纪元的偏移量，这个纪元是1970年1月1日。这里有很多历史记录，但并不罕见看到系统存储自该日期起的交易时间（用秒或毫秒）。所以如果你看到很大的数字，而你希望看到日期和时间，你需要转换它们，使数据变得有意义。</p><p>在Python中，你可以获得从纪元计算来的目前时间，使用时间模组。然后，可以创建时间戳记，使用‘从时间戳记函数’在日期时间的物件。</p><p>time module 中time.time()返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</p><h3 id="timestamp转换为datetime"><a href="#timestamp转换为datetime" class="headerlink" title="timestamp转换为datetime"></a>timestamp转换为datetime</h3><p>要把timestamp转换为<code>datetime</code>，使用<code>datetime</code>提供的<code>fromtimestamp()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line">t=<span class="number">1429417200.0</span></div><div class="line">print(datetime.fromtimestamp(t))</div><div class="line"></div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure><h3 id="Advanced-Python-Objects-map"><a href="#Advanced-Python-Objects-map" class="headerlink" title="Advanced Python Objects,map()"></a>Advanced Python Objects,map()</h3><p>了解map函数的官方定义：</p><p>map(function,iterable,…)</p><p>Return an iterator that applies function to every item of iterable,yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inpits are already arranged into argument tuples, see itertools.starmap().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">store1=[<span class="number">10.00</span>,<span class="number">11.00</span>,<span class="number">12.34</span>,<span class="number">2.34</span>]</div><div class="line">store2=[<span class="number">9.00</span>,<span class="number">11.10</span>,<span class="number">12.34</span>,<span class="number">2.01</span>]</div><div class="line">cheapest=map(min,store1,store2)</div><div class="line">cheapest</div><div class="line"></div><div class="line"></div><div class="line">&lt;map at <span class="number">0x7faf8c2c7240</span>&gt;</div></pre></td></tr></table></figure><p>map是可以反复运算，就像列表和元组，因此我们可以使用for loop来迭代来查看map中的所有值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">people = [<span class="string">'Dr. Christopher Brooks'</span>, <span class="string">'Dr. Kevyn Collins-Thompson'</span>, <span class="string">'Dr. VG Vinod Vydiswaran'</span>, <span class="string">'Dr. Daniel Romero'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_title_and_name</span><span class="params">(person)</span>:</span></div><div class="line">    titles=person.split(<span class="string">" "</span>)[<span class="number">0</span>]</div><div class="line">    last_names=person.split(<span class="string">" "</span>)[<span class="number">2</span>]</div><div class="line">    <span class="keyword">return</span> titles,last_names<span class="comment">#Your answer here</span></div><div class="line"></div><div class="line">print(list(map(split_title_and_name,people)))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[(<span class="string">'Dr.'</span>, <span class="string">'Brooks'</span>), (<span class="string">'Dr.'</span>, <span class="string">'Collins-Thompson'</span>), (<span class="string">'Dr.'</span>, <span class="string">'Vinod'</span>), (<span class="string">'Dr.'</span>, <span class="string">'Romero'</span>)]</div></pre></td></tr></table></figure><h3 id="Advanced-Python-Lambda-and-List-Comprehensions"><a href="#Advanced-Python-Lambda-and-List-Comprehensions" class="headerlink" title="Advanced Python Lambda and List Comprehensions"></a>Advanced Python Lambda and List Comprehensions</h3><p>Lambda是Python的方法创建不具名函数。这些与其他函数相同，但没有名称，意图在于它们很简单或短暂使用，它容易，只需要在一行中就能够写出函数，而不必麻烦的去创建一个有名称函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">my_function=<span class="keyword">lambda</span> a, b, c : a + b</div><div class="line">my_function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure><p>相比完善的函数定义，lambda只能用于单个计算式，而且不能设默认值。</p><p>但我认为在简单的小数据清理任务，它们是非常有用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">people = [<span class="string">'Dr. Christopher Brooks'</span>, <span class="string">'Dr. Kevyn Collins-Thompson'</span>, <span class="string">'Dr. VG Vinod Vydiswaran'</span>, <span class="string">'Dr. Daniel Romero'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_title_and_name</span><span class="params">(person)</span>:</span></div><div class="line">    <span class="keyword">return</span> person.split()[<span class="number">0</span>] + <span class="string">' '</span> + person.split()[<span class="number">-1</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># option 1</span></div><div class="line"><span class="keyword">for</span> person <span class="keyword">in</span> people:</div><div class="line">    print(split_title_and_name(person) == (<span class="keyword">lambda</span> x: x.split()[<span class="number">0</span>] + <span class="string">' '</span> + x.split()[<span class="number">-1</span>])(person))</div><div class="line"></div><div class="line">    <span class="comment"># option 2</span></div><div class="line">    <span class="comment"># list(map(split_title_and_name, people)) == list(map(???))</span></div><div class="line">print(list(map(split_title_and_name,people))==list(map(<span class="keyword">lambda</span> x: x.split()[<span class="number">0</span>]+<span class="string">' '</span>+x.split()[<span class="number">-1</span>],people)))</div><div class="line"></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><p>sequence(序列)是我们可以遍历的结构和往往我们创建这些经由loop或从一个文件当中读取数据资料。</p><p>list comprehensions是类似lambda的浓缩格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_list=[]</div><div class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>):</div><div class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        my_list.append(number)</div><div class="line">    </div><div class="line">my_list</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">my_list=[number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>) <span class="keyword">if</span> number % <span class="number">2</span> ==<span class="number">0</span>]</div><div class="line">my_list</div></pre></td></tr></table></figure><p>有一个例题：（我认为很有代表性）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lowercase = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></div><div class="line">digits = <span class="string">'0123456789'</span></div><div class="line"></div><div class="line">answer = [a+b+c+d <span class="keyword">for</span> a <span class="keyword">in</span> lowercase <span class="keyword">for</span> b <span class="keyword">in</span> lowercase <span class="keyword">for</span> c <span class="keyword">in</span> digits <span class="keyword">for</span> d <span class="keyword">in</span> digits]</div><div class="line"></div><div class="line">print(answer)</div></pre></td></tr></table></figure><h3 id="Advance-Python-Demonstration-The-Numerical-Python-Library-Numpy"><a href="#Advance-Python-Demonstration-The-Numerical-Python-Library-Numpy" class="headerlink" title="Advance Python Demonstration: The Numerical Python Library(Numpy)"></a>Advance Python Demonstration: The Numerical Python Library(Numpy)</h3><p>Numpy使我们能够高效地工作在Python中的阵列（arrays)和矩阵（matrices)当中。</p><p>这部分API通过文档了解更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据分析&quot;&gt;&lt;a href=&quot;#数据分析&quot; class=&quot;headerlink&quot; title=&quot;数据分析&quot;&gt;&lt;/a&gt;数据分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Draw Conway perspective on data science:
    
    </summary>
    
      <category term="数据分析" scheme="http://adamzeng.site/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://adamzeng.site/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记一</title>
    <link href="http://adamzeng.site/2017/12/19/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://adamzeng.site/2017/12/19/mysql学习笔记一/</id>
    <published>2017-12-19T11:28:28.000Z</published>
    <updated>2017-12-28T14:49:56.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h4><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，<a id="more"></a></p><p>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。</p><p>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS)来存储和管理的大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><p>RDBMS即关系数据库管理系统（Relational Database Management System）的特点：</p><ol><li>数据以表格的形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据域</li><li>许多的行和列组成一张表单</li><li>若干的表单组成database</li></ol><h4 id="RDBMS-术语"><a href="#RDBMS-术语" class="headerlink" title="RDBMS 术语"></a>RDBMS 术语</h4><p>在我们开始学习MySQL数据库前，让我们先了解一下RDBMS的一些术语：</p><ul><li>数据库：数据库是一些关联表的集合。</li><li>数据表：表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列：一行（=元祖，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余可以使系统速度更快。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键:复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性：参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><p>####规范化表格的规则：</p><p><strong>1. 每行都具有相同数量的列。</strong><br>实际上，数据库系统不允许在不同的行里具有不同数量的列。但是如果某些列有时候为空，有时候不为空，或者如果我们将多个值放入一个字段里，我们可以调整下此规则。</p><p>拿动物园数据库中的 <strong>diet</strong> 表格为例。我们将某个物种会吃的多种食物放入多行，而不是放在一行里。这样的话，汇总和比较时就操作简单多了。</p><p><strong>2. 表格存在唯一键，一行里的所有内容都围绕该键展开。</strong><br>键可以是一列或多列。甚至可以是整行内容，就像 <strong>diet</strong> 表格一样。但是一个表格里没有重复的行。</p><p>更重要的是，如果我们要存储不是唯一的内容，例如人们的姓名，我们就使用唯一标识符（例如序列号）区分它们。这样可以确保我们不会将两个姓名相同的人的分数或违规停车罚单汇总到一起。</p><p><strong>3. 与唯一键不相关的内容放在其他表格中。</strong><br>例如 <strong>items</strong> 表格，里面有条目、它们的地点和地点的街道地址。地址不是关于条目的内容，它是关于地点的内容。将地址放到另一表格里可以节省空间，并避免造成混淆，我们始终可以使用 <strong>join</strong> 重新组成原始表格。</p><p><strong>4. 表格不应该暗示不存在的关系。</strong><br>例如 <strong>job_skills</strong> 表格，一行列出某人的技术技能（例如“Linux”）和某个语言技能（例如“法语”）。这样看起来就好像 Linux 技能是特定于法语，反之亦然，但现实中不是这种情况。规范化这一情况需要将技术技能和工作技能放在不同的表格里。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是数据库？&quot;&gt;&lt;a href=&quot;#什么是数据库？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库？&quot;&gt;&lt;/a&gt;什么是数据库？&lt;/h4&gt;&lt;p&gt;数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，
    
    </summary>
    
      <category term="Mysql" scheme="http://adamzeng.site/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://adamzeng.site/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>命名 统计 字典</title>
    <link href="http://adamzeng.site/2017/12/03/%E5%91%BD%E5%90%8D-%E7%BB%9F%E8%AE%A1-%E5%AD%97%E5%85%B8/"/>
    <id>http://adamzeng.site/2017/12/03/命名-统计-字典/</id>
    <published>2017-12-03T10:34:31.000Z</published>
    <updated>2017-12-03T14:59:22.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何为元组中的每个元素命名，提高程序可读性？"><a href="#如何为元组中的每个元素命名，提高程序可读性？" class="headerlink" title="如何为元组中的每个元素命名，提高程序可读性？"></a>如何为元组中的每个元素命名，提高程序可读性？</h3><p>学生信息系统中数据为固定格式：<a id="more"></a><br>（姓名，年龄，性别，邮箱地址，…）</p><p>学生数量很大为了减小存储开销，对每个学生信息用元组表示：</p><p>(‘Jim’,16,’male’,’jim8721@gmail.com’)</p><p>(‘LiLei’,17,’male’,’leile@qq.com’)</p><p>(‘Lucy’,16,’female’,’lucy123@yahoo.com’)</p><p>….</p><p>访问时，我们使用引索（index）访问，大量引索降低程序可读性，如何解决这个问题？</p><p>第一种方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">NAME,AGE,SEX,EMAIL=xrange(<span class="number">4</span>) <span class="comment">#将0，1，2，3赋给NAME,AGE,SEX,EMAIL这四个变量</span></div><div class="line"></div><div class="line">student=(<span class="string">'Jim'</span>,<span class="number">16</span>,<span class="string">'male'</span>,<span class="string">'jim8721@gmail.com'</span>)</div><div class="line"></div><div class="line"><span class="comment">#name</span></div><div class="line"><span class="comment">#print(student[0])</span></div><div class="line">print(student[NAME])</div><div class="line"></div><div class="line"><span class="comment">#age</span></div><div class="line"><span class="comment">#if student[1]&gt;18:</span></div><div class="line"><span class="comment">#if student[AGE]&gt;=18:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#sex</span></div><div class="line"><span class="comment">#if student[3]=='male':</span></div><div class="line"><span class="comment">#if student[SEX]=='male':</span></div></pre></td></tr></table></figure><p>第二种方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line">Student=namedtuple(<span class="string">'Student'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>,<span class="string">'email'</span>])</div><div class="line">s=Student(<span class="string">'Jim'</span>,<span class="number">16</span>,<span class="string">'male'</span>,<span class="string">'jim8721@gmail.com'</span>)</div><div class="line"></div><div class="line">print(s)</div><div class="line">s2=Student(name=<span class="string">'Jim'</span>, age=<span class="number">16</span>, sex=<span class="string">'male'</span>, email=<span class="string">'jim8721@gmail.com'</span>)</div><div class="line">print(s2)</div><div class="line"></div><div class="line">print(s.name)</div><div class="line">print(s.age)</div><div class="line">print(s.sex)</div><div class="line"></div><div class="line">print(isinstance(s,tuple))</div><div class="line"></div><div class="line">-----------------------------------------------</div><div class="line"></div><div class="line">Student(name=<span class="string">'Jim'</span>, age=<span class="number">16</span>, sex=<span class="string">'male'</span>, email=<span class="string">'jim8721@gmail.com'</span>)</div><div class="line">Student(name=<span class="string">'Jim'</span>, age=<span class="number">16</span>, sex=<span class="string">'male'</span>, email=<span class="string">'jim8721@gmail.com'</span>)</div><div class="line">Jim</div><div class="line"><span class="number">16</span></div><div class="line">male</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><h3 id="如何统计序列中元素的出现频度？"><a href="#如何统计序列中元素的出现频度？" class="headerlink" title="如何统计序列中元素的出现频度？"></a>如何统计序列中元素的出现频度？</h3><ol><li>某随机序列[12,5,6,4,6,5,5,7,…]中，找到出现次数最高的3个元素，它们出现次数是多少？</li></ol><ol><li>对某英文文章的单词，进行词频统计，找到出现次数最高的10个单词，它们出现次数是多少？</li></ol><p>######这是一种基本方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line">data=[randint(<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">30</span>)]</div><div class="line"></div><div class="line">print(data)</div><div class="line">c=dict.fromkeys(data,<span class="number">0</span>)</div><div class="line"></div><div class="line">print(c)</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</div><div class="line">    c[x]+=<span class="number">1</span></div><div class="line">print(c)</div><div class="line"></div><div class="line">-------------------------</div><div class="line">[<span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">18</span>]</div><div class="line">&#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">0</span>, <span class="number">3</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">0</span>, <span class="number">6</span>: <span class="number">0</span>, <span class="number">7</span>: <span class="number">0</span>, <span class="number">8</span>: <span class="number">0</span>, <span class="number">9</span>: <span class="number">0</span>, <span class="number">10</span>: <span class="number">0</span>, <span class="number">11</span>: <span class="number">0</span>, <span class="number">12</span>: <span class="number">0</span>, <span class="number">13</span>: <span class="number">0</span>, <span class="number">15</span>: <span class="number">0</span>, <span class="number">17</span>: <span class="number">0</span>, <span class="number">18</span>: <span class="number">0</span>, <span class="number">20</span>: <span class="number">0</span>&#125;</div><div class="line">&#123;<span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">6</span>: <span class="number">3</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">1</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">11</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">13</span>: <span class="number">1</span>, <span class="number">15</span>: <span class="number">4</span>, <span class="number">17</span>: <span class="number">3</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">20</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p>######第二种方法：</p><ul><li>使用collections.Counter对象</li><li>将序列传入Counter的构造器，得到Counter对象是元素频度的字典。</li><li>Counter.most_common(n)方法得到频度最高的n个元素的列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line">data=[randint(<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">30</span>)]</div><div class="line">print(data)</div><div class="line"></div><div class="line">c2=Counter(data)</div><div class="line">print(c2[<span class="number">10</span>])</div><div class="line">print(c2[<span class="number">19</span>])</div><div class="line"></div><div class="line">print(c2.most_common(<span class="number">3</span>))</div><div class="line">--------------------------</div><div class="line">[<span class="number">0</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">17</span>, <span class="number">3</span>)]</div></pre></td></tr></table></figure><p>针对第二个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">open(<span class="string">'Co'</span>)</div><div class="line"></div><div class="line">txt=open(<span class="string">'CodingStyle'</span>).read()</div><div class="line">c3=Counter(re.split(<span class="string">'\w+'</span>,txt))</div><div class="line"></div><div class="line">print(c3.most_common(<span class="number">10</span>))</div><div class="line">---------------------------</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何为元组中的每个元素命名，提高程序可读性？&quot;&gt;&lt;a href=&quot;#如何为元组中的每个元素命名，提高程序可读性？&quot; class=&quot;headerlink&quot; title=&quot;如何为元组中的每个元素命名，提高程序可读性？&quot;&gt;&lt;/a&gt;如何为元组中的每个元素命名，提高程序可读性？&lt;/h3&gt;&lt;p&gt;学生信息系统中数据为固定格式：
    
    </summary>
    
      <category term="Python" scheme="http://adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>列表，字典，集合筛选数据</title>
    <link href="http://adamzeng.site/2017/12/03/%E5%88%97%E8%A1%A8%EF%BC%8C%E5%AD%97%E5%85%B8%EF%BC%8C%E9%9B%86%E5%90%88%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>http://adamzeng.site/2017/12/03/列表，字典，集合筛选数据/</id>
    <published>2017-12-03T09:14:06.000Z</published>
    <updated>2017-12-03T13:31:55.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何在列表，字典，集合中根据条件筛选数据？"><a href="#如何在列表，字典，集合中根据条件筛选数据？" class="headerlink" title="如何在列表，字典，集合中根据条件筛选数据？"></a>如何在列表，字典，集合中根据条件筛选数据？</h2><h4 id="通用做法"><a href="#通用做法" class="headerlink" title="通用做法"></a>通用做法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">6</span>,<span class="number">8</span>]</div><div class="line"></div><div class="line">res=[]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</div><div class="line">    <span class="keyword">if</span> x&gt;=<span class="number">0</span>:</div><div class="line">        res.append(x)</div><div class="line"></div><div class="line">print(res)</div></pre></td></tr></table></figure><p>这是最常用的做法，然而还有更加好的解决方案。<a id="more"></a></p><p>解决方案：</p><ul><li><p>列表：</p><p>filter函数，列表解析</p></li><li><p>字典：</p><p>字典解析</p></li><li><p>集合：</p><p>集合解析</p></li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="这是过滤器的写法："><a href="#这是过滤器的写法：" class="headerlink" title="这是过滤器的写法："></a>这是过滤器的写法：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x:x&gt;=<span class="number">0</span>,data)</div></pre></td></tr></table></figure><p>#####这是列表解析的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x&gt;=<span class="number">0</span>]</div></pre></td></tr></table></figure><p>这两种方式都远快于迭代的方案。</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d=&#123;x:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">21</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="number">1</span>: <span class="number">76</span>, <span class="number">2</span>: <span class="number">84</span>, <span class="number">3</span>: <span class="number">79</span>, <span class="number">4</span>: <span class="number">93</span>, <span class="number">5</span>: <span class="number">63</span>, <span class="number">6</span>: <span class="number">62</span>, <span class="number">7</span>: <span class="number">72</span>, <span class="number">8</span>: <span class="number">96</span>, <span class="number">9</span>: <span class="number">71</span>, <span class="number">10</span>: <span class="number">85</span>, <span class="number">11</span>: <span class="number">60</span>, <span class="number">12</span>: <span class="number">100</span>, <span class="number">13</span>: <span class="number">76</span>, <span class="number">14</span>: <span class="number">64</span>, <span class="number">15</span>: <span class="number">79</span>, <span class="number">16</span>: <span class="number">89</span>, <span class="number">17</span>: <span class="number">75</span>, <span class="number">18</span>: <span class="number">88</span>, <span class="number">19</span>: <span class="number">91</span>, <span class="number">20</span>: <span class="number">97</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;k: v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.iteritems()<span class="keyword">if</span> v&gt;<span class="number">90</span>&#125;</div><div class="line">&#123;<span class="number">8</span>: <span class="number">96</span>, <span class="number">12</span>: <span class="number">100</span>, <span class="number">19</span>: <span class="number">91</span>, <span class="number">4</span>: <span class="number">93</span>, <span class="number">20</span>: <span class="number">97</span>&#125;</div></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data</div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">-10</span>, <span class="number">3</span>, <span class="number">-8</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s=set(data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">-10</span>, <span class="number">-8</span>, <span class="number">-2</span>]) <span class="comment">#其实与&#123;-5，-3，2，5，6，7，8，9&#125;相同</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> s <span class="keyword">if</span> x%<span class="number">3</span>==<span class="number">0</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="number">3</span>, <span class="number">6</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何在列表，字典，集合中根据条件筛选数据？&quot;&gt;&lt;a href=&quot;#如何在列表，字典，集合中根据条件筛选数据？&quot; class=&quot;headerlink&quot; title=&quot;如何在列表，字典，集合中根据条件筛选数据？&quot;&gt;&lt;/a&gt;如何在列表，字典，集合中根据条件筛选数据？&lt;/h2&gt;&lt;h4 id=&quot;通用做法&quot;&gt;&lt;a href=&quot;#通用做法&quot; class=&quot;headerlink&quot; title=&quot;通用做法&quot;&gt;&lt;/a&gt;通用做法&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;data=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;res=[]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.append(x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(res)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是最常用的做法，然而还有更加好的解决方案。
    
    </summary>
    
      <category term="Python" scheme="http://adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的*arg和**kwarg</title>
    <link href="http://adamzeng.site/2017/11/25/Python%E4%B8%AD%E7%9A%84-arg%E5%92%8C-kwarg/"/>
    <id>http://adamzeng.site/2017/11/25/Python中的-arg和-kwarg/</id>
    <published>2017-11-25T06:05:32.000Z</published>
    <updated>2017-11-25T09:12:06.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个简单的函数"><a href="#一个简单的函数" class="headerlink" title="一个简单的函数"></a>一个简单的函数</h1><p>首先我们可以定一个简单的函数, 函数内部只考虑<code>required_arg</code>这一个形参(<strong>位置参数</strong>)<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exmaple</span><span class="params">(required_arg)</span>:</span></div><div class="line">    <span class="keyword">print</span> required_arg</div><div class="line"></div><div class="line">exmaple(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line">&gt;&gt; Hello, World!</div></pre></td></tr></table></figure><p>那么，如果我们调用函数式传入了<strong>不止一个位置参数</strong>会出现什么情况？当然是会报错！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exmaple(<span class="string">"Hello, World!"</span>, <span class="string">"another string"</span>)</div><div class="line"></div><div class="line">&gt;&gt; TypeError: exmaple() takes exactly <span class="number">1</span> argument (<span class="number">2</span> given)</div></pre></td></tr></table></figure><h1 id="定义函数时，使用arg和-kwarg"><a href="#定义函数时，使用arg和-kwarg" class="headerlink" title="定义函数时，使用arg和*kwarg"></a>定义函数时，使用<em>arg和*</em>kwarg</h1><p><em>arg和*</em>kwarg 可以帮助我们处理上面这种情况，允许我们在调用函数的时候传入多个实参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exmaple2</span><span class="params">(required_arg, *arg, **kwarg)</span>:</span></div><div class="line">    <span class="keyword">if</span> arg:</div><div class="line">        <span class="keyword">print</span> <span class="string">"arg: "</span>, arg</div><div class="line"></div><div class="line">    <span class="keyword">if</span> kwarg:</div><div class="line">        <span class="keyword">print</span> <span class="string">"kwarg: "</span>, kwarg</div><div class="line"></div><div class="line">exmaple2(<span class="string">"Hi"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, keyword1 = <span class="string">"bar"</span>, keyword2 = <span class="string">"foo"</span>)</div><div class="line"></div><div class="line">&gt;&gt; arg:  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">&gt;&gt; kwarg:  &#123;<span class="string">'keyword2'</span>: <span class="string">'foo'</span>, <span class="string">'keyword1'</span>: <span class="string">'bar'</span>&#125;</div></pre></td></tr></table></figure><p>从上面的例子可以看到，当我传入了更多实参的时候</p><ul><li>*arg会把多出来的位置参数转化为<code>tuple</code></li><li>**kwarg会把关键字参数转化为<code>dict</code></li></ul><p>再举个例子，一个不设定参数个数的加法函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*arg)</span>:</span></div><div class="line">    res = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> arg:</div><div class="line">        res += e</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="keyword">print</span> sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> sum(<span class="number">1</span>, <span class="number">1</span>)</div><div class="line">&gt;&gt; <span class="number">10</span></div><div class="line">&gt;&gt; <span class="number">2</span></div></pre></td></tr></table></figure><p>当然，如果想控制关键字参数，可以单独使用一个*，作为特殊分隔符号。限于<code>Python 3</code>，下面例子中限定了只能有两个关键字参数，而且参数名为<code>keyword1</code>和<code>keyword2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def person(required_arg, *, keyword1, keyword2):</div><div class="line">    print(required_arg, keyword1, keyword2)</div><div class="line"></div><div class="line">person(&quot;Hi&quot;, keyword1=&quot;bar&quot;, keyword2=&quot;foo&quot;)</div><div class="line">&gt;&gt; Hi bar foo</div></pre></td></tr></table></figure><p>如果不传入参数名<code>keyword1</code>和<code>keyword2</code>会报错，因为都会看做<strong>位置参数</strong>！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">person(&quot;Hi&quot;, &quot;bar&quot;, &quot;foo&quot;)</div><div class="line"></div><div class="line">&gt;&gt; TypeError: person() takes 1 positional argument but 3 were given</div></pre></td></tr></table></figure><h1 id="调用函数时使用arg和-kwarg"><a href="#调用函数时使用arg和-kwarg" class="headerlink" title="调用函数时使用arg和*kwarg"></a>调用函数时使用<em>arg和*</em>kwarg</h1><p>直接上例子，跟上面的情况十分类似。反向思维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b + c</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment"># the * unpack list a </span></div><div class="line"><span class="keyword">print</span> sum(*a)</div><div class="line">&gt;&gt; <span class="number">6</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b + c</div><div class="line"></div><div class="line">a = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># the ** unpack dict a</span></div><div class="line"><span class="keyword">print</span> sum(**a)</div><div class="line">&gt;&gt; <span class="number">6</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个简单的函数&quot;&gt;&lt;a href=&quot;#一个简单的函数&quot; class=&quot;headerlink&quot; title=&quot;一个简单的函数&quot;&gt;&lt;/a&gt;一个简单的函数&lt;/h1&gt;&lt;p&gt;首先我们可以定一个简单的函数, 函数内部只考虑&lt;code&gt;required_arg&lt;/code&gt;这一个形参(&lt;strong&gt;位置参数&lt;/strong&gt;)
    
    </summary>
    
      <category term="Python" scheme="http://adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://adamzeng.site/tags/Python/"/>
    
  </entry>
  
</feed>
