<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AdamZeng</title>
  
  <subtitle>start from zero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.adamzeng.site/"/>
  <updated>2017-10-29T14:53:19.000Z</updated>
  <id>http://www.adamzeng.site/</id>
  
  <author>
    <name>AdamZeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是Deque</title>
    <link href="http://www.adamzeng.site/2017/10/29/%E4%BB%80%E4%B9%88%E6%98%AFDeque/"/>
    <id>http://www.adamzeng.site/2017/10/29/什么是Deque/</id>
    <published>2017-10-29T14:14:57.000Z</published>
    <updated>2017-10-29T14:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Deque"><a href="#什么是Deque" class="headerlink" title="什么是Deque"></a>什么是Deque</h1><p>deque（也称为双端队列）是与队列类似的项的有序集合。它有两个端部，首部和尾部，并且项在集合中保持不变。deque不同的地方是添加和删除项是非限制性的。可以在前面或后面添加新项。同样，可以从任一端移除现有项。在某种意义上，这种混合线性结构提供了单个数据结构中的栈和队列的所有能力。Figure 1展示了一个Python数据对象的deque。<a id="more"></a></p><p>要注意，即使deque可以拥有栈和队列的许多特性，它不需要由哪些数据结构强制的LIFO和FIFO排序。这取决于你如何持续添加和删除操作。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.15.%E4%BB%80%E4%B9%88%E6%98%AFDeque/assets/3.15.%E4%BB%80%E4%B9%88%E6%98%AFDeque.figure1-1.png" alt="image"></p><p><em>Figure 1</em></p><h3 id="Deque抽象数据类型"><a href="#Deque抽象数据类型" class="headerlink" title="Deque抽象数据类型"></a>Deque抽象数据类型</h3><p>deque抽象数据类型由以下结构和操作定义。如上所述，deque被构造为项的有序集合，其中项从首部或尾部的任一端添加和移除。下面给出了deque操作。</p><ul><li>Deque()创建一个空的新deque，它不需要参数，并返回空的deque。</li><li>addFront(item)将一个新项添加到deque首部。它需要item参数，并不返回任何内容。</li><li>addRear(item)将一个新项添加到deque尾部。它需要item参数，并不返回任何内容。</li><li>removeFront() 从 deque 中删除首项。它不需要参数并返回 item。deque 被修改。</li><li>removeRear() 从 deque 中删除尾项。它不需要参数并返回 item。deque 被修改。</li><li>isEmpty() 测试 deque 是否为空。它不需要参数，并返回布尔值。</li><li>size() 返回 deque 中的项数。它不需要参数，并返回一个整数。</li></ul><p>例如，我们假设 d 是已经创建并且当前为空的 deque，则 Table 1 展示了一系列 deque 操作的结果。注意，首部的内容列在右边。在将 item 移入和移出时，跟踪前面和后面是非常重要的，因为可能会有点混乱。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.16.Deque%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/assets/3.16.Deque%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.table1.png" alt="image"></p><p><em>Table 1</em></p><h3 id="Python实现Deque"><a href="#Python实现Deque" class="headerlink" title="Python实现Deque"></a>Python实现Deque</h3><p>正如我们在前面的部分中所做的，我们将为抽象数据类型deque的实现创建一个新类。同样，Python列表将提供一组非常好的方法来构建deque的细节。我们的实现（Listing 1）将假定deque的尾部在列表中的位置为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.items= []</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items==[]</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addFront</span><span class="params">(self,item)</span>:</span></div><div class="line">        self.items.append(item)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addRear</span><span class="params">(self,item)</span>:</span></div><div class="line">        self.items.insert(<span class="number">0</span>,item)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeFront</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeRear</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items.pop(<span class="number">0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div></pre></td></tr></table></figure><p><em>Listing 1</em></p><p>在removeFront中，我们使用pop方法从列表中删除最后一个元素。但是，在removeRear中，pop(0)方法必须删除列表的第一个元素。同样，我们需要在addRear中使用insert方法（第12行），因为append方法在列表末尾添加一个新元素。</p><p>你可以看到许多与栈和队列中描述的 Python 代码相似之处。你也可能观察到，在这个实现中，从前面添加和删除项是 O(1)，而从后面添加和删除是 O(n)。 考虑到添加和删除项是出现的常见操作，这是可预期的。 同样，重要的是要确定我们知道在实现中前后都分配在哪里。</p><h3 id="回文检查"><a href="#回文检查" class="headerlink" title="回文检查"></a>回文检查</h3><p>使用 deque 数据结构可以容易地解决经典回文问题。回文是一个字符串，读取首尾相同的字符，例如，<code>radar toot madam</code>。 我们想构造一个算法输入一个字符串，并检查它是否是一个回文。</p><p>该问题的解决方案将使用 deque 来存储字符串的字符。我们从左到右处理字符串，并将每个字符添加到 deque 的尾部。在这一点上，deque 像一个普通的队列。然而，我们现在可以利用 deque 的双重功能。 deque 的首部保存字符串的第一个字符，deque 的尾部保存最后一个字符（见 Figure 2）。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.18.%E5%9B%9E%E6%96%87%E6%A3%80%E6%9F%A5/assets/3.18.%E5%9B%9E%E6%96%87%E6%A3%80%E6%9F%A5.figure2.png" alt="image"></p><p><em>Figure 2</em></p><p>我们可以直接删除并比较首尾字符，只有当它们匹配时才继续。如果可以持续匹配首尾字符，我们最终要么用完字符，要么留出大小为1的deque，取决于原始字符串的长度是偶数还是奇数。在任一情况下，字符串都是回文。回文检查的完整功能在ActiveCode1中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.deque <span class="keyword">import</span> Deque</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">palchecker</span><span class="params">(aString)</span>:</span></div><div class="line">    chardeque=Deque()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> aString:</div><div class="line">        chardeque.addRear(ch)</div><div class="line"></div><div class="line">    stillEqual=<span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> chardeque.size()&gt;<span class="number">1</span> <span class="keyword">and</span> stillEqual:</div><div class="line">        first=chardeque.removeFront()</div><div class="line">        last=chardeque.removeRear()</div><div class="line">        <span class="keyword">if</span> first!=last:</div><div class="line">            stillEqual=<span class="keyword">False</span></div><div class="line">        </div><div class="line">            </div><div class="line">    <span class="keyword">return</span> stillEqual</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Deque&quot;&gt;&lt;a href=&quot;#什么是Deque&quot; class=&quot;headerlink&quot; title=&quot;什么是Deque&quot;&gt;&lt;/a&gt;什么是Deque&lt;/h1&gt;&lt;p&gt;deque（也称为双端队列）是与队列类似的项的有序集合。它有两个端部，首部和尾部，并且项在集合中保持不变。deque不同的地方是添加和删除项是非限制性的。可以在前面或后面添加新项。同样，可以从任一端移除现有项。在某种意义上，这种混合线性结构提供了单个数据结构中的栈和队列的所有能力。Figure 1展示了一个Python数据对象的deque。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>什么是队列</title>
    <link href="http://www.adamzeng.site/2017/10/29/%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%9F%E5%88%97/"/>
    <id>http://www.adamzeng.site/2017/10/29/什么是队列/</id>
    <published>2017-10-29T10:41:28.000Z</published>
    <updated>2017-10-29T14:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h1><p>队列是项的有序结合，其中添加新项的一端称为队尾，移除项的一端称为队首。当一个元素从队尾进入队列时，一直向队首移动，直到它成为下一个需要移除的元素为止。<a id="more"></a></p><p>最近添加的元素必须在队尾等待。集合中存活时间最长的元素在队首，这种排序成为 FIFO，先进先出，也被成为先到先得。</p><p>+</p><p>队列的最简单的例子是我们平时不时会参与的列。排队等待电影，在杂货店的收营台等待，在自助餐厅排队等待（这样我们可以弹出托盘栈）。行为良好的线或队列是有限制的，因为它只有一条路，只有一条出路。不能插队，也不能离开。你只有等待了一定的时间才能到前面。Figure 1 展示了一个简单的 Python 对象队列。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.10.%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%9F%E5%88%97/assets/3.10.%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%9F%E5%88%97.figure1.png" alt="image"></p><p><em>Figure 1</em></p><p>计算机科学也有常见的队列示例。我们的计算机实验室有 30 台计算机与一台打印机联网。当学生想要打印时，他们的打印任务与正在等待的所有其他打印任务“一致”。第一个进入的任务是先完成。如果你是最后一个，你必须等待你前面的所有其他任务打印。我们将在后面更详细地探讨这个有趣的例子。</p><p>除了打印队列，操作系统使用多个不同的队列来控制计算机内的进程。下一步做什么的调度通常基于尽可能快地执行程序和尽可能多的服务用户的排队算法。此外，当我们敲击键盘时，有时屏幕上出现的字符会延迟。这是由于计算机在那一刻做其他工作。按键的内容被放置在类似队列的缓冲器中，使得它们最终可以以正确的顺序显示在屏幕上。</p><h3 id="1-队列抽象数据类型"><a href="#1-队列抽象数据类型" class="headerlink" title="1.队列抽象数据类型"></a>1.队列抽象数据类型</h3><p>队列抽象数据类型由以下结构和操作定义。如上所述，队列被构造为在队尾添加项的有序集合，并且从队首移除。队列保持FIFO属性。队列操作如下。</p><ul><li>Queue()创建一个空的新队列。它不需要参数，并返回一个空队列。</li><li>enqueue（item）将新项添加到队尾。它需要item作为参数，并不返回任何内容。</li><li>dequeue()从队首移除项。它不需要参数并返回item。队列被修改。</li><li>isEmpty()查看队列是否为空。它不需要参数，并返回布尔值。</li><li>size（）返回队列中的项数。它不需要参数，并返回一个整数。</li></ul><p>作为示例，我们假设q是已经创建并且当前为空的队列，则Table 1展示了队列操作序列的结果。右边表示队首。4是第一个入队的项，因此它dequeue返回的第一个项。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.11.%E9%98%9F%E5%88%97%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/assets/3.11.%E9%98%9F%E5%88%97%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.table1.png" alt="image"></p><h3 id="2-Python实现队列"><a href="#2-Python实现队列" class="headerlink" title="2.Python实现队列"></a>2.Python实现队列</h3><p>我们为了实现队列抽象数据类型创建一个新类。和前面一样，我们将使用列表集合来作为构建队列的内部表示。</p><p>我们需要确定列表的哪一端作为队首，哪一端作为队尾。Listing 1 所示的实现假定队尾在列表中的位置为 0。这允许我们使用列表上的插入函数向队尾添加新元素。弹出操作可用于删除队首的元素（列表的最后一个元素）。回想一下，这也意味着入队为 O(n)，出队为 O(1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.items = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items == []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, item)</span>:</span></div><div class="line">        self.items.insert(<span class="number">0</span>,item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div><div class="line"></div><div class="line">Listing <span class="number">1</span></div><div class="line">进一步的操作这个队列产生如下结果：</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.size()</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.isEmpty()</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.enqueue(<span class="number">8.4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.dequeue()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.dequeue()</div><div class="line"><span class="string">'dog'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.size()</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><h3 id="3-模拟：烫手山芋"><a href="#3-模拟：烫手山芋" class="headerlink" title="3.模拟：烫手山芋"></a>3.模拟：烫手山芋</h3><p>队列的应用之一是模拟需要以FIFO方式管理数据的真是场景。首先，让我们看看孩子们的游戏烫手山芋，在这个游戏中（见Figure 2),孩子们围成一个圈，并尽可能快的将一个山芋递给旁边的孩子。在某一个时间，动作结束，有山芋的孩子从圈中移除。游戏继续开始知道剩下最后一个孩子。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.13.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E7%83%AB%E6%89%8B%E5%B1%B1%E8%8A%8B/assets/3.13.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E7%83%AB%E6%89%8B%E5%B1%B1%E8%8A%8B.figure2.png" alt="image"></p><p><em>Figure 2</em></p><p>这个游戏相当于著名的约瑟夫问题，一个一世纪著名历史学家弗拉维奥·约瑟夫斯的传奇故事。故事讲的是，他和他的39个战友被罗马军队包围在洞中。他们决定宁愿死，也不成为罗马人的奴隶。他们围成一个圈，其中一人被指定为第一个人，顺时针报数到第七人，就将他杀死。约瑟夫斯是一个成功的数学家，他立即想出了应该坐到哪才能成为最后一人。最后，他加入了罗马的一方，而不是杀了自己。你可以找到这个故事的不同版本，有些说是每次报数 3 个人，有人说允许最后一个人逃跑。无论如何，思想是一样的。</p><p>我们将模拟这个烫手芋的过程，我们的程序将输入名称列表和一个称为num常量用于报数。它将返回以num为单位重复报数后剩余的最后一个人的姓名。</p><p>为了模拟这个圈，我们使用队列（见Figure 3）。假设拿着山芋的孩子在队列的前面。当拿到山芋的时候，这个孩子将先出列再入队列，把他放在队列的最后。经过num次的出队入队后，前面的孩子将被永久移除队列。并且另一个周期开始，继续此过程，直到另一个周期的开始，继续此过程，直到只剩下一个名字（队列的大小为1）。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.13.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E7%83%AB%E6%89%8B%E5%B1%B1%E8%8A%8B/assets/3.13.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E7%83%AB%E6%89%8B%E5%B1%B1%E8%8A%8B.figure3.png" alt="image"></p><p><em>Figure 3</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hotPotato</span><span class="params">(namelist, num)</span>:</span></div><div class="line">    simqueue = Queue()</div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> namelist:</div><div class="line">        simqueue.enqueue(name)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> simqueue.size() &gt; <span class="number">1</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">            simqueue.enqueue(simqueue.dequeue())</div><div class="line"></div><div class="line">        simqueue.dequeue()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> simqueue.dequeue()</div><div class="line"></div><div class="line">print(hotPotato([<span class="string">"Bill"</span>,<span class="string">"David"</span>,<span class="string">"Susan"</span>,<span class="string">"Jane"</span>,<span class="string">"Kent"</span>,<span class="string">"Brad"</span>],<span class="number">7</span>))</div></pre></td></tr></table></figure><p><em>Active code 1</em></p><p>请注意，在此示例中，计数常数的值大于列表中的名称数。这不是一个问题，因为队列像一个圈，计数会重新回到开始，直到达到计数值。另外，请注意，列表加载到队列中以使列表上的名字位于队列的前面。在这种情况下，<code>Bill</code> 是列表中的第一个项，因此他在队列的前面。</p><h3 id="4-模拟：打印机"><a href="#4-模拟：打印机" class="headerlink" title="4.模拟：打印机"></a>4.模拟：打印机</h3><p>一个更有趣的模拟是允许我们研究本节前面描述的打印机的行为，回想一下，当学生向共享打印机发送打印任务时，任务被放置在队列中以便以先来先服务的方式被处理。此配置会出现许多问题。其中最重要的点可能是打印机是否能够处理一定量的工作。如果它不能，学生将等待太长时间打印，可能会错过他们的下一节课。</p><p>在计算机科学实验室里考虑下面的情况。平均每天大约10名学生在任何给定时间在实验室工作。这些学生通常在此期间打印两次，这些任务的长度范围从1到20页。实验室中的打印机较旧，每分钟以草稿质量可以处理10页。打印机可以切换以提供更好的质量，但是它将每分钟只能处理五页。较慢的打印速度可能会使学生等待太久。应使用什么页面速率？</p><p>我们可以通过建立一个模拟实验来决定。我们将需要为学生，打印任务和打印机构建表现表示（Figure 4）。当学生提交打印任务时，我们将把他们添加到等待列表中，一个打印任务的队列。 当打印机完成任务时，它将检查队列，以检查是否有剩余的任务要处理。我们感兴趣的是学生等待他们的论文打印的平均时间。这等于任务在队列中等待的平均时间量。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.14.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9C%BA/assets/3.14.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9C%BA.figure4.png" alt="image"></p><p><em>Figure 4</em></p><p>为了为这种情况建模，我们需要使用一些概率。例如，学生可以打印长度从1到20页的纸张、如果从1到20的每个长度有同样的可能性。则可以通过使用1和20之间的随机数来模拟打印任务的实际长度。这意味着出现从1到20的任何长度的机会是平等的。如果实验室中有10个学生，每人打印两次，则平均每小时有20个打印任务。在任何给定的秒，打印任务将被创建的机会是什么？回答这个问题的方法时考虑任务与时间的比率。每小时20个任务意味着平均每180秒将有一个任务：<br><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.14.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9C%BA/assets/3.14.%E6%A8%A1%E6%8B%9F%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9C%BA.figure1.png" alt="image"></p><p>对于每一秒，我们可以通过生成1到180之间的随机数来模拟打印任务发生的机会。如果数字是180，我们说一个任务已经创建。请注意，可能会在一下子创建许多任务，或者需要等待一段时间才有任何。这就是模拟的本质。你想模拟真实的情况就需要尽可能接近一般参数。</p><h4 id="主要模拟步骤"><a href="#主要模拟步骤" class="headerlink" title="主要模拟步骤"></a>主要模拟步骤</h4><ol><li>创建打印任务的队列，每个任务都有个时间戳。队列启动的时候为空。</li><li>每秒（currentSecond）：<ul><li>是否创建新的打印任务？如果是，将 <code>currentSecond</code> 作为时间戳添加到队列。</li><li>如果打印机不忙并且有任务在等待<ul><li>从打印机队列中删除一个任务并将其分配给打印机</li><li>从 <code>currentSecond</code> 中减去时间戳，以计算该任务的等待时间。</li><li>将该任务的等待时间附件到列表中稍后处理。</li><li>根据打印任务的页数，确定需要多少时间。</li></ul></li><li>打印机需要一秒打印，所以得从该任务的所需的等待时间减去一秒。</li><li>如果任务已经完成，换句话说，所需的时间已经达到零，打印机空闲。</li></ul></li><li>模拟完成后，从生成的等待时间列表中计算平均等待时间。</li></ol><h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><p>为了设计此模拟，我们将为上述三个真实世界创建类：Printer，Task，PrintQueue</p><p>Printer类（Listing 2）需要跟踪它当前是否有任务。如果有，则它处于忙碌状态（13-17行），并且可以从任务的页数计算所需的时间。构造函数允许初始化每分钟页面的配置，tick方法将内部定时器递减知道打印机设置为空闲（11行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ppm)</span>:</span></div><div class="line">        self.pagerate = ppm</div><div class="line">        self.currentTask = <span class="keyword">None</span></div><div class="line">        self.timeRemaining = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tick</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.currentTask != <span class="keyword">None</span>:</div><div class="line">            self.timeRemaining = self.timeRemaining - <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> self.timeRemaining &lt;= <span class="number">0</span>:</div><div class="line">                self.currentTask = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">busy</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.currentTask != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startNext</span><span class="params">(self,newtask)</span>:</span></div><div class="line">        self.currentTask = newtask</div><div class="line">        self.timeRemaining = newtask.getPages() * <span class="number">60</span>/self.pagerate</div><div class="line">        </div><div class="line">        <span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,time)</span>:</span></div><div class="line">        self.timestamp = time</div><div class="line">        self.pages = random.randrange(<span class="number">1</span>,<span class="number">21</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStamp</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.timestamp</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPages</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.pages</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">waitTime</span><span class="params">(self, currenttime)</span>:</span></div><div class="line">        <span class="keyword">return</span> currenttime - self.timestamp</div><div class="line">      </div><div class="line">      <span class="keyword">from</span> pythonds.basic.queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simulation</span><span class="params">(numSeconds, pagesPerMinute)</span>:</span></div><div class="line"></div><div class="line">    labprinter = Printer(pagesPerMinute)</div><div class="line">    printQueue = Queue()</div><div class="line">    waitingtimes = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> currentSecond <span class="keyword">in</span> range(numSeconds):</div><div class="line"></div><div class="line">      <span class="keyword">if</span> newPrintTask():</div><div class="line">         task = Task(currentSecond)</div><div class="line">         printQueue.enqueue(task)</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">not</span> labprinter.busy()) <span class="keyword">and</span> (<span class="keyword">not</span> printQueue.isEmpty()):</div><div class="line">        nexttask = printQueue.dequeue()</div><div class="line">        waitingtimes.append(nexttask.waitTime(currentSecond))</div><div class="line">        labprinter.startNext(nexttask)</div><div class="line"></div><div class="line">      labprinter.tick()</div><div class="line"></div><div class="line">    averageWait=sum(waitingtimes)/len(waitingtimes)</div><div class="line">    print(<span class="string">"Average Wait %6.2f secs %3d tasks remaining."</span>%(averageWait,printQueue.size()))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newPrintTask</span><span class="params">()</span>:</span></div><div class="line">    num = random.randrange(<span class="number">1</span>,<span class="number">181</span>)</div><div class="line">    <span class="keyword">if</span> num == <span class="number">180</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    simulation(<span class="number">3600</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure><h4 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h4><p>我们试图回答一个问题，即当前打印机是否可以处理任务负载，如果它设置为打印更好的质量，较慢的页面速率。我们采用一个方法是编写一个模拟打印作为各种页数和到达时间的随机事件的模拟。</p><p>上面的输出显示，每分钟打印5页，平均等待时间从低的17秒到高的376秒（约6分钟）。使用更快的打印速旅，低值为1秒，高值仅为 28。此外，在 10 次运行中的 8 次，每分钟 5 页，打印任务在结束时仍在队列中等待。</p><p>因此，我们说减慢打印机的速度以获得更好的质量可能不是一个好主意。学生们不能等待他们的论文打印完，特别是当他们需要到下一个班级。六分钟的等待时间太长了。</p><p>这种类型的模拟分析允许我们回答许多问题，通常被称为“如果”的问题。我们需要做的是改变模拟使用的参数，我们可以模拟任何数量。例如</p><ul><li>如果入学人数增加，平均学生人数增加20人，该怎么办？</li><li>如果是星期六，学生不需要上课怎么办？他们能负担的了吗？</li><li>如果平均打印任务的大小减少了，由于Python是一个强大的语言，程序往往要短得多？</li></ul><p>这些问题都可以通过修改上述模拟来回答。然而，重要的是要记住，模拟有效取决于构建它的假设是没问题的。关于每小时打印任务的数量和每小时的学生数量的真实数据对于构建鲁棒性的模拟是必要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是队列&quot;&gt;&lt;a href=&quot;#什么是队列&quot; class=&quot;headerlink&quot; title=&quot;什么是队列&quot;&gt;&lt;/a&gt;什么是队列&lt;/h1&gt;&lt;p&gt;队列是项的有序结合，其中添加新项的一端称为队尾，移除项的一端称为队首。当一个元素从队尾进入队列时，一直向队首移动，直到它成为下一个需要移除的元素为止。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>生活</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E7%94%9F%E6%B4%BB/"/>
    <id>http://www.adamzeng.site/2017/10/27/生活/</id>
    <published>2017-10-27T12:23:08.000Z</published>
    <updated>2017-10-27T12:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近缺乏睡眠，很多东西想了解的感觉不容易了解，很多时候发现精力很难跟上！<a id="more"></a></p><p>希望能够跟上各位大佬的脚步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近缺乏睡眠，很多东西想了解的感觉不容易了解，很多时候发现精力很难跟上！
    
    </summary>
    
      <category term="生活" scheme="http://www.adamzeng.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://www.adamzeng.site/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>中缀前缀和后缀表达式</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.adamzeng.site/2017/10/27/中缀前缀和后缀表达式/</id>
    <published>2017-10-27T09:13:24.000Z</published>
    <updated>2017-10-27T12:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>当你编写一个算术表达式如 <code>B*C</code> 时，表达式的形式使你能够正确理解它。在这种情况下，你知道 B 乘以 C, 因为乘法运算符 <code>*</code> 出现在表达式中。这种类型的符号称为中缀，因为运算符在它处理的两个操作数之间。看另外一个中缀示例，<code>A+B*C</code>，运算符 <code>+</code> 和 <code>*</code> 仍然出现在操作数之间。这里面有个问题是，他们分别作用于哪个运算数上，<code>+</code> 作用于 A 和 B , 还是 <code>*</code> 作用于 B 和 C？表达式似乎有点模糊。<a id="more"></a></p><p>事实上，你已经读写过这些类型的表达式很长一段时间，所以它们对你不会导致什么问题。这是因为你知道运算符 <code>+</code>和 <code>*</code>。每个运算符都有一个优先级。优先级较高的运算符在优先级较低的运算符之前使用。唯一改变顺序的是括号的存在。算术运算符的优先顺序是将乘法和除法置于加法和减法之上。如果出现具有相等优先级的两个运算符，则使用从左到右的顺序排序或关联。</p><p>我们使用运算符优先级来解释下表达式 <code>A+B*C</code>。B 和 C 首先相乘，然后将 A 与该结果相加。<code>(A+B)*C</code> 将强制在乘法之前执行 A 和 B 的加法。在表达式 <code>A+B+C</code> 中，最左边的 + 首先使用。</p><p>虽然这一切对你来说都很明显。但请记住，计算机需要准确知道要执行的操作符和顺序。一种保证不会对操作顺序产生混淆的表达式的方法是创建一个称为完全括号表达式的表达式。这种类型的表达式对每个运算符都使用一对括号。括号没有歧义的指示操作的顺序。也没有必要记住任何优先规则。</p><p>有两种非常重要的表达式格式，你可能一开始不会很明显的看出来。中缀表达式 <code>A+B</code>, 如果我们移动两个操作数之间的运算符会发生什么？结果表达式变成 <code>+ A B</code>。同样，我们也可以将运算符移动到结尾，得到 <code>A B +</code> ，这样看起来有点奇怪。</p><p>改变操作符的位置得到了两种新的表达式格式，前缀和后缀。前缀表达式符号要求所有运算符在它们处理的两个操作数之前。另一个方面，后缀要求其操作符在相应的操作数之后。看下更多的例子 (见 Table 2)</p><p><code>A+B*C</code> 将在前缀中写为 <code>+ A * B C</code> 。乘法运算符紧接在操作数 B 和 C 之前，表示 <code>*</code> 优先于 <code>+</code>。然后加法运算符出现在 A 和乘法的结果之前。</p><p>在后缀中，表达式将是 <code>A B C * +</code>，再次，操作的顺序被保留，因为 <code>*</code> 紧接在 B 和 C 之后出现，表示 <code>*</code> 具有高优先级，<code>+</code> 优先级低。虽然操作符在它们各自的操作数前后移动，但是顺序相对于彼此保持完全相同。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.table2.png" alt="image"></p><p><em>table 2</em></p><p>现在考虑中缀表达式 <code>(A + B) * C</code>，回想下，在这种情况下，中缀需要括号在乘法之前强制执行加法。然而，当 A+B 写到前缀中时，加法运算符简单的移动到操作数 <code>+ A B</code> 之前。这个操作的结果成为乘法的第一个操作数。乘法运算符移动到整个表达式的前面，得出 <code>* + A B C</code>，同样，在后缀 <code>A B +</code>中，强制先加法。可以直接对该结果和剩余的操作数 C 相乘。然后，得出后缀表达式为 <code>A B + C *</code>。</p><p>再次考虑这三个表达式(见 Table 3)，括号不见了。为什么在前缀和后缀的时候不需要括号了呢？答案是操作符对于他们的操作数不再模糊，只有中缀才需要括号，前缀和后缀表达式的操作顺序完全由操作符的顺序决定。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.table3.png" alt="image"></p><p><em>table 3</em></p><p>Table 4 展示了一些其他的例子</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.table4.png" alt="image"></p><p><em>table 4</em></p><h4 id="1-中缀表达式转换前缀和后缀"><a href="#1-中缀表达式转换前缀和后缀" class="headerlink" title="1.中缀表达式转换前缀和后缀"></a>1.中缀表达式转换前缀和后缀</h4><p>到目前为止，我们已经使用特定方法在中缀表达式和等效前缀和后缀表达式符号之间进行转换。正如你可能期望的，有一些算法来执行转换，允许任何复杂表达式转换。</p><p>我们考虑的第一种技术使用前面讨论的完全括号表达式的概念。回想一下，<code>A + B * C</code>可以写成<code>（A +（B * C））</code>，以明确标识乘法优先于加法。然而，仔细观察，你可以看到每个括号对还表示操作数对的开始和结束，中间有相应的运算符。</p><p>看上面的子表达式<code>（B * C）</code>中的右括号。如果我们将乘法符号移动到那个位置，并删除匹配的左括号，得到得到 <code>B C *</code>，我们实际上已经将子表达式转换为后缀符号。如果加法运算符也被移动到其相应的右括号位置并且匹配的左括号被去除，则将得到完整的后缀表达式。（见Figure 6）。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure6.png" alt="image"></p><p><em>Figure 6</em></p><p>如果我们不是将符号移动到右括号的位置，我们将它向左移动，我们得到前缀符号（见 Figure 7）。圆括号对的位置实际上是包含的运算符的最终未知的线索。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure7.png" alt="image"></p><p><em>Figure 7</em></p><p>所以为了转换表达式，无论是对前缀还是后缀符号，先根据操作的顺序把表达式转换成完全括号表达式。然后将包含的预算符移动到左或右括号的位置，具体取决于需要的前缀或后缀符号。</p><p>这里面有个更复杂的例子， <code>(A + B) * C - (D - E) * (F + G)</code> ，Figure 8显示了如何转换为后缀和前缀。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure8.png" alt="image"></p><p><em>Figure 8</em></p><h4 id="1-中缀转后缀通用法"><a href="#1-中缀转后缀通用法" class="headerlink" title="1.中缀转后缀通用法"></a>1.中缀转后缀通用法</h4><p>我们需要开发一个算法来将任何中缀表达式转换为后缀表达式。为了做到这一点，我们仔细看看转换过程。</p><p>再次考虑表达式 <code>A + B * C</code>。如上所示，<code>A B C * +</code>是等价的后缀表达式。 我们已经注意到，操作数A,B,C保持在它们的相对位置。只有操作符改变位置。再看中缀表达式中的运算符。从左到右出现的第一个运算符为+。然而，在后缀表达式中，+在结束位置，因为下一个运算符*的优先级高于加法。原始表达式中的运算符的顺序在生成的后缀表达式中相反。</p><p>当我们处理表达式时，操作符必须保存在某处，因为它们相应的右操作数还没有看到。此外，这些保存的操作符的顺序可能由于它们的优先级而需要反转。这是在该示例中的加法和乘法的情况。由于加法运算符在乘法运算符之前，并且具有较低的优先级，因此需要在使用乘法运算符之后出现。由于这种顺序的反转，考虑使用栈来保存运算符知道用到它们是有意义的。</p><p><code>(A + B)* C</code>的情况会是什么样呢？ 回想一下，<code>A B + C *</code>是等价的后缀表达式。从左到右处理此中缀表达式，我们先看到 <code>+</code>。 在这种情况下，当我们看到 <code>*</code>，<code>+</code>已经放置在结果表达式中，由于括号它的优先级高于<code>*</code>。 我们现在可以开始看看转换算法如何工作。当我们看到左括号时，我们保存它，表示高优先级的另一个运算符将出现。该操作符需要等到相应的右括号出现以表示其位置（回忆完全括号的算法）。 当右括号出现时，可以从栈中弹出操作符。</p><p>当我们从左到右扫描中缀表达式时，我们将使用栈来保留运算符。这将提供我们在第一个例子中注意到的反转。 堆栈的顶部将始终是最近保存的运算符。每当我们读取一个新的运算符时，我们需要考虑该运算符如何与已经在栈上的运算符（如果有的话）比较优先级。</p><p>假设中缀表达式是一个由空格分隔的标记字符串。 操作符标记是<code>*，/，+</code>和 <code>-</code> ，以及左右括号。操作数是单字符 A，B，C 等。 以下步骤将后缀顺序生成一个字符串。</p><ol><li>创建一个名为opstack的空栈以保存运算符。给输出创建一个空列表。</li><li>通过使用字符串方法拆分将输入的中缀字符串转换为标记列表。</li><li>从左到右扫描标记列表。<ul><li>如果标记是操作数，将其附加到输出列表的末尾、</li><li>如果标记是左括号，将其压到opstack上。</li><li>如果标记是右括号，则弹出opstack，直到删除相应的左括号。将每个预算福附加到输出列表的末尾。</li><li>如果标记是运算符，<code>*，/，+</code>或 <code>-</code> ，将其压入 opstack。但是，首先删除已经在 opstack 中具有更高或相等优先级的任何运算符，并将它们加到输出列表中。</li></ul></li><li>当输入表达式被完全处理时，检查 opstack。仍然在栈上的任何运算符都可以删除并加到输出列表的末尾。</li></ol><p>Figure 9 展示了对表达式 <code>A * B + C * D</code> 的转换算法。注意，第一个 <code>*</code> 在看到 <code>+</code> 运算符时被删除。另外，当第二个 * 出现时， <code>+</code> 保留在栈中，因为乘法优先级高于加法。在中缀表达式的末尾，栈被弹出两次，删除两个运算符，并将 <code>+</code> 作为后缀表达式中的最后一个运算符。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure9.png" alt="image"></p><p><em>Figure 9</em></p><p>为了在 Python 中编写算法，我们使用一个名为 prec 的字典来保存操作符的优先级。这个字典将每个运算符映射到一个整数，可以与其他运算符的优先级（我们使用整数3，2和1）进行比较。左括号将赋予最低的值。这样，与其进行比较的任何运算符将具有更高的优先级，将被放置在它的顶部。第15行将操作数定义为任何大写字符或数字。完整的转换函数见 ActiveCode 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">infixToPostfix</span><span class="params">(infixexpr)</span>:</span></div><div class="line">    prec = &#123;&#125;</div><div class="line">    prec[<span class="string">"*"</span>] = <span class="number">3</span></div><div class="line">    prec[<span class="string">"/"</span>] = <span class="number">3</span></div><div class="line">    prec[<span class="string">"+"</span>] = <span class="number">2</span></div><div class="line">    prec[<span class="string">"-"</span>] = <span class="number">2</span></div><div class="line">    prec[<span class="string">"("</span>] = <span class="number">1</span></div><div class="line">    opStack = Stack()</div><div class="line">    postfixList = []</div><div class="line">    tokenList = infixexpr.split()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tokenList:</div><div class="line">        <span class="keyword">if</span> token <span class="keyword">in</span> <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> <span class="keyword">or</span> token <span class="keyword">in</span> <span class="string">"0123456789"</span>:</div><div class="line">            postfixList.append(token)</div><div class="line">        <span class="keyword">elif</span> token == <span class="string">'('</span>:</div><div class="line">            opStack.push(token)</div><div class="line">        <span class="keyword">elif</span> token == <span class="string">')'</span>:</div><div class="line">            topToken = opStack.pop()</div><div class="line">            <span class="keyword">while</span> topToken != <span class="string">'('</span>:</div><div class="line">                postfixList.append(topToken)</div><div class="line">                topToken = opStack.pop()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">not</span> opStack.isEmpty()) <span class="keyword">and</span> \</div><div class="line">               (prec[opStack.peek()] &gt;= prec[token]):</div><div class="line">                  postfixList.append(opStack.pop())</div><div class="line">            opStack.push(token)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> opStack.isEmpty():</div><div class="line">        postfixList.append(opStack.pop())</div><div class="line">    <span class="keyword">return</span> <span class="string">" "</span>.join(postfixList)</div><div class="line"></div><div class="line">print(infixToPostfix(<span class="string">"A * B + C * D"</span>))</div><div class="line">print(infixToPostfix(<span class="string">"( A + B ) * C - ( D - E ) * ( F + G )"</span>))</div></pre></td></tr></table></figure><ol><li>后缀表达式求值</li></ol><p>作为最后栈的示例，我们考虑对后缀符号中的表达式求值。在这种情况下，栈再次是我们选择的数据结构。但是，在扫描后缀表达式时，它必须等待操作数，而不像上面的转换算法中的运算符。解决问题的另一种方法是，每当在输入上看到运算符时，计算两个最近的操作数。</p><p>要详细的了解这一点，考虑后缀表达式<code>4 5 6 * +</code>，首先遇到操作数<code>4</code> 和 <code>5</code>，此时你还不确定如何处理它们，直到看到下一个符号。将它们放置到栈上，确保它们在下一个操作符出现时可用。</p><p>在这种情况下，下一个符号是另一个操作数。所以，像先前一样，压入栈中。并检查下一个符号。现在我们看到操作符<code>*</code>，这意味着需要将两个最近的操作数相乘。通过弹出栈两次，我们可以得到正确的两个操作数，然后执行乘法（这种情况下结果为30）。</p><p>我们现在可以通过将其放回栈中来处理此结果，以便它可以表示为表达式后面的运算符的操作数。当处理最后一个操作符时，栈上只有一个值，弹出并返回它作为表达式的结果。Figure 10展示了整个示例表达式的栈的内容。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure10.png" alt="image"></p><p><em>Figure 10</em></p><p>Figure 11是个稍微复杂的示例，<code>7 8 + 3 2 + /</code> 。在这个例子中有两点需要注意，首先，栈的大小增长收缩，然后在子表达式求值的时候再次增长。第二，除法操作需要自信处理。回想下，后缀表达式的操作符顺序没变，仅仅改变操作符的位置。当用于除法的操作符从栈中弹出时，它们被反转。由于除法不是交换运算符，换句话说<code>15/5</code>和 <code>5/15</code> 不同，因此我们必须保证操作数的顺序不会交换。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.9.%E4%B8%AD%E7%BC%80%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/assets/3.9.%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.figure11.png" alt="image"></p><p><em>Figure 11</em></p><p>假设后缀表达式是一个由空格分隔的标记字符串。 运算符为<code>*，/，+</code>和 <code>-</code> ，操作数假定为单个整数值。 输出将是一个整数结果。</p><ol><li>创建一个名为 <code>operandStack</code> 的空栈。</li><li>拆分字符串转换为标记列表。</li><li>从左到右扫描标记列表。<ul><li>如果标记是操作数，将其从字符串转换为整数，并将值压到operandStack。</li><li>如果标记是运算符<code>*，/，+</code>或<code>-</code>，它将需要两个操作数。弹出operandStack 两次。 第一个弹出的是第二个操作数，第二个弹出的是第一个操作数。执行算术运算后，将结果压到操作数栈中。</li></ul></li><li>当输入的表达式被完全处理后，结果就在栈上，弹出 operandStack 并返回值。</li></ol><p>用于计算后缀表达式的完整函数见 ActiveCode 2，为了辅助计算，定义了一个函数 doMath, 它将获取两个操作数和运算符，执行相应的计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">+</div><div class="line"></div><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">postfixEval</span><span class="params">(postfixExpr)</span>:</span></div><div class="line">    operandStack = Stack()</div><div class="line">    tokenList = postfixExpr.split()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tokenList:</div><div class="line">        <span class="keyword">if</span> token <span class="keyword">in</span> <span class="string">"0123456789"</span>:</div><div class="line">            operandStack.push(int(token))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            operand2 = operandStack.pop()</div><div class="line">            operand1 = operandStack.pop()</div><div class="line">            result = doMath(token,operand1,operand2)</div><div class="line">            operandStack.push(result)</div><div class="line">    <span class="keyword">return</span> operandStack.pop()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doMath</span><span class="params">(op, op1, op2)</span>:</span></div><div class="line">    <span class="keyword">if</span> op == <span class="string">"*"</span>:</div><div class="line">        <span class="keyword">return</span> op1 * op2</div><div class="line">    <span class="keyword">elif</span> op == <span class="string">"/"</span>:</div><div class="line">        <span class="keyword">return</span> op1 / op2</div><div class="line">    <span class="keyword">elif</span> op == <span class="string">"+"</span>:</div><div class="line">        <span class="keyword">return</span> op1 + op2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> op1 - op2</div><div class="line"></div><div class="line">print(postfixEval(<span class="string">'7 8 + 3 2 + /'</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你编写一个算术表达式如 &lt;code&gt;B*C&lt;/code&gt; 时，表达式的形式使你能够正确理解它。在这种情况下，你知道 B 乘以 C, 因为乘法运算符 &lt;code&gt;*&lt;/code&gt; 出现在表达式中。这种类型的符号称为中缀，因为运算符在它处理的两个操作数之间。看另外一个中缀示例，&lt;code&gt;A+B*C&lt;/code&gt;，运算符 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;*&lt;/code&gt; 仍然出现在操作数之间。这里面有个问题是，他们分别作用于哪个运算数上，&lt;code&gt;+&lt;/code&gt; 作用于 A 和 B , 还是 &lt;code&gt;*&lt;/code&gt; 作用于 B 和 C？表达式似乎有点模糊。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>十进制转换成二进制</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <id>http://www.adamzeng.site/2017/10/27/十进制转换成二进制/</id>
    <published>2017-10-27T09:13:05.000Z</published>
    <updated>2017-10-28T00:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-十进制转换成二进制"><a href="#1-十进制转换成二进制" class="headerlink" title="1.十进制转换成二进制"></a>1.十进制转换成二进制</h4><p>二进制在计算机科学中是很重要的，因为存储在计算机内的所有值都是以0和1存储的。如果没有能力在二进制数和普通字符串之间转换，我们与计算机之间的交互非常棘手。<a id="more"></a></p><p>整数值是常见的数据项。他们一直用于计算机程序和计算。我们在数学课上学习它们，当然最后用十进制或者基数10来表示它们。十进制233^10以及对应的二进制表示11101001^2分别解释为</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6/assets/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6.2.png" alt="image"></p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6/assets/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6.1.png" alt="image"></p><p>但是我们如何能够容易地将整数值转换为二进制呢？答案是“除2“算法，它用栈来跟踪二进制结果的数字。</p><p>”除2“算法嘉定我们从大于0的整数开始。不断迭代的将十进制除以2，并跟踪余数。第一个除以2的余数说明了这个值是偶数还是基数。偶数有0的余数，记为0，基数有余数1，记为1.我们将得到的而精致构建为数字序列，第一个余数实际上是序列中的最后一个数字。见Figure 5，我们再次看到了反转的属性，表示栈可能是解决这个问题的数据结构。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6/assets/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6.figure5.png" alt="image"></p><p><em>Figure 5</em></p><p>Activecode 1 中的 Python 代码实现了 “除 2” 算法，函数 divideBy2 传入了一个十进制的参数，并重复除以 2。第 7 行使用内置的模运算符 % 来提取余数，第 8 行将余数压到栈上。当除到 0 后，11-13 行构造了一个二进制字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">divideBy2</span><span class="params">(decNumber)</span>:</span></div><div class="line">    remstack=Stack()</div><div class="line"></div><div class="line">    <span class="keyword">while</span> decNumber&gt;<span class="number">0</span>:</div><div class="line">        rem=decNumber%<span class="number">2</span></div><div class="line">        remstack.push(rem)</div><div class="line">        decNumber=decNumber//<span class="number">2</span></div><div class="line">        </div><div class="line">    binString=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> remstack.isEmpty():</div><div class="line">        binString=binString+str(remstack.pop())</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> binString</div><div class="line">print(divideBy2(<span class="number">42</span>))</div><div class="line"></div><div class="line"><span class="number">101010</span></div></pre></td></tr></table></figure><p><em>ActiveCode 1</em></p><p>这个用于二进制转换的算法可以很容易的扩展以执行任何基数的转换。在计算机科学中，通常会使用很多不同的编码。其中最常见的是二进制，八进制和十六进制。</p><p>十进制233和它对应的八进制和十六进制351^8,E9^16</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6/assets/3.8.%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6.3.png" alt="image"></p><p>可以修改divideBy2函数，使它不仅能接受十进制参数，还能接受与其转换的基数。’除2‘的概念被简单的替换成更通用的’除基数‘。在ActiveCode2展示的是一个名为baseConverter函数。采用十进制数和2到16之间的任何技术作为参数。余数部分仍然入栈，直到被转换的值为0。我们创建一组数字，用来表示超过9的余数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseConverter</span><span class="params">(decNumber,base)</span>:</span></div><div class="line">    digits = <span class="string">"0123456789ABCDEF"</span></div><div class="line"></div><div class="line">    remstack = Stack()</div><div class="line"></div><div class="line">    <span class="keyword">while</span> decNumber &gt; <span class="number">0</span>:</div><div class="line">        rem = decNumber % base</div><div class="line">        remstack.push(rem)</div><div class="line">        decNumber = decNumber // base</div><div class="line"></div><div class="line">    newString = <span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> remstack.isEmpty():</div><div class="line">        newString = newString + digits[remstack.pop()]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newString</div><div class="line"></div><div class="line">print(baseConverter(<span class="number">25</span>,<span class="number">2</span>))</div><div class="line">print(baseConverter(<span class="number">25</span>,<span class="number">16</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-十进制转换成二进制&quot;&gt;&lt;a href=&quot;#1-十进制转换成二进制&quot; class=&quot;headerlink&quot; title=&quot;1.十进制转换成二进制&quot;&gt;&lt;/a&gt;1.十进制转换成二进制&lt;/h4&gt;&lt;p&gt;二进制在计算机科学中是很重要的，因为存储在计算机内的所有值都是以0和1存储的。如果没有能力在二进制数和普通字符串之间转换，我们与计算机之间的交互非常棘手。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简单与复杂括号匹配</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E7%AE%80%E5%8D%95%E4%B8%8E%E5%A4%8D%E6%9D%82%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://www.adamzeng.site/2017/10/27/简单与复杂括号匹配/</id>
    <published>2017-10-27T09:12:47.000Z</published>
    <updated>2017-10-27T12:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简单括号匹配"><a href="#1-简单括号匹配" class="headerlink" title="1.简单括号匹配"></a>1.简单括号匹配</h4><p>我们现在把注意力转向使用栈解决真正的计算机问题。你会这么写算术表达式<a id="more"></a></p><p>(5+6)∗(7+8)/(4+3)</p><p>其中括号用于命令操作的执行。你可能也有一些语言的经验，如Lisp的构造</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name">defun</span> square(<span class="name">n</span>)</div><div class="line">     (<span class="name">*</span> n n))</div></pre></td></tr></table></figure><p>这段代码定义了一个名为square的函数，它将返回参数的n的平方。Lisp使用大量的圆括号是臭名昭著的。</p><p>在这两个例子中，括号必须以匹配的方式出现。括号匹配意味着每个开始符号具有相应的结束符号，并且括号能被正确嵌套。考虑下面正确匹配的括号字符串：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(()()()())</div><div class="line"></div><div class="line">(((())))</div><div class="line"></div><div class="line">(()((())()))</div></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">((((((())</div><div class="line"></div><div class="line">()))</div><div class="line"></div><div class="line">(()()(()</div></pre></td></tr></table></figure><p>下面是那些不匹配的括号</p><p>区分括号是否匹配的能力是识别很多编程语言结构的重要部分。具有挑战的是如何编写一个算法，能够从左到右读取一串符号，并决定符号是否平衡。为了解决这个问题，我们需要做一个重要的观察。从左到右处理符号时，最近开始符号必须与下一个关闭符号相匹配（见Figure 4）。此外，处理的第一个开始符号必须等待直到其匹配最后一个符号。结束符号以相反的顺序匹配开始符号。他们从内到外匹配。这是一个可以用栈解决问题的线索。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.6.%E7%AE%80%E5%8D%95%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/assets/3.6.%E7%AE%80%E5%8D%95%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D.simpleparcheck.png" alt="image"></p><p><em>Figure 4</em></p><p>一旦你认为栈是保存括号的恰当的数据结构，算法是很直接的。从空栈开始，从左到右处理括号字符串。如果一个符号是一个开始符号，将其作为一个信号，对应的结束符号稍后会出现。另一方面，如果符号是结束符号，弹出栈，只要弹出栈的开始符号可以匹配每个结束符号，则括号保持匹配状态。如果任何时候栈上没有出现符合开始符号的结束符号，则字符串不匹配。最后，当所有符号都被处理后，栈应该是空的。实现此算法的Python代码间ActiveCode1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parChecker</span><span class="params">(symbolString)</span>:</span></div><div class="line">    s=Stack()</div><div class="line">    balanced=<span class="keyword">True</span></div><div class="line">    index=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index&lt;len(symbolString) <span class="keyword">and</span> balanced:</div><div class="line">        symbol=symbolString[index]</div><div class="line">        <span class="keyword">if</span> symbol==<span class="string">'('</span>:</div><div class="line">            s.push(symbol)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> s.isEmpty():</div><div class="line">                balanced=<span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                s.pop()</div><div class="line">        index=index+<span class="number">1</span></div><div class="line">        </div><div class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">      </div><div class="line">print(parChecker(<span class="string">'((()))'</span>))</div><div class="line">print(parChecker(<span class="string">'(()'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure><h4 id="2-复杂符号匹配"><a href="#2-复杂符号匹配" class="headerlink" title="2.复杂符号匹配"></a>2.复杂符号匹配</h4><p>上面显示的匹配括号问题是许多编程语言都会出现的一般情况的特定情况。匹配和嵌套不同种类的开始和结束符号的情况经常发生。例如，在Python中，方括号[和]用于列表，花括号{和}用于字典。括号（和）用于元祖和算术表达式。只要每个符号都能保持自己的开始和结束关系，就可以混合符号。</p><p>符号字符串如</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; &#123; ( [ ] [ ] ) &#125; ( ) &#125;</div><div class="line"></div><div class="line">[ [ &#123; &#123; ( ( ) ) &#125; &#125; ] ]</div><div class="line"></div><div class="line">[ ] [ ] [ ] ( ) &#123; &#125;</div></pre></td></tr></table></figure><p>这些被恰当匹配了，因为不仅每一个开始符号都有对应的结束符号，而且符号的类型也匹配。</p><p>相反这些字符串没法匹配：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">( [ ) ]</div><div class="line"></div><div class="line">( ( ( ) ] ) )</div><div class="line"></div><div class="line">[ &#123; ( ) ]</div></pre></td></tr></table></figure><p>上节简单括号检查程序可以轻松扩展处理这些新类型的符号。回想一下，每个开始符号被简单的压入栈中，等待匹配的结束符号出现。当出现结束符号时。唯一的区别是我们必须检查确保它正确匹配栈顶部开始符号的类型。如果两个符号不匹配，则字符串不匹配。如果整个字符串都被处理完并且没有什么留在栈中，则字符串匹配。</p><p>Python程序见ActiveCode 1。唯一的变化是16行，我们称之为辅助函数匹配。必须检查栈中每个删除的符号，以查看它是否与当前结束符号匹配。如果不匹配，则布尔变量balanced被设置为False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parChecker</span><span class="params">(symbolString)</span>:</span></div><div class="line">    s = Stack()</div><div class="line">    balanced = <span class="keyword">True</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index &lt; len(symbolString) <span class="keyword">and</span> balanced:</div><div class="line">        symbol = symbolString[index]</div><div class="line">        <span class="keyword">if</span> symbol <span class="keyword">in</span> <span class="string">"([&#123;"</span>:</div><div class="line">            s.push(symbol)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> s.isEmpty():</div><div class="line">                balanced = <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                top = s.pop()</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> matches(top,symbol):</div><div class="line">                       balanced = <span class="keyword">False</span></div><div class="line">        index = index + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">matches</span><span class="params">(open,close)</span>:</span></div><div class="line">    opens = <span class="string">"([&#123;"</span></div><div class="line">    closers = <span class="string">")]&#125;"</span></div><div class="line">    <span class="keyword">return</span> opens.index(open) == closers.index(close)</div><div class="line"></div><div class="line"></div><div class="line">print(parChecker(<span class="string">'&#123;&#123;([][])&#125;()&#125;'</span>))</div><div class="line">print(parChecker(<span class="string">'[&#123;()]'</span>)</div></pre></td></tr></table></figure><p><em>ActiveCode 1</em></p><p>这两个例子表明，栈是计算机语言结构处理非常重要的数据结构。几乎你能想到的任何嵌套符号必须按照平衡匹配的顺序。栈还有其他重要的用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-简单括号匹配&quot;&gt;&lt;a href=&quot;#1-简单括号匹配&quot; class=&quot;headerlink&quot; title=&quot;1.简单括号匹配&quot;&gt;&lt;/a&gt;1.简单括号匹配&lt;/h4&gt;&lt;p&gt;我们现在把注意力转向使用栈解决真正的计算机问题。你会这么写算术表达式
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>基本数据结构之一</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%80/"/>
    <id>http://www.adamzeng.site/2017/10/27/基本数据结构之一/</id>
    <published>2017-10-27T09:12:26.000Z</published>
    <updated>2017-10-27T12:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本数据结构"><a href="#1-基本数据结构" class="headerlink" title="1.基本数据结构"></a>1.基本数据结构</h1><h4 id="1-什么是线性数据结构"><a href="#1-什么是线性数据结构" class="headerlink" title="1.什么是线性数据结构"></a>1.什么是线性数据结构<a id="more"></a></h4><p>我们从四个简单但重要的概念开始研究数据结构。栈，队列，deques，列表是一类数据的容器，他们数据项之间顺序由添加或删除的顺序决定。一旦一个数据项被添加，它相对于前后元素一直保持该位置不变。注入此类的数据结构被称为线性数据结构。</p><p>线性数据结构有两端，有时被称为左右，某些情况被称为前后。你也可以称为顶部和底部，名字都不重要。将两个线性数据结构区分开的方法是添加和移除项的方式，特别是添加和移除项的位置。例如一些结构允许从一端添加项，另一些允许从另一端移除项。</p><p>这些变种的形式产生了计算机科学最有用的数据结构。他们出现在各种算法中，并可以用于解决很多重要的问题。</p><h4 id="2-什么是栈？"><a href="#2-什么是栈？" class="headerlink" title="2.什么是栈？"></a>2.什么是栈？</h4><p>栈（有时称为“后进先出栈”）是一个项的有序集合，其中添加一处新项总发生在同一端。这一端通常称为”顶部”。与顶部对应的端称为“底部”。</p><p>栈的底部很重要，因为在栈中靠近底部的项是存储时间最长的。最近添加的项是最先会被移除的。这种排序原则有时被称为LIFO，后进先出。它基于在集合内的时间长度做排序。较新的项靠近顶部，较旧的项靠近底部。</p><p>栈的例子很常见。几乎所有的自主餐厅都有一堆托盘或盘子，你从顶部拿一个，就会有一个新的托盘给下一个客人。想象桌上有一堆书(Figure 1)，只有顶部的那本书封面可见，要看到其他书的封面。只有先移除他们上面的书。Figure 2展示了另一个栈，包含了很多Python对象。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88/assets/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88.png" alt="image"></p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88/assets/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88.primitive.png" alt="image"></p><p>和栈相关的最有用的想法之一来自对它的观察。假设从一个干净的桌面开始，现在把书一本本叠起来。你在构造一个栈。考虑下移除一本书会发生什么。移除的顺序跟刚刚被放置的顺序相反。栈之所以重要是因为它能反转项的顺序。插入跟删除顺序相反，Figure 3展示了Python数据对象创建和删除的过程，注意观察他们的顺序。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88/assets/3.3.%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88.simplereversal.png" alt="image"></p><p><em>Figure 3</em></p><p>想想这种反转属性，你可以想到使用计算机的时候所碰到的例子。例如每个web浏览器都有一个返回按钮。当你浏览网页时，这些网页被放置在一个栈中（实际是网页的网址）。你现在查看的网站在顶部，你第一个查看的网页在底部。如果按‘返回’按钮，将按相反的顺序浏览刚才的页面。</p><h4 id="3-栈的抽象数据类型"><a href="#3-栈的抽象数据类型" class="headerlink" title="3.栈的抽象数据类型"></a>3.栈的抽象数据类型</h4><p>栈的抽象数据类型由以下结构和操作定义。如上所述，栈被构造未项的有序集合，其中项被添加和从末端一处的位置称为“顶部”。栈是有序的LIFO。栈的操作如下。</p><ul><li>Stack()创建一个空的新栈。它不需要参数，并返回一个空栈。</li><li>push(item)将一个新项添加到栈的顶部。它需要item做参数并不返回任何内容。</li><li>pop()从栈中删除顶部项。它不需要参数并返回item。栈被修改。</li><li>peek()从栈返回顶部项，但不会删除它。不需要参数。不修改栈。</li><li>isEmpty()测试站是否为空。不需要参数，并返回布尔值。</li><li>size()返回栈中的item数量。不需要参数，并返回一个参数。</li></ul><p>例如，s是已经创建的空栈，Table 1展示了栈操作序列的结果。栈中，顶部项列在最右边。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.4.%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/assets/3.4.%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.table1.png" alt="image"></p><p><em>table 1</em></p><h4 id="4-Python实现栈"><a href="#4-Python实现栈" class="headerlink" title="4.Python实现栈"></a>4.Python实现栈</h4><p>现在我们已经将栈清楚地定义了抽象数据类型，我们将开始Python的栈的实现。回想一下，当我们给抽象数据类型一个屋里实现时，我们将实现称为数据结构。</p><p>正如我们在第1章所描述的，在Python中，与任何面向对象编程的语言一样，抽象数据类型（如栈）的选择的实现是创建一个新类。栈操作实现为类的方法。此外，为了实现作为元素集合的栈，使用由Python提供的原语集合的能力是有意义的。我们将使用列表作为底层实现。</p><p>回想一下，Python中的列表类提供了有序集合机制和一组方法。例如，如果我们有列表[2,5,3,6,7,4],我们只需要确定列表的哪一端将被认为是栈的顶部。一旦确定，可以使用诸如append和pop的列表方法来实现。</p><blockquote><p>以下栈实现（ActiveCode 1）假定列表的结尾将保存栈的顶部元素。随着栈增长（push 操作），新项将被添加到列表的末尾。 pop 也操作列表末尾的元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#test</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.items=[]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items==[]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,items)</span>:</span></div><div class="line">        self.items.append(items)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items[len((self.items))<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#test2</span></div><div class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line">s=Stack()</div><div class="line"></div><div class="line">print(s.isEmpty())</div><div class="line">s.push(<span class="number">4</span>)</div><div class="line">s.push(<span class="string">'dog'</span>)</div><div class="line">print(s.peek())</div><div class="line">s.push(<span class="keyword">True</span>)</div><div class="line">print(s.size())</div><div class="line">print(s.isEmpty())</div><div class="line">s.push(<span class="number">8.4</span>)</div><div class="line">print(s.pop())</div><div class="line">print(s.pop())</div><div class="line">print(s.size())</div></pre></td></tr></table></figure><p>记住我们只定义类的实现，我们需要创建一个栈，然后使用它。ActiveCode 2 展示了我们通过实例化 Stack 类执行 Table 1中的操作。注意，Stack 类的定义是从 test文件导入的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-基本数据结构&quot;&gt;&lt;a href=&quot;#1-基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;1.基本数据结构&quot;&gt;&lt;/a&gt;1.基本数据结构&lt;/h1&gt;&lt;h4 id=&quot;1-什么是线性数据结构&quot;&gt;&lt;a href=&quot;#1-什么是线性数据结构&quot; class=&quot;headerlink&quot; title=&quot;1.什么是线性数据结构&quot;&gt;&lt;/a&gt;1.什么是线性数据结构
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构的字典</title>
    <link href="http://www.adamzeng.site/2017/10/27/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%97%E5%85%B8/"/>
    <id>http://www.adamzeng.site/2017/10/27/Python数据结构的字典/</id>
    <published>2017-10-27T09:12:00.000Z</published>
    <updated>2017-10-27T12:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的数据结构之字典"><a href="#Python的数据结构之字典" class="headerlink" title="Python的数据结构之字典"></a>Python的数据结构之字典</h1><p>python 中第二个主要的数据结构是字典。你可能记得，字典和列表不同，你可以通过键而不是位置来访问字典中的项目。在本书的后面，你会看到有很多方法来实现字典。字典的 get 和 set 操作都是 O(1)。另一个重要的操作是 contains，检查一个键是否在字典中也是 O(1)。所有字典操作的效率总结在 Table3 中。关于字典性能的一个重要方面是，我们在表中提供的效率是针对平均性能。 在一些罕见的情况下，contains，get item 和 set item 操作可以退化为 O(n)。我们将在后面的章节介绍。<a id="more"></a></p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/2.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/2.7.%E5%AD%97%E5%85%B8/assets/2.7.%E5%AD%97%E5%85%B8.table3.png" alt="image"></p><p><em>table 3</em></p><p>我们会在最后的实验中，将比较列表和字典之间的contains操作的性能。在此过程中，我们将确认列表的contains操作符是O(n),字典的contains操作符是O(n)。我们将在实验中列出一系列数字，然后随机选择数字，并检查数字是否在列表中。如果我们的性能表是正常的，列表越大，确定列表中是否包含任意一个数字应该花费的时间越长。</p><p>Listing 6 实现了这个比较。注意，我们对容器中的数字执行完全相同的操作。区别在于在第 7 行上 x 是一个列表，第9行上的 x 是一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>,<span class="number">1000001</span>,<span class="number">20000</span>):</div><div class="line">    t=timeit.Timer(<span class="string">"random.randrange(%d) in x"</span>%i,</div><div class="line">                   <span class="string">"from __main__ import random,x"</span>)</div><div class="line">    x=list(range(i))</div><div class="line">    lst_time=t.timeit(number=<span class="number">1000</span>)</div><div class="line">    x=&#123;j:<span class="keyword">None</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(i)&#125;</div><div class="line">    d_time=t.timeit(number=<span class="number">1000</span>)</div><div class="line">    print(<span class="string">"%d,%10.3f,%10.3f"</span> % (i, lst_time, d_time))</div><div class="line">    </div><div class="line">    <span class="number">10000</span>,     <span class="number">0.084</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">30000</span>,     <span class="number">0.237</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">50000</span>,     <span class="number">0.411</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">70000</span>,     <span class="number">0.555</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">90000</span>,     <span class="number">0.698</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">110000</span>,     <span class="number">0.860</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">130000</span>,     <span class="number">1.018</span>,     <span class="number">0.002</span></div><div class="line"><span class="number">150000</span>,     <span class="number">1.189</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">170000</span>,     <span class="number">1.317</span>,     <span class="number">0.001</span></div><div class="line"><span class="number">190000</span>,     <span class="number">1.561</span>,     <span class="number">0.002</span></div></pre></td></tr></table></figure><p><em>Listing 6</em></p><p>Figure 4 展示了 Listing6 的结果。你可以看到字典一直更快。 对于最小的列表大小为10,000个元素，字典是列表的89.4倍。对于最大的列表大小为990,000 个元素。字典是列表的11,603倍！你还可以看到列表上的contains运算符所花费的时间与列表的大小成线性增长。这验证了列表上的contains运算符是 O(n) 的断言。还可以看出，字典中的 contains 运算符的时间是恒定的，即使字典大小不断增长。事实上，对于字典大小为10,000个元素，contains操作占用0.004毫秒，对于字典大小为990,000个元素，它也占用0.004毫秒。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/2.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/2.7.%E5%AD%97%E5%85%B8/assets/2.7.%E5%AD%97%E5%85%B8.figure4.png" alt="image"></p><p><em>Figure 4</em></p><p>由于 Python 是一种不断发展的语言，底层总是有变化的。 有关 Python 数据结构性能的最新信息可以在 Python 网站上找到。 在撰写本文时，Python wiki有一个很好的时间复杂性页面，可以在 <a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="external">Time Complexity Wiki</a> 中找到。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python的数据结构之字典&quot;&gt;&lt;a href=&quot;#Python的数据结构之字典&quot; class=&quot;headerlink&quot; title=&quot;Python的数据结构之字典&quot;&gt;&lt;/a&gt;Python的数据结构之字典&lt;/h1&gt;&lt;p&gt;python 中第二个主要的数据结构是字典。你可能记得，字典和列表不同，你可以通过键而不是位置来访问字典中的项目。在本书的后面，你会看到有很多方法来实现字典。字典的 get 和 set 操作都是 O(1)。另一个重要的操作是 contains，检查一个键是否在字典中也是 O(1)。所有字典操作的效率总结在 Table3 中。关于字典性能的一个重要方面是，我们在表中提供的效率是针对平均性能。 在一些罕见的情况下，contains，get item 和 set item 操作可以退化为 O(n)。我们将在后面的章节介绍。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python数据结构的性能</title>
    <link href="http://www.adamzeng.site/2017/10/27/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%80%A7%E8%83%BD/"/>
    <id>http://www.adamzeng.site/2017/10/27/python数据结构的性能/</id>
    <published>2017-10-27T09:11:41.000Z</published>
    <updated>2017-10-27T12:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python数据结构的性能"><a href="#python数据结构的性能" class="headerlink" title="python数据结构的性能"></a>python数据结构的性能</h1><h3 id="1-Python列表与字典操作的大O性能"><a href="#1-Python列表与字典操作的大O性能" class="headerlink" title="1.Python列表与字典操作的大O性能"></a>1.Python列表与字典操作的大O性能</h3><p>然后我们将做一些基于时间的实验来说明每个数据结构的花销和使用这些数据结构的好处。重要的是了解这些数据结构的效率，因为它们是本书实现其他数据结构所用到的基础模块。<a id="more"></a></p><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><blockquote><p>“python 的设计者在实现列表数据结构的时候有很多选择。每一个这种选择都可能影响列表操作的性能。为了帮助他们做出正确的选择，他们查看了最常使用列表数据结构的方式，并且优化了实现，以便使得最常见的操作非常快。当然，他们还试图使较不常见的操作快速，但是当需要做出折衷时，较不常见的操作的性能通常牺牲以支持更常见的操作。”</p><p>两个常见的操作是索引和分配到索引位置。无论列表有多大，这两个操作都需要相同的时间。当这样的操作和列表的大小无关时，它们是 O（1）。</p><p>“另一个非常常见的编程任务是增加一个列表。有两种方法可以创建更长的列表，可以使用 append 方法或拼接运算符。append 方法是 O（1)。 然而，拼接运算符是 O（k），其中 k 是要拼接的列表的大小。这对你来说很重要，因为它可以帮助你通过选择合适的工具来提高你自己的程序的效率。”</p></blockquote><p>让我们看看四种不同的方式，我们可以生成一个从0开始的n个数字的列表。首先我们将尝试一个for循环并通过创建列表，然后我们将使用append而不是拼接。接下来，我们使用列表生成器创建列表，最后，也是最明显的方式，通过调用列表构造函数包装range函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></div><div class="line">    l=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">        l=l+[i]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></div><div class="line">    l=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">        l.append(i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></div><div class="line">    l=[i <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1000</span>)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">()</span>:</span></div><div class="line">    l=list(range(<span class="number">1000</span>))</div><div class="line"></div><div class="line">t1 = timeit.Timer(<span class="string">"test1()"</span>, <span class="string">"from __main__ import test1"</span>)</div><div class="line">print(<span class="string">"concat "</span>,t1.timeit(number=<span class="number">1000</span>), <span class="string">"milliseconds"</span>)</div><div class="line">t2 = timeit.Timer(<span class="string">"test2()"</span>,<span class="string">"from __main__ import test2"</span>)</div><div class="line">print(<span class="string">"append"</span>,t2.timeit(number=<span class="number">1000</span>),<span class="string">"milliseconds"</span>)</div><div class="line">t3 = timeit.Timer(<span class="string">"test3()"</span>, <span class="string">"from __main__ import test3"</span>)</div><div class="line">print(<span class="string">"comprehension "</span>,t3.timeit(number=<span class="number">1000</span>), <span class="string">"milliseconds"</span>)</div><div class="line">t4=timeit.Timer(<span class="string">"test4()"</span>,<span class="string">"from __main__ import test4"</span>)</div><div class="line">print(<span class="string">"list range"</span>,t4.timeit(number=<span class="number">1000</span>),<span class="string">"milliseconds"</span>)</div><div class="line"></div><div class="line"></div><div class="line">concat  <span class="number">1.336322332994314</span> milliseconds</div><div class="line">append <span class="number">0.10088041100243572</span> milliseconds</div><div class="line">comprehension  <span class="number">0.048220083001069725</span> milliseconds</div><div class="line">list range <span class="number">0.017883339009131305</span> milliseconds</div></pre></td></tr></table></figure><p>从上面的试验清楚的看出，append操作比拼接快得多。其他两种方法，列表生成器的速度是append的两倍。</p><blockquote><p>“最后一点，你上面看到的时间都是包括实际调用函数的一些开销，但我们可以假设函数调用开销在四种情况下是相同的，所以我们仍然得到的是有意义的比较。因此，拼接字符串操作需要 6.54 毫秒并不准确，而是拼接字符串这个函数需要 6.54 毫秒。你可以测试调用空函数所需要的时间，并从上面的数字中减去它。”</p></blockquote><p>现在我们已经看到了如何具体测试性能，见Table2，你可能想知道pop两个不同的时间。当列表末尾调用pop时，它需要O(1),但是当在列表中第一个元素或者中建任何地方调用pop时，它是O(n)。原因在于Python实现列表的方式，当一个项从列表前面取出，列表中的其他元素靠近起始位置移动一个位置。你会看到索引操作为O(1)。Python的实现者会权衡选择一个好的方案。</p><p><img src="https://facert.gitbooks.io/python-data-structure-cn/2.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/2.6.%E5%88%97%E8%A1%A8/assets/2.6.%E5%88%97%E8%A1%A8%20Table2.png" alt="image"></p><p>作为一种演示性能差异的方法，我们用timeit来做一个实验。我们的目标是验证从列表从末尾pop元素和从开始pop元素的性能。同样，我们也想测量不用列表大小对这个时间的影响。我们期望看到的是，从列表末尾处弹出所需时间将保持不变，即使列表不断增长。而从列表开始处弹出元素时间将随列表增长而增加。</p><p>Listing 4展示了两种pop方式的比较。从第一个示例看出，从末尾弹出需要0.0003毫秒。从开始弹出要花费4.82毫秒。对于一个200万的元素列表，相差16000倍。</p><blockquote><p>Listing 4 需要注意的几点，第一， <code>from __main__ import x</code> , 虽然我们没有定义一个函数，我们确实希望能够在我们的测试中使用列表对象 x, 这种方法允许我们只计算单个弹出语句，获得该操作最精确的测量时间。因为 timer 重复了 1000 次，该列表每次循环大小都减 1。但是由于初始列表大小为 200万，我们只减少总体大小的 0.05%。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line">popzero=timeit.Timer(<span class="string">"x.pop(0)"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line">popend=timeit.Timer(<span class="string">"x.pop(0)"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line"></div><div class="line">x=list(range(<span class="number">2000000</span>))</div><div class="line">print(popzero.timeit(number=<span class="number">1000</span>))</div><div class="line">或者</div><div class="line">print(popend.timeit(number=<span class="number">1000</span>))</div></pre></td></tr></table></figure><p><em>listing 4</em></p><p>虽然我们第一个测试显示pop(0)比pop()慢，但它没有证明pop(0)是O(n),pop()是O(1)，要验证它，我们需要看下一系列列表大小的调用效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line">popzero=timeit.Timer(<span class="string">"x.pop(0)"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line">popend=timeit.Timer(<span class="string">"x.pop()"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"pop(0)"</span>,<span class="string">"pop()"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>,<span class="number">10000001</span>,<span class="number">1000000</span>):</div><div class="line">    x=list(range(i))</div><div class="line">    pt=popend.timeit(number=<span class="number">1000</span>)</div><div class="line">    x=list(range(i))</div><div class="line">    pz=popzero.timeit(number=<span class="number">1000</span>)</div><div class="line">    print(<span class="string">"%15.5f,%15.5f"</span> %(pz,pt))</div><div class="line">    </div><div class="line">    </div><div class="line">    pop(<span class="number">0</span>) pop()</div><div class="line">        <span class="number">0.51379</span>,        <span class="number">0.00024</span></div><div class="line">        <span class="number">1.29079</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">1.58118</span>,        <span class="number">0.00020</span></div><div class="line">        <span class="number">2.21961</span>,        <span class="number">0.00013</span></div><div class="line">        <span class="number">2.95097</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">3.48872</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">3.98996</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">4.80045</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">5.23652</span>,        <span class="number">0.00012</span></div><div class="line">        <span class="number">6.04675</span>,        <span class="number">0.00014</span></div></pre></td></tr></table></figure><p><img src="https://facert.gitbooks.io/python-data-structure-cn/2.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/2.6.%E5%88%97%E8%A1%A8/assets/2.6.%E5%88%97%E8%A1%A8.poptime.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python数据结构的性能&quot;&gt;&lt;a href=&quot;#python数据结构的性能&quot; class=&quot;headerlink&quot; title=&quot;python数据结构的性能&quot;&gt;&lt;/a&gt;python数据结构的性能&lt;/h1&gt;&lt;h3 id=&quot;1-Python列表与字典操作的大O性能&quot;&gt;&lt;a href=&quot;#1-Python列表与字典操作的大O性能&quot; class=&quot;headerlink&quot; title=&quot;1.Python列表与字典操作的大O性能&quot;&gt;&lt;/a&gt;1.Python列表与字典操作的大O性能&lt;/h3&gt;&lt;p&gt;然后我们将做一些基于时间的实验来说明每个数据结构的花销和使用这些数据结构的好处。重要的是了解这些数据结构的效率，因为它们是本书实现其他数据结构所用到的基础模块。
    
    </summary>
    
      <category term="Python" scheme="http://www.adamzeng.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.adamzeng.site/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>你好，这个世界!</title>
    <link href="http://www.adamzeng.site/2017/10/27/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C/"/>
    <id>http://www.adamzeng.site/2017/10/27/你好，这个世界/</id>
    <published>2017-10-27T08:31:19.000Z</published>
    <updated>2017-10-27T12:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是曾维瀚，英文名Adam Zeng。600多万分之一的大学生。<a id="more"></a></p><p>许多人会问为什么人的思想会发生转变，其实上是外部的环境在变化，如果人不随环境而改变，很多时候会被社会淘汰。直到我发现了Python这个神奇的武器，知晓Web的开发流程，爬虫与反爬的技术，还有各种神奇的实现，我确实被这条蟒蛇牢牢捆住，已经动弹不得。</p><p><img src="http://oxufz8asv.bkt.clouddn.com/timg.jpeg" alt="image"></p><h4 id="2-对未来的期许"><a href="#2-对未来的期许" class="headerlink" title="2.对未来的期许"></a>2.对未来的期许</h4><p>在未来我会发布更多的关于Django web框架和基础爬虫的文章，关于HTTP协议与TCP/IP。</p><p>有兴趣的Pythonista可以关注一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是曾维瀚，英文名Adam Zeng。600多万分之一的大学生。
    
    </summary>
    
      <category term="生活" scheme="http://www.adamzeng.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://www.adamzeng.site/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令(转)</title>
    <link href="http://www.adamzeng.site/2017/06/30/Git%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>http://www.adamzeng.site/2017/06/30/Git详细教程/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-10-27T08:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在用Git，发现自己有几（hen）个（duo）不会用的命令了，这可不行啊，本着<img src="http://img.blog.csdn.net/20170112193852467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">精益求精的原则，想写一篇关于Git的博客，但发现了一片很不错的文章就引用了，写得很不错，和大家一起分享！<br><a id="more"></a></p><p>首先作为一个正直<img src="http://img.blog.csdn.net/20170112195330551?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">的程序员我会注明出处的：<img src="http://img.blog.csdn.net/20170112194124031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"> 像我这样的一定会早日变大佬！</p><p>小司机我花了好长时间重新上传图片与排版！</p><p><img src="http://i.imgur.com/WZL8kVt.png" alt=""></p><p>进入正文<br><strong>一：Git是什么？</strong></p><p> Git是目前世界上最先进的分布式版本控制系统。</p><p><strong>二：SVN与Git的最主要的区别？</strong></p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p><strong>三：在windows上如何安装Git？</strong></p><p>  msysgit是 windows版的Git,如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/01.jpg" alt=""></p><p> 需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git<br>–> Git Bash”,如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/73b0d6cdb48abf7b6e84468ba0b63ea8.jpg" alt=""></p><p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/7b4710625788e3b5afa9f44bae8eaed2.jpg" alt=""></p><p>安装完成后，还需要最后一步设置，在命令行输入如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/02a57c9fbbbaa2490f510a6ddc190c2a.jpg" alt=""></p><p>  因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p><strong>   注意：</strong>git config  –global<br>参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><p><strong>四：如何操作？</strong></p><pre><code>一：创建版本库。</code></pre><p> 什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><pre><code>所以创建一个版本库也非常简单，如下我是D盘 –\&gt; www下</code></pre><p>目录下新建一个testgit版本库。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/b6855fb63ecd54daa36e209b1ecc27fc.jpg" alt=""></p><p>pwd 命令是用于显示当前的目录。</p><pre><code>1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/bc525926ea41beb84aef55ecbd20fffc.jpg" alt=""></p><p> 这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/d5960d7dbd8f6d13e930d50fb86d72bd.jpg" alt=""></p><pre><code>2. 把文件添加到版本库中。</code></pre><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p><p><strong>    下面先看下demo如下演示：</strong></p><pre><code>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/651f92423dcb28d06d70e5d17d632ab8.jpg" alt=""></p><p>   如果和上面一样，没有任何提示，说明已经添加成功了。</p><p>   第二步：用命令 git commit告诉Git，把文件提交到仓库。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/64cb78dd4707b05fa9725a1a1201b49f.jpg" alt=""></p><p>  现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git<br>status来查看是否还有文件未提交，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/f86d72b38fe937ed8365ff3f0410cee1.jpg" alt=""></p><p> 说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git<br>status来查看下结果，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/0112b84e6fe37c7690754bf707f9c707.jpg" alt=""></p><p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。</p><p>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：</p><p>git diff readme.txt 如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3d9d3e02629a608f72e223af6f666a79.jpg" alt=""></p><p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p><p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git<br>add  第二步是：git commit)。</p><p>如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/63f8dab305b02ab53b54547930c7dfe1.jpg" alt=""></p><p>二：版本回退：</p><p> 如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p><p>内容为33333333333333.继续执行命令如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/ec47467f29f46dd94973450d4108e0f9.jpg" alt=""></p><p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令<br>git log 演示如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3ec1dc53145fafa44d5a2e26841d4c45.jpg" alt=""></p><pre><code>git</code></pre><p>log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是<br>111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline<br>演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/a0b2822fc5d1f85f8ee3aba58c3d9aca.jpg" alt=""></p><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git<br>reset  –hard HEAD\^ 那么如果要回退到上上个版本只需把HEAD\^ 改成 HEAD\^\^<br>以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git<br>reset  –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c795ea38022353ecff240a2bb907799a.jpg" alt=""></p><p>如果想回退到上一个版本的命令如下操作：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/f5cf5652e077800a51a61454817b8078.jpg" alt=""></p><p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c258b0cdf86299089125f155c60dd515.jpg" alt=""></p><p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log<br>来查看下历史记录信息，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/ad6c2a0e1061b8e08111735e149e0a1e.jpg" alt=""></p><p>我们看到 增加333333<br>内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p><p>git reset  –hard 版本号<br>，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git<br>reflog  演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/07e318b56e224a6707f56ffbe5370d72.jpg" alt=""></p><p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令</p><p>git reset  –hard 6fcfc89来恢复了。演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/96137ced101b595afe01e36f80fa9264.jpg" alt=""></p><p>可以看到 目前已经是最新的版本了。</p><p>三：理解工作区与暂存区的区别？</p><p> <strong>工作区：</strong>就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p><p><strong><br>版本库(Repository)：</strong>工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p>我们前面说过使用Git提交文件到版本库有两步：</p><p>  第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p>  第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><p>我们继续使用demo来演示下：</p><p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt<br>内容为test，我们先用命令 git status来查看下状态，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/7bd5704c847a24f58e74c8bab4c977c3.jpg" alt=""></p><p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git<br>status来查看下状态，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/9143af30e332880c761cc16ca8b85f9b.jpg" alt=""></p><p>接着我们可以使用git commit一次性提交到分支上，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3b3b8d91fa276311a5e4833848115523.jpg" alt=""></p><p>四：Git撤销修改和删除文件操作。</p><p><strong>一：撤销修改：</strong></p><pre><code>比如我现在在readme.txt文件里面增加一行</code></pre><p>内容为555555555555，我们先通过命令查看如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/a6ea3327dab506c8e1f5cdc91e14e522.jpg" alt=""></p><p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p><p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD\^</p><p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用<br>git status 查看下当前的状态。如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/83b8597ff3db970d292f211ba2f23d48.jpg" alt=""></p><p>可以发现，Git会告诉你，git checkout  — file 可以丢弃工作区的修改，如下命令：</p><p>git checkout  —  readme.txt,如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/8e8c40a64fa3c032c63876fb6b03e732.jpg" alt=""></p><p>命令 git checkout –readme.txt<br>意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><ol><li><p>readme.txt自动修改后，还没有放到暂存区，使用<br>撤销修改就回到和版本库一模一样的状态。</p></li><li><p>另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p></li></ol><p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行<br>内容为6666666666666，我git add<br>增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c47846f81f64f9c3034346ad61da36c8.jpg" alt=""></p><p><strong>注意：</strong>命令git checkout — readme.txt 中的 — 很重要，如果没有 —<br>的话，那么命令变成创建分支了。</p><p><strong>二：删除文件。</strong></p><pre><code>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/e07952351006207769f5e82cba883826.jpg" alt=""></p><p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt<br>，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令<br>提交掉，现在目录是这样的，</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/165f2c551d10c7cf2dcd8ab1107068b5.jpg" alt=""></p><p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？</p><p>可以使用如下命令 git checkout  — b.txt，如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/8be208d19e263fbd7d6513026e5ac261.jpg" alt=""></p><p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/6e6035066acfcda7b7e654dd74726c3d.jpg" alt=""></p><p>五：远程仓库。</p><p> 在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><pre><code>第一步：创建SSH</code></pre><p>Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p><p>ssh-keygen  -t rsa –C “youremail\@example.com”,<br>由于我本地此前运行过一次，所以本地有，如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/e0ae93a7c810ed00871a0302f7712fe9.jpg" alt=""></p><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH<br>Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/6e2e20ed2d7d0062e85eac0167f665df.jpg" alt=""></p><p>点击 Add Key，你就应该可以看到已经添加的key。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c21779d050238337af124697eb316be6.jpg" alt=""></p><ol><li>如何添加远程库？</li></ol><p> 现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p><p>   首先，登录github上，然后在右上角找到“create a new<br>repo”创建一个新的仓库。如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/6369016070aebc467e2c47f7cf7c2ada.jpg" alt=""></p><p>在Repository name填入testgit，其他保持默认设置，点击“Create<br>repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/bea1d16ab729a3e2798b49af12a54057.jpg" alt=""></p><p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：</p><p>git remote add origin <a href="https://github.com/tugenhua0707/testgit.git" target="_blank" rel="external">https://github.com/tugenhua0707/testgit.git</a></p><p>所有的如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/b72192a4d47c40161a80aa58275ab67a.jpg" alt=""></p><p>把本地库的内容推送到远程，使用 git<br>push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了<br>–u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/30593c83505978c306b9b9237b96ffbb.jpg" alt=""></p><p>从现在起，只要本地作了提交，就可以通过如下命令：</p><p>git push origin master</p><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p><ol><li>如何从远程库克隆？</li></ol><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。</p><p>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？</p><p>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3c72866f487dd92dabec693643b33866.jpg" alt=""></p><p>如下，我们看到：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/442eaacbfa57885fefadb7311d145b25.jpg" alt=""></p><p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/90c75484cfa95e1ec8172b668939b7d8.jpg" alt=""></p><p>接着在我本地目录下 生成testgit2目录了，如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/fee8e190b41c77955f60e9fc1318a8ce.jpg" alt=""></p><p>六：创建与合并分支。</p><p>在<br> 版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/22b4eb0fe31198b15cfea63e573cc334.jpg" alt=""></p><p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令</p><p>git branch dev</p><p>git checkout dev</p><p>git<br>branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行<br>7777777777777</p><p>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/b983458ea054183eb4af57d8d6e7824f.jpg" alt=""></p><p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/764fe94576f63dd73479147ff94e2e04.jpg" alt=""></p><p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令<br>git merge dev 如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/5a483a3fd6682c4052c997fcfd946b45.jpg" alt=""></p><p>git<br>merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p><p>注意到上面的<em>Fast-forward</em>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p><p>合并完成后，我们可以接着删除dev分支了，操作如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/09992931708f48a78aed199a6eeb97c6.jpg" alt=""></p><p>总结创建与合并分支命令如下：</p><p>   查看分支：git branch</p><p>   创建分支：git branch name</p><p>   切换分支：git checkout name</p><p>创建+切换分支：git checkout –b name</p><p>合并某分支到当前分支：git merge name</p><p>删除分支：git branch –d name</p><ol><li>如何解决冲突？</li></ol><p>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/5f3282f0f6311189aa05e56d9c2647aa.jpg" alt=""></p><p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/44e1ea9097086ed2a38d39557a5d2425.jpg" alt=""></p><p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/9ee63bb968403c8ee705dfdadda1b162.jpg" alt=""></p><p>Git用\&lt;\&lt;\&lt;\&lt;\&lt;\&lt;\&lt;，=======，>>>>>>>标记出不同分支的内容，其中\&lt;\&lt;\<head是指主分支修改的内容，\>>>>>fenzhi1<br>是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，\></p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/737caa86ac59bfa5fa835f5127bacedb.jpg" alt=""></p><p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/b2fdecfd7040a07aaeafe231c408c00c.jpg" alt=""></p><pre><code>3.分支管理策略。  通常合并分支时，git一般使用”Fast</code></pre><p>forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数<br>–no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><ol><li><p>创建一个dev分支。</p></li><li><p>修改readme.txt内容。</p></li><li><p>添加到暂存区。</p></li><li><p>切换回主分支(master)。</p></li><li><p>合并dev分支，使用命令 git merge –no-ff  -m “注释” dev</p></li><li><p>查看历史记录</p></li></ol><p>截图如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/4662d65c8cfea344bfb8cd7f4670a921.jpg" alt=""></p><p><strong>分支策略：</strong>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><p>七：bug分支：</p><pre><code>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</code></pre><p>比如我在开发中接到一个404<br>bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/0e2a9ae1dc1d6e279060d9ce9f81294a.jpg" alt=""></p><p> 并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404<br>bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场<br>”隐藏起来”，等以后恢复现场后继续工作。如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/00ce3a067db394d1a0124027665a0532.jpg" alt=""></p><p>   所以现在我可以通过创建issue-404分支来修复bug了。</p><p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3a0d0c604680c7ab4e955a03a569b45b.jpg" alt=""></p><p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3b65e4a06634faacd01b9d7d41e5d4c5.jpg" alt=""></p><p>现在，我们回到dev分支上干活了。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c33b417032263385b8c83c9f72ab38f1.jpg" alt=""></p><p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash<br>list来查看下。如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/482359a3df7b714e023dc37979deef16.jpg" alt=""></p><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p><ol><li><p>git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash<br>drop来删除。</p></li><li><p>另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p><pre><code>演示如下</code></pre></li></ol><p><img src="http://oc5bjv3gr.bkt.clouddn.com/4a6db00d7a489527a1f2261780dd0698.jpg" alt=""></p><p>八：多人协作。</p><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。</p><ol><li><p>要查看远程库的信息 使用 git remote</p></li><li><p>要查看远程库的详细信息 使用 git remote –v</p></li></ol><p>如下演示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/ba6e0940a55f3ec5f15f3208009e48b6.jpg" alt=""></p><p><strong>一：推送分支：</strong></p><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre><code>使用命令 git push origin master</code></pre><p>比如我现在的github上的readme.txt代码如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/d4751261d0739e26382cdf95769521e9.jpg" alt=""></p><p>本地的readme.txt代码如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/8ea73f12aeb1557e2a5d3d06216ecd9c.jpg" alt=""></p><p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/eeed16637e418f1f8852cef6ac736f29.jpg" alt=""></p><p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/cdf10c8c02e75aa7996747219e2c0d83.jpg" alt=""></p><p>可以看到<br>推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git<br>push origin dev</p><p>那么一般情况下，那些分支要推送呢？</p><ol><li><p>master分支是主分支，因此要时刻与远程同步。</p></li><li><p>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p></li></ol><p><strong>二：抓取分支：</strong></p><p>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH<br>key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2</p><p>但是我首先要把dev分支也要推送到远程去，如下</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/974c96713c55582c0db69794c4429819.jpg" alt=""></p><p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/3e9afd32df20d31dbf75626a5b34a9c8.jpg" alt=""></p><p>现在目录下生成有如下所示：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/c4151ad52bd956c5a7883f93e3690dce.jpg" alt=""></p><p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git<br>checkout  –b dev origin/dev</p><p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p><p>如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/947e4d94262899a38e086689b109b1d8.jpg" alt=""></p><p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/a7f4f8fcc72bfcbbbdd4393058ad4121.jpg" alt=""></p><p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git<br>pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/b220501bdd87d216efd27ecb61f36349.jpg" alt=""></p><p><em>git<br>pull</em>也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/158b614840490bd9c4d88f70136a15bf.jpg" alt=""></p><p>这回<em>git pull</em>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<br>解决冲突完全一样。解决后，提交，再push：</p><p>我们可以先来看看readme.txt内容了。</p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/89bddf944a748371ddce3c29463cd9b7.jpg" alt=""></p><p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：  </p><p><img src="http://oc5bjv3gr.bkt.clouddn.com/04d6c30ea23d12350672e88cc0d10008.jpg" alt=""></p><p>因此：多人协作工作模式一般是这样的：</p><ol><li><p>首先，可以试图用git push origin branch-name推送自己的修改.</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</p></li><li><p>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin<br>branch-name推送。</p></li></ol><p><strong>Git基本常用命令如下：</strong></p><p>   mkdir：         XX (创建一个空目录 XX指目录名)</p><p>   pwd：          显示当前目录的路径。</p><p>   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</p><p>   git add XX       把xx文件添加到暂存区去。</p><p>   git commit –m “XX”  提交文件 –m 后面的是注释。</p><p>   git status        查看仓库状态</p><p>   git diff  XX      查看XX文件修改了那些内容</p><p>   git log          查看历史记录</p><p>   git reset  –hard HEAD\^ 或者 git reset  –hard HEAD~ 回退到上一个版本</p><pre><code>(如果想回退到100个版本，使用git reset –hard HEAD\~100 )</code></pre><p>   cat XX         查看XX文件内容</p><p>   git reflog       查看历史记录的版本号id</p><p>   git checkout — XX  把XX文件在工作区的修改全部撤销。</p><p>   git rm XX          删除XX文件</p><p>   git remote add<br>origin <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="external">https://github.com/tugenhua0707/testgit</a> 关联一个远程库</p><p>   git push –u(第一次要用-u 以后不需要) origin master<br>把当前master分支推送到远程库</p><p>   git clone <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="external">https://github.com/tugenhua0707/testgit</a>  从远程库中克隆</p><p>   git checkout –b dev  创建dev分支 并切换到dev分支上</p><p>   git branch  查看当前所有的分支</p><p>   git checkout master 切换回master分支</p><p>   git merge dev    在当前的分支上合并dev分支</p><p>   git branch –d dev 删除dev分支</p><p>   git branch name  创建分支</p><p>   git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作</p><p>   git stash list 查看所有被隐藏的文件列表</p><p>   git stash apply 恢复被隐藏的文件，但是内容不删除</p><p>   git stash drop 删除文件</p><p>   git stash pop 恢复文件的同时 也删除文件</p><p>   git remote 查看远程库的信息</p><p>   git remote –v 查看远程库的详细信息</p><p>   git push origin master  Git会把master分支推送到远程库对应的远程分支上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在用Git，发现自己有几（hen）个（duo）不会用的命令了，这可不行啊，本着&lt;img src=&quot;http://img.blog.csdn.net/20170112193852467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;精益求精的原则，想写一篇关于Git的博客，但发现了一片很不错的文章就引用了，写得很不错，和大家一起分享！&lt;br&gt;
    
    </summary>
    
      <category term="GIT" scheme="http://www.adamzeng.site/categories/GIT/"/>
    
    
      <category term="Git" scheme="http://www.adamzeng.site/tags/Git/"/>
    
      <category term="github" scheme="http://www.adamzeng.site/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>java23种设计模式</title>
    <link href="http://www.adamzeng.site/2017/06/29/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.adamzeng.site/2017/06/29/java设计模式/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-10-27T08:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java23种设计模式（Design-Patterns）"><a href="#java23种设计模式（Design-Patterns）" class="headerlink" title="java23种设计模式（Design Patterns）"></a><strong><center>java23种设计模式（Design Patterns）</center></strong></h1><blockquote><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。本章系Java之美[从菜鸟到高手演变]系列之设计模式，我们会以理论与实践相结合的方式来进行本章的学习，希望广大程序爱好者，学好设计模式，做一个优秀的软件工程师！<br><a id="more"></a></p><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a><strong>设计模式的分类</strong></h2><p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<br>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/DesignPatterns.jpg" alt="这里写图片描述"></p></blockquote><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a><strong>设计模式的六大原则</strong></h2><h3 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a><strong>开闭原则（Open Close Principle）</strong></h3><blockquote><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h3 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a><strong>里氏代换原则（Liskov Substitution Principle）</strong></h3><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a><strong>依赖倒转原则（Dependence Inversion Principle）</strong></h3><p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a><strong>接口隔离原则（Interface Segregation Principle）</strong></h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p><h3 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a><strong>迪米特法则（最少知道原则）（Demeter Principle）</strong></h3><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h3 id="合成复用原则（Composite-Reuse-Principle）"><a href="#合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成复用原则（Composite Reuse Principle）"></a><strong>合成复用原则（Composite Reuse Principle）</strong></h3><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p><h2 id="Java的23中设计模式"><a href="#Java的23中设计模式" class="headerlink" title="Java的23中设计模式"></a><strong>Java的23中设计模式</strong></h2><p>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。</p></blockquote><h3 id="工厂方法模式（Factory-Method）"><a href="#工厂方法模式（Factory-Method）" class="headerlink" title="工厂方法模式（Factory Method）"></a><strong>工厂方法模式（Factory Method）</strong></h3><h4 id="普通工厂模式"><a href="#普通工厂模式" class="headerlink" title="普通工厂模式"></a><strong>普通工厂模式</strong></h4><blockquote><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-1.png" alt="factory"></p></blockquote><p>首先，创建二者的共同接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其次，创建实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后，建工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            System.out.println(<span class="string">"请输入正确的类型!"</span>);  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produce(<span class="string">"sms"</span>);  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>输出：this is sms sender!</strong></p><h4 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式"></a><strong>多个工厂方法模式</strong></h4><blockquote><p>多个工厂方法模式,是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-2.jpg" alt="这里写图片描述"></p></blockquote><p>将上面的代码做下修改，改动下SendFactory类就行，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">   <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>输出：this is mailsender!</strong></p><h4 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a><strong>静态工厂方法模式</strong></h4><blockquote><p>静态工厂方法模式,将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </div><div class="line">        Sender sender = SendFactory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>输出：this is mailsender!</strong></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p></blockquote><h3 id="抽象工厂模式（Abstract-Factory）"><a href="#抽象工厂模式（Abstract-Factory）" class="headerlink" title="抽象工厂模式（Abstract Factory）"></a><strong>抽象工厂模式（Abstract Factory）</strong></h3><blockquote><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解。</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-3.jpg" alt="这里写图片描述"></p></blockquote><p>请看例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>两个实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">再提供一个接口：</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();  </div><div class="line">        Sender sender = provider.produce();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</p></blockquote><h3 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a><strong>单例模式（Singleton）</strong></h3><blockquote><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：<br>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。<br>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。<br><strong>首先我们写一个简单的单例类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 静态工程方法，创建实例 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><p>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">synchronized</span> (instance) &#123;  </div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">                    instance = <span class="keyword">new</span> Singleton();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：<br>a&gt;A、B线程同时进入了第一个if判断<br>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();<br>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。<br>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。<br>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;           </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();           </div><div class="line">    &#125;           </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;           </div><div class="line">    <span class="keyword">return</span> SingletonFactory.instance;           </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 此处使用一个内部类来维护单例 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 获取实例 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonFactory.instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> getInstance();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            syncInit();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。<br><strong>补充：采用”影子实例”的办法为单例对象的属性同步更新</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">private</span> Vector properties = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Vector <span class="title">getProperties</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> properties;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            syncInit();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProperties</span><span class="params">()</span> </span>&#123;  </div><div class="line">        SingletonTest shadow = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        properties = shadow.getProperties();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>通过单例模式的学习告诉我们：<br>1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。<br>2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。<br>到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？<br>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）<br>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。<br>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。<br>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p><h3 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a><strong>建造者模式（Builder）</strong></h3><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> ArrayList&lt;Sender&gt;();  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMailSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </div><div class="line">            list.add(<span class="keyword">new</span> MailSender());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceSmsSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </div><div class="line">            list.add(<span class="keyword">new</span> SmsSender());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Builder builder = <span class="keyword">new</span> Builder();  </div><div class="line">        builder.produceMailSender(<span class="number">10</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p><h3 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a><strong>原型模式（Prototype）</strong></h3><blockquote><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </div><div class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </div><div class="line">        <span class="keyword">return</span> proto;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><blockquote><p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：<br>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。<br>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。<br>此处，写一个深浅复制的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </div><div class="line">    <span class="keyword">private</span> String string;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> SerializableObject obj;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 浅复制 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </div><div class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </div><div class="line">        <span class="keyword">return</span> proto;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 深复制 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">/* 写入当前对象的二进制流 */</span>  </div><div class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </div><div class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </div><div class="line">        oos.writeObject(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">        <span class="comment">/* 读出二进制流产生的新对象 */</span>  </div><div class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());  </div><div class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);  </div><div class="line">        <span class="keyword">return</span> ois.readObject();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> string;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.string = string;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> SerializableObject <span class="title">getObj</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> obj;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(SerializableObject obj)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.obj = obj;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><p>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。<br>我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源，我们看下面的图：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/model.png" alt="模式"></p><h3 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a><strong>适配器模式（Adapter）</strong></h3><blockquote><p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。首先，我们来看看类的适配器模式，先看类图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter.jpg" alt="适配器模式"></p></blockquote><p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 与原类中的方法相同 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 新类的方法 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Adapter类继承Source类，实现Targetable接口，下面是测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Targetable target = <span class="keyword">new</span> Adapter();  </div><div class="line">        target.method1();  </div><div class="line">        target.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><strong>this is original method!</strong><br><strong>this is the targetable method!</strong><br>这样Targetable接口的实现类就具有了Source类的功能。</p><h4 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a><strong>对象的适配器模式</strong></h4><blockquote><p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。看图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter-1.jpg" alt="这里写图片描述"></p></blockquote><p>只需要修改Adapter类的源码即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Source source;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(Source source)</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = source;  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </div><div class="line">        source.method1();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Source source = <span class="keyword">new</span> Source();  </div><div class="line">        Targetable target = <span class="keyword">new</span> Wrapper(source);  </div><div class="line">        target.method1();  </div><div class="line">        target.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>输出与第一种一样，只是适配的方法不同而已。</strong></p><h4 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a><strong>接口的适配器模式</strong></h4><blockquote><p>接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter-3.jpg" alt="Adapter"></p></blockquote><p>这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>抽象类Wrapper2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's first Sub1!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's second Sub2!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source1 = <span class="keyword">new</span> SourceSub1();  </div><div class="line">        Sourceable source2 = <span class="keyword">new</span> SourceSub2();  </div><div class="line">          </div><div class="line">        source1.method1();  </div><div class="line">        source1.method2();  </div><div class="line">        source2.method1();  </div><div class="line">        source2.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试输出：<br><strong>the sourceable interface’s first Sub1!</strong><br><strong>the sourceable interface’s second Sub2!</strong></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>讲了这么多，总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</p></blockquote><h3 id="7、装饰模式（Decorator）"><a href="#7、装饰模式（Decorator）" class="headerlink" title="7、装饰模式（Decorator）"></a><strong>7、装饰模式（Decorator）</strong></h3><blockquote><p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Decotator.jpg" alt="装饰者模式"></p></blockquote><p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Sourceable source;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = source;  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"before decorator!"</span>);  </div><div class="line">        source.method();  </div><div class="line">        System.out.println(<span class="string">"after decorator!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source = <span class="keyword">new</span> Source();  </div><div class="line">        Sourceable obj = <span class="keyword">new</span> Decorator(source);  </div><div class="line">        obj.method();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><strong>before decorator!</strong><br><strong>the original method!</strong><br><strong>after decorator!</strong></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>装饰器模式的应用场景：<br>1、需要扩展一个类的功能。<br>2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>缺点：产生过多相似的对象，不易排错！</p></blockquote><h3 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a><strong>代理模式（Proxy）</strong></h3><blockquote><p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Proxy.jpg" alt="Proxy模式"></p></blockquote><p>根据上文的阐述，代理模式就比较容易的理解了，我们看下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Source source;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = <span class="keyword">new</span> Source();  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        before();  </div><div class="line">        source.method();  </div><div class="line">        atfer();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">atfer</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"after proxy!"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"before proxy!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source = <span class="keyword">new</span> Proxy();  </div><div class="line">        source.method();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><strong>before proxy!</strong><br><strong>the original method!</strong><br><strong>after proxy!</strong></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java23种设计模式（Design-Patterns）&quot;&gt;&lt;a href=&quot;#java23种设计模式（Design-Patterns）&quot; class=&quot;headerlink&quot; title=&quot;java23种设计模式（Design Patterns）&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;center&gt;java23种设计模式（Design Patterns）&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。本章系Java之美[从菜鸟到高手演变]系列之设计模式，我们会以理论与实践相结合的方式来进行本章的学习，希望广大程序爱好者，学好设计模式，做一个优秀的软件工程师！&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.adamzeng.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.adamzeng.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://www.adamzeng.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://www.adamzeng.site/2017/06/29/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.adamzeng.site/2017/06/29/Git常用命令/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-10-27T08:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"><a href="#Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。" class="headerlink" title="Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"></a><strong>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</strong></h2><p>Git常用操作命令：</p><h3 id="远程仓库相关命令"><a href="#远程仓库相关命令" class="headerlink" title="远程仓库相关命令"></a><strong>远程仓库相关命令</strong></h3><p>检出仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git://github.com/jquery/jquery.git</div></pre></td></tr></table></figure></p><p>查看远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure></p><p>添加远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [name] [url]</div></pre></td></tr></table></figure></p><p>删除远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm [name]</div></pre></td></tr></table></figure></p><p>修改远程仓库：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">set</span>-url --push [name] [newUrl]</div></pre></td></tr></table></figure></p><p>拉取远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull [remoteName] [localBranchName]</div></pre></td></tr></table></figure></p><p>推送远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remoteName] [localBranchName]</div></pre></td></tr></table></figure></p><p><strong>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> push origin <span class="built_in">test</span>:master // 提交本地<span class="built_in">test</span>分支作为远程的master分支</div><div class="line"></div><div class="line"><span class="variable">$git</span> push origin <span class="built_in">test</span>:<span class="built_in">test</span>  // 提交本地<span class="built_in">test</span>分支作为远程的<span class="built_in">test</span>分支</div></pre></td></tr></table></figure></p><h3 id="分支-branch-操作相关命令"><a href="#分支-branch-操作相关命令" class="headerlink" title="分支(branch)操作相关命令"></a><strong>分支(branch)操作相关命令</strong></h3><p>查看本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p><p>查看远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p><p>创建本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [name] //----注意新分支创建后不会自动切换为当前分支</div></pre></td></tr></table></figure></p><p>切换分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [name]</div></pre></td></tr></table></figure></p><p>创建新分支并立即切换到新分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [name]</div></pre></td></tr></table></figure></p><p>删除分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git branch -d [name] </div><div class="line"></div><div class="line">// -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</div><div class="line"> </div><div class="line">$ git merge [name] //----将名称为[name]的分支与当前分支合并</div></pre></td></tr></table></figure></p><p>创建远程分支(本地分支push到远程)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [name]</div></pre></td></tr></table></figure></p><p>删除远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :heads/[name] 或 $ gitpush origin :[name]</div></pre></td></tr></table></figure></p><p><strong>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> symbolic-ref HEAD refs/heads/[name]</div><div class="line"><span class="variable">$rm</span> .git/index</div><div class="line"><span class="variable">$git</span> clean -fdx</div></pre></td></tr></table></figure><h2 id="版本-tag-操作相关命令"><a href="#版本-tag-操作相关命令" class="headerlink" title="版本(tag)操作相关命令"></a><strong>版本(tag)操作相关命令</strong></h2><p>查看版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure></p><p>创建版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [name]</div></pre></td></tr></table></figure></p><p>删除版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -d [name]</div></pre></td></tr></table></figure></p><p>查看远程版本：$ git tag -r<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -r</div></pre></td></tr></table></figure></p><p>创建远程版本(本地版本push到远程)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [name]</div></pre></td></tr></table></figure></p><p>删除远程版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/[name]</div></pre></td></tr></table></figure></p><p>合并远程仓库的tag到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin --tags</div></pre></td></tr></table></figure></p><p>上传本地tag到远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure></p><p>创建带注释的tag：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a [name] -m <span class="string">'yourMessage'</span></div></pre></td></tr></table></figure></p><h2 id="子模块-submodule-相关操作命令"><a href="#子模块-submodule-相关操作命令" class="headerlink" title="子模块(submodule)相关操作命令"></a><strong>子模块(submodule)相关操作命令</strong></h2><p>添加子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule add [url] [path]</div></pre></td></tr></table></figure></p><p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</div></pre></td></tr></table></figure></p><p>初始化子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule init  //----只在首次检出仓库时运行一次就行</div></pre></td></tr></table></figure></p><p>更新子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule update //----每次更新或切换分支后都需要运行一下</div></pre></td></tr></table></figure></p><p>删除子模块：（分4步走哦）</p><blockquote><p>$ git rm –cached [path]<br>  编辑“.gitmodules”文件，将子模块的相关配置节点删除掉<br>  编辑“ .git/config”文件，将子模块的相关配置节点删除掉<br>  手动删除子模块残留的目录</p></blockquote><h2 id="忽略一些文件、文件夹不提交"><a href="#忽略一些文件、文件夹不提交" class="headerlink" title="忽略一些文件、文件夹不提交"></a><strong>忽略一些文件、文件夹不提交</strong></h2><p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br>target<br>bin<br>*.db</p><hr><p><strong>Git 常用命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">git branch 查看本地所有分支</div><div class="line">git status 查看当前状态 </div><div class="line">git commit 提交 </div><div class="line">git branch -a 查看所有的分支</div><div class="line">git branch -r 查看本地所有分支</div><div class="line">git commit -am <span class="string">"init"</span> 提交并且加注释 </div><div class="line">git remote add origin git@192.168.1.119:ndshow</div><div class="line">git push origin master 将文件给推到服务器上 </div><div class="line">git remote show origin 显示远程库origin里的资源 </div><div class="line">git push origin master:develop</div><div class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联 </div><div class="line">git checkout --track origin/dev 切换到远程dev分支</div><div class="line">git branch -D master develop 删除本地库develop</div><div class="line">git checkout -b dev 建立一个新的本地分支dev</div><div class="line">git merge origin/dev 将分支dev与当前分支进行合并</div><div class="line">git checkout dev 切换到本地dev分支</div><div class="line">git remote show 查看远程库</div><div class="line">git add .</div><div class="line">git rm 文件名(包括路径) 从git中删除指定文件</div><div class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git 从服务器上将代码给拉下来</div><div class="line">git config --list 看所有用户</div><div class="line">git ls-files 看已经被提交的</div><div class="line">git rm [file name] 删除一个文件</div><div class="line">git commit -a 提交当前repos的所有的改变</div><div class="line">git add [file name] 添加一个文件到git index</div><div class="line">git commit -v 当你用－v参数的时候可以看commit的差异</div><div class="line">git commit -m <span class="string">"This is the message describing the commit"</span> 添加commit信息</div><div class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</div><div class="line">git commit -a -v 一般提交命令</div><div class="line">git <span class="built_in">log</span> 看你commit的日志</div><div class="line">git diff 查看尚未暂存的更新</div><div class="line">git rm a.a 移除文件(从暂存区和工作区中删除)</div><div class="line">git rm --cached a.a 移除文件(只从暂存区中删除)</div><div class="line">git commit -m <span class="string">"remove"</span> 移除文件(从Git中删除)</div><div class="line">git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</div><div class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</div><div class="line">git stash push 将文件给push到一个临时空间中</div><div class="line">git stash pop 将文件从临时空间pop下来</div><div class="line"></div><div class="line">git remote add origin git@github.com:username/Hello-World.git</div><div class="line">git push origin master 将本地项目给提交到服务器中</div><div class="line"></div><div class="line">git pull 本地与服务器端同步</div><div class="line"></div><div class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</div><div class="line">git push origin serverfix:awesomebranch</div><div class="line"></div><div class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</div><div class="line">git commit -a -m <span class="string">"log_message"</span> (-a是提交所有改动，-m是加入<span class="built_in">log</span>信息) 本地修改同步至服务器端 ：</div><div class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</div><div class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</div><div class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</div><div class="line">du -hs</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。&quot;&gt;&lt;a href=&quot;#Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。&quot; class=&quot;headerlink&quot; title=&quot;Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。&quot;&gt;&lt;/a&gt;&lt;strong&gt;Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Git常用操作命令：&lt;/p&gt;
&lt;h3 id=&quot;远程仓库相关命令&quot;&gt;&lt;a href=&quot;#远程仓库相关命令&quot; class=&quot;headerlink&quot; title=&quot;远程仓库相关命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;远程仓库相关命令&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;检出仓库：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://github.com/jquery/jquery.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看远程仓库：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git remote -v&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加远程仓库：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git remote add [name] [url]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;删除远程仓库：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git remote rm [name]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改远程仓库：&lt;br&gt;
    
    </summary>
    
      <category term="GIT" scheme="http://www.adamzeng.site/categories/GIT/"/>
    
    
      <category term="Git" scheme="http://www.adamzeng.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT主题配置</title>
    <link href="http://www.adamzeng.site/2017/06/28/hexo-nexT%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/"/>
    <id>http://www.adamzeng.site/2017/06/28/hexo-nexT配置详情/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-10-27T08:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo之next主题个性化配置详细教程"><a href="#hexo之next主题个性化配置详细教程" class="headerlink" title="hexo之next主题个性化配置详细教程"></a><strong><center>hexo之next主题个性化配置详细教程</center></strong></h1><h2 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1.在右上角或者左上角实现fork me on github"></a><strong>1.在右上角或者左上角实现fork me on github</strong></h2><p><strong>实现的效果图</strong></p><blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github.png" alt=""></p></blockquote><p><strong>具体实现方法</strong><br><a id="more"></a></p><blockquote><p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">传送门&gt;&gt;</a><br>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github-demo.png" alt=""></p><p>然后粘贴刚才复制的代码到<br>themes/next/layout/_layout.swig<br>文件中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p></blockquote><p>的下面，并把href改为你的github地址!<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/wongzeqi"</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github-code.png" alt=""></p><h2 id="2-添加RSS"><a href="#2-添加RSS" class="headerlink" title="2.添加RSS"></a><strong>2.添加RSS</strong></h2><p><strong>实现效果图</strong></p><blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhiRSS.png" alt=""></p></blockquote><p><strong>具体实现方法</strong></p><blockquote><p>切换到hexo初始化的目录上然后安装 Hexo 插件：(这个插件会放在node_modules这个文件夹里)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-feedalert(s);</div></pre></td></tr></table></figure><blockquote><p>接下来打开站点配置文件 _config.yml 在里面的末尾添加(请注意在冒号后面要加一个空格，不然会发生错误！)</p></blockquote><pre><code># Extensions ## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed</code></pre><blockquote><p>然后打开next主题文件夹里面的_config.yml,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格)</p></blockquote><pre><code># Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml</code></pre><blockquote><p>配置完之后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure></p><p>重新生成一次，你会在 ./public 文件夹中看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p><h2 id="3-添加动态粒子背景"><a href="#3-添加动态粒子背景" class="headerlink" title="3. 添加动态粒子背景"></a><strong>3. 添加动态粒子背景</strong></h2><p> <strong>实现效果图</strong></p></blockquote><p> <img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhibg.png" alt="背景图片效果"></p><p> <strong>具体实现方法</strong></p><blockquote><p>修改_layout.swig<br> 打开 next/layout/_layout.swig<br> 在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)</p></blockquote><pre><code>{% if theme.canvas_nest %}<script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>{% endif %}</code></pre><blockquote><p>修改配置文件<br>打开 /next/_config.yml在里面添加如下代码：(可以放在最后面)</p></blockquote><pre><code># --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true</code></pre><blockquote><p>到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\（￣︶￣）/</p><p><strong>如果你感觉默认的线条太多的话</strong><br>可以这么设置====&gt;<br>在上一步修改 _layout.swig中，把刚才的这些代码：</p></blockquote><pre><code>{% if theme.canvas_nest %}<script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>{% endif %}</code></pre><blockquote><p><strong>说明</strong><br>配置项说明</p></blockquote><pre><code>color ：线条颜色, 默认: &apos;0,0,0&apos;；三个数字分别为(R,G,B)opacity: 线条透明度（0~1）, 默认: 0.5count: 线条的总数量, 默认: 150zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</code></pre><blockquote><p>实现点击出现桃心效果</p></blockquote><p>在网址输入如下<br>     <a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="external">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</a><br>    然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。<br>    将love.js文件放到路径/themes/next/source/js/src里面，<br>    然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）<br>    添加以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><h2 id="4-修改文章内链接文本样式"><a href="#4-修改文章内链接文本样式" class="headerlink" title="4. 修改文章内链接文本样式"></a><strong>4. 修改文章内链接文本样式</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhilink.gif" alt="效果图"></p><blockquote><p><strong>具体实现方法</strong></p></blockquote><p>修改文件 themes\next\source\css_common\components\post\post.styl ，在末尾添加如下css样式，：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 文章内链接文本样式</div><div class="line">.post-body p a&#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  border-bottom: 1px solid #0593d3;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #fc6423;</div><div class="line">    border-bottom: none;</div><div class="line">    border-bottom: 1px solid #fc6423;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="5-修改文章底部的那个带-号的标签"><a href="#5-修改文章底部的那个带-号的标签" class="headerlink" title="5. 修改文章底部的那个带#号的标签"></a><strong>5. 修改文章底部的那个带#号的标签</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhitargs.png" alt="tags"></p><blockquote><p><strong>具体实现方法</strong></p></blockquote><p>修改模板<br>/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="6-在每篇文章末尾统一添加“本文结束”标记"><a href="#6-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="6. 在每篇文章末尾统一添加“本文结束”标记"></a><strong>6. 在每篇文章末尾统一添加“本文结束”标记</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhiend.png" alt="end"></p><p>具体实现方法</p><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">&#123;% if not is_index %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span></div><div class="line">-------------本文结束</div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">感谢您的阅读-------------</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer之前添加如下画红色部分代码（post-footer之前两个DIV）：如下大概在360行左右的位置：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/end-code.png" alt="code"></p><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后打开主题配置文件_config.yml,在末尾添加：</p><pre><code># 文章末尾添加“本文结束”标记passage_end_tag:  enabled: true</code></pre><h2 id="7-修改作者头像并旋转"><a href="#7-修改作者头像并旋转" class="headerlink" title="7. 修改作者头像并旋转"></a><strong>7. 修改作者头像并旋转</strong></h2><blockquote><p><strong>实现效果图</strong>————————————————–无~0.0~</p><p><strong>具体实现方法</strong></p></blockquote><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"></div><div class="line">  <span class="comment">/* 头像圆形 */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</div><div class="line"></div><div class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></div><div class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</div><div class="line"> </div><div class="line"></div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</div><div class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></div><div class="line">  -webkit-animation-play-state:paused;</div><div class="line">  animation-play-state:paused;*/</div><div class="line"></div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Z 轴旋转动画 */</span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="8-主页文章添加阴影效果"><a href="#8-主页文章添加阴影效果" class="headerlink" title="8. 主页文章添加阴影效果"></a><strong>8. 主页文章添加阴影效果</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/as.png" alt="效果图"></p><blockquote><p><strong>具体实现方法</strong></p></blockquote><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*主页文章添加阴影效果*/</span></div><div class="line"> <span class="selector-class">.post</span> &#123;</div><div class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</div><div class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</div><div class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="9-在网站底部加上访问量"><a href="#9-在网站底部加上访问量" class="headerlink" title="9. 在网站底部加上访问量"></a><strong>9. 在网站底部加上访问量</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number.png" alt="效果图"></p><blockquote><p><strong>具体实现方法</strong></p></blockquote><p>打开\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这话：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number-code.png" alt="code"></p><p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>然后再合适的位置添加显示统计的代码(位置还是上述这个文件)，如图：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number-code-2.png" alt="code"></p><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="10-网站底部字数统计和时间统计"><a href="#10-网站底部字数统计和时间统计" class="headerlink" title="10. 网站底部字数统计和时间统计"></a><strong>10. 网站底部字数统计和时间统计</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/hanzi.png" alt="效果图"></p><blockquote><p><strong>具体实现方法</strong></p></blockquote><p>文字统计切换到根目录下，然后运行如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-wordcount --save</div></pre></td></tr></table></figure></p><p>然后在/themes/next/layout/_partials/footer.swig文件尾部加上：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>时间统计在根目录下安装 hexo-wordcount,运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-wordcount --save</div></pre></td></tr></table></figure></p><p>然后在主题的配置文件中，配置如下：</p><pre><code># Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount:item_text: truewordcount: truemin2read: true</code></pre><h2 id="11-在文章底部增加版权信息"><a href="#11-在文章底部增加版权信息" class="headerlink" title="11. 在文章底部增加版权信息"></a><strong>11. 在文章底部增加版权信息</strong></h2><blockquote><p><strong>实现效果图</strong></p></blockquote><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/power.png" alt="这里写图片描述"></p><blockquote><p><strong>请看具体实现步骤</strong>————————-<strong>哈哈哈哈哈</strong></p></blockquote><p>在目录next/layout/_macro/下添加my-copyright.swig：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;% if page.copyright %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>  <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></div><div class="line">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.fa-clipboard'</span>);</div><div class="line">    clipboard.on(<span class="string">'success'</span>, $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        swal(&#123;   </div><div class="line">          <span class="attr">title</span>: <span class="string">""</span>,   </div><div class="line">          <span class="attr">text</span>: <span class="string">'复制成功'</span>,   </div><div class="line">          <span class="attr">html</span>: <span class="literal">false</span>,</div><div class="line">          <span class="attr">timer</span>: <span class="number">500</span>,   </div><div class="line">          <span class="attr">showConfirmButton</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;));  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p><p>在目录next/source/css/_common/components/post/下添加my-post-copyright.styl：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">.my_post_copyright &#123;</div><div class="line">  width: 85%;</div><div class="line">  max-width: 45em;</div><div class="line">  margin: 2.8em auto 0;</div><div class="line">  padding: 0.5em 1.0em;</div><div class="line">  border: 1px solid #d3d3d3;</div><div class="line">  font-size: 0.93rem;</div><div class="line">  line-height: 1.6em;</div><div class="line">  word-break: break-all;</div><div class="line">  background: rgba(255,255,255,0.4);</div><div class="line">&#125;</div><div class="line">.my_post_copyright p&#123;margin:0;&#125;</div><div class="line">.my_post_copyright span &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 5.2em;</div><div class="line">  color: #b5b5b5;</div><div class="line">  font-weight: bold;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .raw &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 5em;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a &#123;</div><div class="line">  color: #808080;</div><div class="line">  border-bottom:0;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a:hover &#123;</div><div class="line">  color: #a3d2a3;</div><div class="line">  text-decoration: underline;</div><div class="line">&#125;</div><div class="line">.my_post_copyright:hover .fa-clipboard &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .post-url:hover &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 1em;</div><div class="line">  +mobile()&#123;display:none;&#125;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path:hover &#123;</div><div class="line">  color: #808080;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改next/layout/_macro/post.swig，在代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include 'wechat-subscriber.swig' %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>之前添加增加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include 'my-copyright.swig' %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/copyright.png" alt="这里写图片描述"></p><p>修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：</p><p>@import “my-post-copyright”<br>保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><pre><code>---title: 前端小项目：使用canvas绘画哆啦A梦date: 2017-05-22 22:53:53tags: canvascategories: 前端copyright: true---</code></pre><h2 id="12-文章加密访问"><a href="#12-文章加密访问" class="headerlink" title="12. 文章加密访问"></a><strong>12. 文章加密访问</strong></h2><blockquote><p><strong>直接看步骤</strong></p></blockquote><p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：</p><p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/password.png" alt="code"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">                alert(<span class="string">'密码错误！'</span>);</div><div class="line">                history.back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>最后在你的文章中添加password标记如图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/password-xiaoguo.png" alt="效果图"></p><h2 id="今天就写到这里-未完待续……"><a href="#今天就写到这里-未完待续……" class="headerlink" title="今天就写到这里          未完待续……"></a><strong><center>今天就写到这里          未完待续……</center></strong></h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo之next主题个性化配置详细教程&quot;&gt;&lt;a href=&quot;#hexo之next主题个性化配置详细教程&quot; class=&quot;headerlink&quot; title=&quot;hexo之next主题个性化配置详细教程&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;center&gt;hexo之next主题个性化配置详细教程&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-在右上角或者左上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#1-在右上角或者左上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;1.在右上角或者左上角实现fork me on github&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.在右上角或者左上角实现fork me on github&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;实现的效果图&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;具体实现方法&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://www.adamzeng.site/categories/HEXO/"/>
    
    
      <category term="hext" scheme="http://www.adamzeng.site/tags/hext/"/>
    
      <category term="next" scheme="http://www.adamzeng.site/tags/next/"/>
    
  </entry>
  
</feed>
